(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1212:function(e,t,a){"use strict";var n=a(0),o=a.n(n),c=a(3),i=a.n(c),r=a(6),s=a(314),l=a(1033),d=a(1028),p=a(1610),m=a.n(p),u=a(1136),g=a.n(u),w=a(21),h=a(1045),f=a(177);a(179);function E(e){const{classes:t,doc:a,apiId:c,fullScreen:i,intl:r}=e,{api:p}=Object(n.useContext)(h.a),[u,E]=Object(n.useState)(""),y=new f.a;Object(n.useEffect)(()=>{"MARKDOWN"!==a.sourceType&&"INLINE"!==a.sourceType||b()},[e.doc]);const b=()=>{y.getInlineContentOfDocument(c,a.documentId).then(e=>{let t=e.text;Object.keys(p).map(e=>{let a=new RegExp("___"+e+"___","g");t=t.replace(a,p[e])}),E(t)}).catch(e=>{0})};return o.a.createElement(o.a.Fragment,null,!i&&o.a.createElement("div",{className:t.docBadge},a.type),a.summary&&o.a.createElement(s.a,{variant:"body1",className:t.docSummary},a.summary),"MARKDOWN"===a.sourceType&&o.a.createElement(m.a,{source:u}),"INLINE"===a.sourceType&&o.a.createElement(g.a,{html:u}),"URL"===a.sourceType&&o.a.createElement("a",{className:t.displayURL,href:a.sourceUrl,target:"_blank"},a.sourceUrl,o.a.createElement(l.a,{className:t.displayURLLink},"open_in_new")),"FILE"===a.sourceType&&o.a.createElement(d.a,{variant:"contained",color:"default",className:t.button,onClick:()=>{y.getFileForDocument(c,a.documentId).then(e=>{((e,t)=>{let a="";const n=e.headers["content-disposition"];if(n&&-1!==n.indexOf("attachment")){const e=/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(n);null!=e&&e[1]&&(a=e[1].replace(/['"]/g,""))}const o=e.headers["content-type"],c=new Blob([e.data],{type:o});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(c,a);else{const e=window.URL||window.webkitURL,t=e.createObjectURL(c);if(a){const e=document.createElement("a");void 0===e.download?window.location=t:(e.href=t,e.download=a,document.body.appendChild(e),e.click())}else window.location=t;setTimeout(()=>{e.revokeObjectURL(t)},100)}})(e,document)}).catch(e=>{0})}},o.a.createElement(w.a,{id:"Apis.Details.Documents.View.btn.download",defaultMessage:"Download"}),o.a.createElement(l.a,null,"arrow_downward")))}E.propTypes={classes:i.a.shape({}).isRequired,doc:i.a.shape({}).isRequired,apiId:i.a.shape({}).isRequired,intl:i.a.shape({formatMessage:i.a.func}).isRequired,fullScreen:i.a.shape({}).isRequired},t.a=Object(w.e)(Object(r.a)(e=>({root:{paddingTop:e.spacing(2),paddingBottom:e.spacing(2)},docTitle:{fontWeight:100,fontSize:50,color:e.palette.grey[500]},docBadge:{padding:e.spacing(1),background:e.palette.primary.main,position:"absolute",top:0,marginTop:-22,color:e.palette.getContrastText(e.palette.primary.main)},button:{padding:e.spacing(2),marginTop:e.spacing(2)},displayURL:{padding:e.spacing(2),marginTop:e.spacing(2),background:e.palette.grey[200],color:e.palette.getContrastText(e.palette.grey[200]),display:"flex"},displayURLLink:{paddingLeft:e.spacing(2)},docSummary:{marginTop:e.spacing(2)}}))(E))},2148:function(e,t,a){"use strict";a.r(t);var n=a(0),o=a.n(n),c=a(3),i=a.n(c),r=a(21),s=a(72),l=a(6),d=a(451),p=a(314),m=a(530),u=a(1221),g=a(1222),w=a(1223),h=a(1033),f=a(1059),E=a(179),y=a(177),b=a(1050);var T=a(1018),v=a(1254),N=a(534),L=a(1212);const O=Object(T.a)(e=>({fullView:{cursor:"pointer",position:"absolute",right:5,top:5},paper:{padding:e.spacing(2),color:e.palette.text.secondary,minHeight:400,position:"relative"},popupHeader:{display:"flex",flexDirection:"row",alignItems:"center",position:"fixed",width:"100%"},viewWrapper:{padding:2*e.spacing.unit,marginTop:50}}));function I(e){const t=e.match.params.apiUuid,a=O(),[c,i]=Object(n.useState)(!1),{selectedDoc:r}=e,s=()=>{i(!c)};return o.a.createElement(o.a.Fragment,null,o.a.createElement(d.a,{className:a.paper},("MARKDOWN"===r.sourceType||"INLINE"===r.sourceType)&&o.a.createElement(h.a,{className:a.fullView,onClick:s},"launch"),o.a.createElement(L.a,{doc:r,apiId:t,fullScreen:c})),o.a.createElement(v.a,{fullScreen:!0,open:c,onClose:s},o.a.createElement(d.a,{square:!0,className:a.popupHeader},o.a.createElement(N.a,{color:"inherit",onClick:s,"aria-label":"Close"},o.a.createElement(h.a,null,"close")),o.a.createElement(p.a,{variant:"h4"},r.name)),o.a.createElement("div",{className:a.viewWrapper},o.a.createElement(L.a,{doc:r,apiId:t,fullScreen:c}))))}var R=a(1155);function D(){return(D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function x(e){const{classes:t,intl:a}=e,[c,i]=Object(n.useState)(0),[l,T]=Object(n.useState)(0),[v,N]=Object(n.useState)(null),[L,O]=Object(n.useState)(null),[x,k]=function(){const[e,t]=Object(n.useState)([0,0]);return Object(n.useLayoutEffect)(()=>{function e(){t([window.innerWidth,window.innerHeight])}return window.addEventListener("resize",e),e(),()=>window.removeEventListener("resize",e)},[]),e}(),[M,j]=Object(n.useState)(!(x<1400)),S=(t,a,n,o)=>{i(a),T(n),O(o),function(e,t,a){var n=window.scrollY||document.documentElement.scrollTop,o=(e=e||0,t=t||2e3,a=a||"easeOutSine",0);const c=Math.max(.1,Math.min(Math.abs(n-e)/t,.8)),i={easeOutSine:e=>Math.sin(e*(Math.PI/2)),easeInOutSine:e=>-.5*(Math.cos(Math.PI*e)-1),easeInOutQuint:e=>(e/=.5)<1?.5*Math.pow(e,5):.5*(Math.pow(e-2,5)+2)};!function t(){const r=(o+=1/60)/c,s=i[a](r);r<1?(requestAnimFrame(t),window.scrollTo(0,n+(e-n)*s)):(console.log("scroll done"),window.scrollTo(0,e))}()}(0,1500,"easeInOutQuint");const c=`/apis/${W}/documents/${o.documentId}/details`;e.history.push({pathname:c})},W=e.match.params.apiUuid;return Object(n.useEffect)(()=>{j(!(x<1400))},[x]),Object(n.useEffect)(()=>{(new y.a).getDocumentsByAPIId(W).then(e=>{const t=e.body.list.filter(e=>"_overview"!==e.otherTypeName),a=[];if(t.length>0)for(let e=0;e<t.length;e++){const n=t[e].type;let o=!1;for(let c=0;c<a.length;c++)n===a[c].docType&&(a[c].docs.push(t[e]),o=!0);o||a.push({docType:n,docs:[t[e]]})}N(a),a.length>0&&S(0,0,0,a[0].docs[0])}).catch(e=>{404===e.status&&E.a.error("Error occured")})},[]),o.a.createElement(o.a.Fragment,null,o.a.createElement(p.a,{variant:"h4",className:t.titleSub},o.a.createElement(r.a,{id:"Apis.Details.Documents.Documentation.title",defaultMessage:"API Documentation"})),!v||v&&0===v.length?o.a.createElement("div",{className:t.genericMessageWrapper},o.a.createElement(f.a,{type:"info",className:t.dialogContainer},o.a.createElement(p.a,{variant:"h5",component:"h3"},o.a.createElement(r.a,{id:"Apis.Details.Documents.Documentation.no.docs",defaultMessage:"No Documents Available"})),o.a.createElement(p.a,{component:"p"},o.a.createElement(r.a,{id:"Apis.Details.Documents.Documentation.no.docs.content",defaultMessage:"No documents are available for this API"})))):o.a.createElement("div",{className:t.docContainer},M&&o.a.createElement("div",{className:t.docListWrapper},o.a.createElement(d.a,{className:t.paperMenu},o.a.createElement(m.a,{component:"nav",className:t.listRoot},v.map((e,a)=>o.a.createElement(o.a.Fragment,null,o.a.createElement(u.a,{className:t.parentListItem},o.a.createElement(g.a,{classes:{root:t.listItemRoot}},o.a.createElement(b.a,{strokeColor:"#444",width:24,height:24,icon:"docs"})),o.a.createElement(w.a,{primary:e.docType,classes:{root:t.typeText}})),e.docs.length>0&&o.a.createElement(m.a,{component:"div",className:t.childList},e.docs.map((e,n)=>o.a.createElement(u.a,{button:!0,className:t.nested,classes:{selected:t.selected},selected:c===a&&l===n,onClick:t=>S(0,a,n,e)},o.a.createElement(g.a,{classes:{root:t.listItemRoot}},"MARKDOWN"===e.sourceType&&o.a.createElement(h.a,null,"code"),"INLINE"===e.sourceType&&o.a.createElement(h.a,null,"description"),"URL"===e.sourceType&&o.a.createElement(h.a,null,"open_in_new"),"FILE"===e.sourceType&&o.a.createElement(h.a,null,"arrow_downward")),o.a.createElement(w.a,{inset:!0,primary:e.name,classes:{root:t.docLinkRoot}}))))))))),o.a.createElement("div",{className:t.toggleWrapper},o.a.createElement("a",{className:t.toggler,onClick:()=>{j(!M)}},o.a.createElement("div",{className:t.togglerTextParent},o.a.createElement("div",{className:t.togglerText},M?o.a.createElement(r.a,{id:"Apis.Details.Documents.Documentation.hide",defaultMessage:"HIDE"}):o.a.createElement(r.a,{id:"Apis.Details.Documents.Documentation.show",defaultMessage:"SHOW"}))),M?o.a.createElement(h.a,null,"keyboard_arrow_left"):o.a.createElement(h.a,null,"keyboard_arrow_right"))),o.a.createElement("div",{className:t.docView},L&&o.a.createElement(s.d,null,o.a.createElement(s.a,{exact:!0,from:"/apis/:apiUuid/documents",to:`/apis/${W}/documents/${L.documentId}/details`}),o.a.createElement(s.b,{exact:!0,path:"/apis/:apiUuid/documents/:documentId/details",render:()=>o.a.createElement(I,D({selectedDoc:L},e))}),"} />",o.a.createElement(s.b,{component:R.PageNotFound})))))}window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},x.propTypes={classes:i.a.object.isRequired};t.default=Object(r.e)(Object(l.a)(e=>({paper:{padding:2*e.spacing.unit,color:e.palette.text.secondary,minHeight:400,position:"relative"},paperMenu:{color:e.palette.text.secondary,minHeight:400+4*e.spacing.unit,height:"100%"},contentWrapper:{paddingLeft:3*e.spacing.unit,paddingRight:3*e.spacing.unit,paddingTop:3*e.spacing.unit},docContent:{paddingTop:e.spacing.unit},parentListItem:{borderTop:"solid 1px #ccc",borderBottom:"solid 1px #ccc",color:e.palette.grey[100],background:e.palette.grey[100],cursor:"default"},listRoot:{paddingTop:0},nested:{paddingLeft:3*e.spacing.unit,paddingTop:3,paddingBottom:3},childList:{paddingTop:0,marginTop:0,paddingBottom:0},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:e.spacing(3),paddingTop:e.spacing(3)},titleSub:{marginLeft:e.spacing(2),paddingTop:e.spacing(2),paddingBottom:e.spacing(2)},generateCredentialWrapper:{marginLeft:0,paddingTop:e.spacing(2),paddingBottom:e.spacing(2)},genericMessageWrapper:{margin:e.spacing(2)},typeText:{color:"#000"},docLinkRoot:{paddingLeft:0},toggler:{height:"100%",paddingTop:20,cursor:"pointer",marginLeft:"-20px",display:"block"},togglerTextParent:{writingMode:"vertical-rl",transform:"rotate(180deg)"},togglerText:{textOrientation:"sideways"},toggleWrapper:{position:"relative",background:"#fff9",paddingLeft:20},docsWrapper:{margin:0},docContainer:{display:"flex",marginLeft:20,marginRight:20,marginTop:20},docListWrapper:{width:285},docView:{flex:1},listItemRoot:{minWidth:30}}))(x))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,