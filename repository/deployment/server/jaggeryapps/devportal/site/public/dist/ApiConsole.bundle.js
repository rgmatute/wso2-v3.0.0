(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{1900:function(e,t){},1902:function(e,t){},2145:function(e,t,a){"use strict";a.r(t);var n=a(0),s=a.n(n),i=a(21),l=a(1023),o=a(314),r=a(3),c=a.n(r),p=a(1027),d=a(6),u=a(534),h=a(1032),m=a(1033),g=a(24),y=a(451),f=a(1220),E=a(1028),A=a(1171),b=a.n(A),C=a(1217),k=a(1045),v=a(335),T=a(177),w=(a(1762),a(1764)),S=a.n(w);function P(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}class I extends s.a.Component{constructor(e){super(e),P(this,"requestInterceptor",e=>"function"==typeof this.props.requestInterceptor?this.props.requestInterceptor(e):e),P(this,"responseInterceptor",e=>"function"==typeof this.props.responseInterceptor?this.props.responseInterceptor(e):e),P(this,"onComplete",()=>{if("function"==typeof this.props.onComplete)return this.props.onComplete(this.system)}),this.SwaggerUIComponent=null,this.system=null}componentDidMount(){const e=S()({spec:this.props.spec,url:this.props.url,defaultModelsExpandDepth:this.props.defaultModelsExpandDepth,presets:[w.presets.apis,...this.props.presets],requestInterceptor:this.requestInterceptor,responseInterceptor:this.responseInterceptor,onComplete:this.onComplete,docExpansion:this.props.docExpansion});this.system=e,this.SwaggerUIComponent=e.getComponent("App","root"),this.forceUpdate()}componentDidUpdate(e){this.props.url!==e.url&&(this.system.specActions.updateSpec(""),this.props.url&&(this.system.specActions.updateUrl(this.props.url),this.system.specActions.download(this.props.url))),this.props.spec!==e.spec&&this.props.spec&&("object"==typeof this.props.spec?this.system.specActions.updateSpec(JSON.stringify(this.props.spec)):this.system.specActions.updateSpec(this.props.spec))}render(){return this.SwaggerUIComponent?s.a.createElement(this.SwaggerUIComponent,null):null}}I.defaultProps={docExpansion:"list",defaultModelsExpandDepth:1,presets:[]},I.propTypes={spec:c.a.oneOf([c.a.string,c.a.object]),url:c.a.string,defaultModelsExpandDepth:c.a.number,requestInterceptor:c.a.func,responseInterceptor:c.a.func,onComplete:c.a.func,docExpansion:c.a.oneOf(["list","full","none"]),presets:c.a.arrayOf(c.a.func)};const O=function(){return{wrapComponents:{info:()=>()=>null}}},D=e=>{const{spec:t,accessTokenProvider:a,authorizationHeader:n,api:i}=e,l={spec:t,validatorUrl:null,docExpansion:"list",defaultModelsExpandDepth:0,requestInterceptor:e=>{const{url:t}=e,s=i.context+"/*";if(e.headers[n]="Bearer "+a(),t.endsWith(s))e.url=t.substring(0,t.length-2);else if(t.includes(s+"?")){const a=t.split("/*?");e.url=a.length>1?a[0]+"?"+a[1]:a[0]}return e},presets:[O],plugins:null};return s.a.createElement(I,l)};D.propTypes={spec:c.a.shape({}).isRequired};var x=D,j=a(1068);var N=e=>{const{subscriptions:t,handleChanges:a,selectedApplication:n,selectedKeyType:o}=e;return s.a.createElement(s.a.Fragment,null,s.a.createElement(C.a,{display:"flex",justifyContent:"center"},s.a.createElement(l.a,{xs:12,md:3},s.a.createElement(C.a,null,s.a.createElement(p.a,{fullWidth:!0,id:"outlined-select-currency",select:!0,label:s.a.createElement(i.a,{defaultMessage:"Appplications",id:"Apis.Details.ApiConsole.SelectAppPanel.applications"}),value:n,name:"selectedApplication",onChange:a,SelectProps:t,helperText:s.a.createElement(i.a,{defaultMessage:"Please select an applications",id:"Apis.Details.ApiConsole.SelectAppPanel.select.an.application"}),margin:"normal",variant:"outlined"},t.map(e=>s.a.createElement(f.a,{value:e.applicationInfo.applicationId},e.applicationInfo.name))))),s.a.createElement(l.a,{xs:12,md:3},s.a.createElement(C.a,{ml:2},s.a.createElement(p.a,{fullWidth:!0,id:"outlined-select-currency",select:!0,label:s.a.createElement(i.a,{defaultMessage:"Key Type",id:"Apis.Details.ApiConsole.SelectAppPanel.key.type"}),value:o,name:"selectedKeyType",onChange:a,helperText:s.a.createElement(i.a,{defaultMessage:"Please select an key type",id:"Apis.Details.ApiConsole.SelectAppPanel.select.key.type"}),margin:"normal",variant:"outlined"},s.a.createElement(f.a,{value:"PRODUCTION"},s.a.createElement(i.a,{id:"Apis.Details.ApiConsole.SelectAppPanel.production",defaultMessage:"PRODUCTION"})),s.a.createElement(f.a,{value:"SANDBOX"},s.a.createElement(i.a,{id:"Apis.Details.ApiConsole.SelectAppPanel.sandbox",defaultMessage:"SANDBOX"})))))))};function M(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function U(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}class B extends s.a.Component{constructor(e){super(e),this.state={showToken:!1},this.handleChanges=this.handleChanges.bind(this),this.accessTokenProvider=this.accessTokenProvider.bind(this),this.handleClickShowToken=this.handleClickShowToken.bind(this),this.updateSwagger=this.updateSwagger.bind(this),this.updateAccessToken=this.updateAccessToken.bind(this),this.updateApplication=this.updateApplication.bind(this)}componentDidMount(){const{api:e}=this.context,t=e.id,a=g.a.getUser();let n,s,i,l,o,r,c,p,d="PRODUCTION";this.apiClient=new T.a,this.apiClient.getAPIById(t).then(e=>((n=e.obj).endpointURLs&&(s=n.endpointURLs.map(e=>e.environmentName)),n.labels&&(i=n.labels.map(e=>e.name)),s&&s.length>0?([l]=s,this.apiClient.getSwaggerByAPIIdAndEnvironment(t,l)):i&&i.length>0?([l]=i,this.apiClient.getSwaggerByAPIIdAndLabel(t,l)):this.apiClient.getSwaggerByAPIId(t))).then(e=>(o=e.obj,null!=a?this.apiClient.getSubscriptions(t):null)).then(e=>{if(null!=e)if((r=e.obj.list.filter(e=>"UNBLOCKED"===e.status))&&r.length>0){c=r[0].applicationId,j.a.get(c).then(e=>e.getKeys()).then(e=>{e.get("SANDBOX")?(d="SANDBOX",({accessToken:p}=e.get("SANDBOX").token)):e.get("PRODUCTION")&&(d="PRODUCTION",({accessToken:p}=e.get("PRODUCTION").token)),this.setState({api:n,swagger:o,subscriptions:r,environments:s,labels:i,selectedEnvironment:l,selectedApplication:c,keys:e,selectedKeyType:d,accessToken:p})})}else this.setState({api:n,swagger:o,subscriptions:r,environments:s,labels:i,selectedEnvironment:l,selectedApplication:c,keys:void 0,selectedKeyType:d,accessToken:p});else this.setState({api:n,swagger:o,subscriptions:r,environments:s,labels:i,selectedEnvironment:l,selectedApplication:c,keys:void 0,selectedKeyType:d,accessToken:p})}).catch(e=>{const{status:t}=e;404===t&&this.setState({notFound:!0})})}handleClickShowToken(){const{showToken:e}=this.state;this.setState({showToken:!e})}accessTokenProvider(){const{accessToken:e}=this.state;return e}handleChanges(e){const{target:t}=e,{name:a,value:n}=t;switch(a){case"selectedEnvironment":this.setState({[a]:n},this.updateSwagger);break;case"selectedApplication":this.setState({[a]:n},this.updateApplication);break;case"selectedKeyType":this.setState({[a]:n},this.updateAccessToken);break;default:this.setState({[a]:n})}}updateSwagger(){const{selectedEnvironment:e,api:t,environments:a}=this.state;let n;(n=e?a.includes(e)?this.apiClient.getSwaggerByAPIIdAndEnvironment(t.id,e):this.apiClient.getSwaggerByAPIIdAndLabel(t.id,e):this.apiClient.getSwaggerByAPIId(t.id)).then(e=>{this.setState({swagger:e.obj})})}updateAccessToken(){const{keys:e,selectedKeyType:t}=this.state;let a;e.get(t)&&({accessToken:a}=e.get(t).token),this.setState({accessToken:a})}updateApplication(){const{selectedApplication:e,selectedKeyType:t}=this.state;let a;j.a.get(e).then(e=>e.getKeys()).then(e=>{e.get(t)&&({accessToken:a}=e.get(t).token),this.setState({accessToken:a,keys:e})})}render(){const{classes:e}=this.props,{api:t,notFound:a,swagger:n,accessToken:r,showToken:c,subscriptions:d,selectedApplication:A,selectedKeyType:k,selectedEnvironment:T,environments:w,labels:S}=this.state,P=g.a.getUser(),I=JSON.stringify(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?M(a,!0).forEach((function(t){U(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):M(a).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}({},n)),O="data:text/json;charset=utf-8, "+encodeURIComponent(I);if(null==t||null==n)return s.a.createElement(v.a,null);if(a)return"API Not found !";const D=t.authorizationHeader?t.authorizationHeader:"Authorization",j=t.lifeCycleStatus&&"prototyped"===t.lifeCycleStatus.toLowerCase();return s.a.createElement(s.a.Fragment,null,s.a.createElement(o.a,{variant:"h4",className:e.titleSub},s.a.createElement(i.a,{id:"Apis.Details.ApiConsole.ApiConsole.title",defaultMessage:"Try Out"})),s.a.createElement(y.a,{className:e.paper},s.a.createElement(l.a,{container:!0,className:e.grid},!j&&!P&&s.a.createElement(l.a,{item:!0,md:6},s.a.createElement(y.a,{className:e.userNotificationPaper},s.a.createElement(o.a,{variant:"h5",component:"h3"},s.a.createElement(m.a,null,"warning")," ",s.a.createElement(i.a,{id:"notice",defaultMessage:"Notice"})),s.a.createElement(o.a,{component:"p"},s.a.createElement(i.a,{id:"api.console.require.access.token",defaultMessage:"You need an access token to try the API. Please log in and subscribe to the API to generate an access token. If you already have an access token, please provide it below."})))),!j&&s.a.createElement(l.a,{xs:12,md:12},s.a.createElement(C.a,{display:"block"},P&&d&&d.length>0&&s.a.createElement(N,{subscriptions:d,handleChanges:this.handleChanges,selectedApplication:A,selectedKeyType:k,selectedEnvironment:T,environments:w}),d&&0===d.length&&s.a.createElement(C.a,{display:"flex",justifyContent:"center"},s.a.createElement(o.a,{variant:"body1",gutterBottom:!0},s.a.createElement(i.a,{id:"Apis.Details.ApiConsole.ApiConsole.please.subscribe.to.application",defaultMessage:"Please subscribe to an application"}))),s.a.createElement(C.a,{display:"flex",justifyContent:"center"},s.a.createElement(l.a,{xs:12,md:6},(w&&w.length>0||S&&S.length>0)&&s.a.createElement(p.a,{fullWidth:!0,select:!0,label:s.a.createElement(i.a,{defaultMessage:"Environment",id:"Apis.Details.ApiConsole.environment"}),value:T,name:"selectedEnvironment",onChange:this.handleChanges,SelectProps:w,helperText:s.a.createElement(i.a,{defaultMessage:"Please select an environment",id:"Apis.Details.ApiConsole.SelectAppPanel.select.an.environment"}),margin:"normal",variant:"outlined"},w&&w.length>0&&s.a.createElement(f.a,{value:"",disabled:!0},s.a.createElement("em",null,s.a.createElement(i.a,{id:"api.gateways",defaultMessage:"API Gateways"}))),w&&w.map(e=>s.a.createElement(f.a,{value:e},e)),S&&S.length>0&&s.a.createElement(f.a,{value:"",disabled:!0},s.a.createElement("em",null,s.a.createElement(i.a,{id:"micro.gateways",defaultMessage:"Microgateways"}))),S&&S.map(e=>s.a.createElement(f.a,{value:e},e))))),s.a.createElement(C.a,{display:"flex",justifyContent:"center"},s.a.createElement(l.a,{x:12,md:6},s.a.createElement(p.a,{fullWidth:!0,margin:"normal",variant:"outlined",label:s.a.createElement(i.a,{id:"access.token",defaultMessage:"Access Token"}),name:"accessToken",onChange:this.handleChanges,type:c?"text":"password",value:r||"",helperText:s.a.createElement(i.a,{id:"enter.access.token",defaultMessage:"Enter access Token"}),InputProps:{endAdornment:s.a.createElement(h.a,{position:"end"},s.a.createElement(u.a,{edge:"end","aria-label":"Toggle token visibility",onClick:this.handleClickShowToken},c?s.a.createElement(m.a,null,"visibility_off"):s.a.createElement(m.a,null,"visibility"))),startAdornment:s.a.createElement(h.a,{className:e.inputAdornmentStart,position:"start"},`${D}: Bearer`)}}))))),s.a.createElement(l.a,{xs:12,container:!0},s.a.createElement(l.a,{xs:10}),s.a.createElement(l.a,{xs:2},s.a.createElement("a",{href:O,download:"swagger.json"},s.a.createElement(E.a,{size:"small"},s.a.createElement(b.a,{className:e.buttonIcon}),s.a.createElement(i.a,{id:"Apis.Details.APIConsole.APIConsole.download.swagger",defaultMessage:"Swagger ( /swagger.json )"}))))))),s.a.createElement(y.a,{className:e.paper},s.a.createElement(x,{api:this.state.api,accessTokenProvider:this.accessTokenProvider,spec:n,authorizationHeader:D})))}}U(B,"contextType",k.a),B.defaultProps={},B.propTypes={classes:c.a.shape({}).isRequired};t.default=Object(d.a)(e=>({buttonIcon:{marginRight:10},inputAdornmentStart:{minWidth:e.spacing(18)},paper:{margin:e.spacing(1),padding:e.spacing(1)},grid:{marginTop:4*e.spacing.unit,marginBottom:4*e.spacing.unit,paddingRight:2*e.spacing.unit,justifyContent:"center"},userNotificationPaper:{padding:2*e.spacing.unit},titleSub:{marginLeft:e.spacing(2),paddingTop:e.spacing(2),paddingBottom:e.spacing(2)}}))(B)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,