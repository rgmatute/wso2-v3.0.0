(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{1051:function(t,e,n){"use strict";t.exports=function(t){return i.test("number"==typeof t?r(t):t.charAt(0))};var r=String.fromCharCode,i=/\s/},1065:function(t,e){t.exports=function(){for(var t={},e=0;e<arguments.length;e++){var r=arguments[e];for(var i in r)n.call(r,i)&&(t[i]=r[i])}return t};var n=Object.prototype.hasOwnProperty},1099:function(t,e){(e=t.exports=function(t){return t.replace(/^\s*|\s*$/g,"")}).left=function(t){return t.replace(/^\s*/,"")},e.right=function(t){return t.replace(/\s*$/,"")}},1124:function(t,e,n){"use strict";
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */var r,i="";t.exports=function(t,e){if("string"!=typeof t)throw new TypeError("expected a string");if(1===e)return t;if(2===e)return t+t;var n=t.length*e;if(r!==t||void 0===r)r=t,i="";else if(i.length>=n)return i.substr(0,n);for(;n>i.length&&e>1;)1&e&&(i+=t),e>>=1,t+=t;return i=(i+=t).substr(0,n)}},1153:function(t,e,n){"use strict";t.exports=function(t){var e="string"==typeof t?t.charCodeAt(0):t;return e>=48&&e<=57}},1154:function(t,e,n){"use strict";t.exports=c;var r=n(2091),i=r.CONTINUE,o=r.SKIP,a=r.EXIT;function c(t,e,n,i){"function"==typeof e&&"function"!=typeof n&&(i=n,n=e,e=null),r(t,e,(function(t,e){var r=e[e.length-1],i=r?r.children.indexOf(t):null;return n(t,i,r)}),i)}c.CONTINUE=i,c.SKIP=o,c.EXIT=a},1213:function(t,e,n){"use strict";var r=n(2080),i=n(2081),o=n(1153),a=n(2082),c=n(2083),s=n(2084);t.exports=function(t,e){var n,o,a={};e||(e={});for(o in h)n=e[o],a[o]=null==n?h[o]:n;(a.position.indent||a.position.start)&&(a.indent=a.position.indent||[],a.position=a.position.start);return function(t,e){var n,o,a,h,U,M,q,$,D,Z,F,V,K,X,G,J,Y,Q,W,tt=e.additional,et=e.nonTerminated,nt=e.text,rt=e.reference,it=e.warning,ot=e.textContext,at=e.referenceContext,ct=e.warningContext,st=e.position,ut=e.indent||[],lt=t.length,ft=0,ht=-1,pt=st.column||1,dt=st.line||1,gt="",mt=[];"string"==typeof tt&&(tt=tt.charCodeAt(0));J=yt(),$=it?function(t,e){var n=yt();n.column+=e,n.offset+=e,it.call(ct,B[t],n,t)}:f,ft--,lt++;for(;++ft<lt;)if(U===d&&(pt=ut[ht]||1),(U=t.charCodeAt(ft))===v){if((q=t.charCodeAt(ft+1))===p||q===d||q===g||q===m||q===v||q===A||q!=q||tt&&q===tt){gt+=l(U),pt++;continue}for(V=K=ft+1,W=K,q===b?(W=++V,(q=t.charCodeAt(W))===x||q===w?(X=j,W=++V):X=E):X=C,n="",F="",h="",G=I[X],W--;++W<lt&&(q=t.charCodeAt(W),G(q));)h+=l(q),X===C&&u.call(r,h)&&(n=h,F=r[h]);(a=t.charCodeAt(W)===y)&&(W++,(o=X===C&&s(h))&&(n=h,F=o)),Q=1+W-K,(a||et)&&(h?X===C?(a&&!F?$(H,1):(n!==h&&(W=V+n.length,Q=1+W-V,a=!1),a||(D=n?P:z,e.attribute?(q=t.charCodeAt(W))===k?($(D,Q),F=null):c(q)?F=null:$(D,Q):$(D,Q))),M=F):(a||$(S,Q),M=parseInt(h,T[X]),(vt=M)>=55296&&vt<=57343||vt>1114111?($(N,Q),M=l(O)):M in i?($(_,Q),M=i[M]):(Z="",R(M)&&$(_,Q),M>65535&&(Z+=l((M-=65536)>>>10|55296),M=56320|1023&M),M=Z+l(M))):X!==C&&$(L,Q)),M?(At(),J=yt(),ft=W-1,pt+=W-K+1,mt.push(M),(Y=yt()).offset++,rt&&rt.call(at,M,{start:J,end:Y},t.slice(K-1,W)),J=Y):(h=t.slice(K-1,W),gt+=h,pt+=h.length,ft=W-1)}else 10===U&&(dt++,ht++,pt=0),U==U?(gt+=l(U),pt++):At();var vt;return mt.join("");function yt(){return{line:dt,column:pt,offset:ft+(st.offset||0)}}function At(){gt&&(mt.push(gt),nt&&nt.call(ot,gt,{start:J,end:yt()}),gt="")}}(t,a)};var u={}.hasOwnProperty,l=String.fromCharCode,f=Function.prototype,h={warning:null,reference:null,text:null,warningContext:null,referenceContext:null,textContext:null,position:{},additional:null,attribute:!1,nonTerminated:!0},p=9,d=10,g=12,m=32,v=38,y=59,A=60,k=61,b=35,x=88,w=120,O=65533,C="named",j="hexadecimal",E="decimal",T={};T[j]=16,T[E]=10;var I={};I[C]=c,I[E]=o,I[j]=a;var P=1,S=2,z=3,L=4,H=5,_=6,N=7,B={};function R(t){return t>=1&&t<=8||11===t||t>=13&&t<=31||t>=127&&t<=159||t>=64976&&t<=65007||65535==(65535&t)||65534==(65535&t)}B[P]="Named character references must be terminated by a semicolon",B[S]="Numeric character references must be terminated by a semicolon",B[z]="Named character references cannot be empty",B[L]="Numeric character references cannot be empty",B[H]="Named character references must be known",B[_]="Numeric character references cannot be disallowed",B[N]="Numeric character references cannot be outside the permissible Unicode range"},1214:function(t,e,n){"use strict";t.exports=function(t){var e=String(t),n=e.length;for(;e.charAt(--n)===r;);return e.slice(0,n+1)};var r="\n"},1215:function(t,e,n){"use strict";t.exports=function(t,e,n,r){var i,o,a,c,s,u,l=["pedantic","commonmark"],f=l.length,h=t.length,p=-1;for(;++p<h;){for(i=t[p],o=i[1]||{},a=i[0],c=-1,u=!1;++c<f;)if(void 0!==o[s=l[c]]&&o[s]!==n.options[s]){u=!0;break}if(!u&&e[a].apply(n,r))return!0}return!1}},1216:function(t,e,n){"use strict";var r=n(2104);t.exports=function(t){return r(t).toLowerCase()}},1610:function(t,e,n){"use strict";function r(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i=n(1065),o=n(2061),a=n(2073),c=n(3),s=n(2128),u=n(2130),l=n(2131),f=n(2132),h=n(2133),p=n(2134),d=n(2135),g=n(2136),m=n(2137),v=Object.keys(g),y=function(t){var e=t.source||t.children||"",n=t.parserOptions;if(t.allowedTypes&&t.disallowedTypes)throw new Error("Only one of `allowedTypes` and `disallowedTypes` should be defined");var r=i(g,t.renderers),c=[[a,n]].concat(t.plugins||[]).reduce(A,o()),d=c.parse(e),y=i(t,{renderers:r,definitions:p(d)}),k=function(t){var e=[h,s()],n=t.disallowedTypes;t.allowedTypes&&(n=v.filter((function(e){return"root"!==e&&-1===t.allowedTypes.indexOf(e)})));var r=t.unwrapDisallowed?"unwrap":"remove";n&&n.length>0&&e.push(l.ofType(n,r));t.allowNode&&e.push(l.ifNotMatch(t.allowNode,r));var i=!t.escapeHtml&&!t.skipHtml,o=(t.astPlugins||[]).some((function(t){return(Array.isArray(t)?t[0]:t).identity===m.HtmlParser}));i&&!o&&e.push(u);return t.astPlugins?e.concat(t.astPlugins):e}(t),b=c.runSync(d),x=k.reduce((function(t,e){return e(t,y)}),b);return f(x,y)};function A(t,e){return Array.isArray(e)?t.use.apply(t,r(e)):t.use(e)}y.defaultProps={renderers:{},escapeHtml:!0,skipHtml:!1,sourcePos:!1,rawSourcePos:!1,transformLinkUri:d,astPlugins:[],plugins:[],parserOptions:{}},y.propTypes={className:c.string,source:c.string,children:c.string,sourcePos:c.bool,rawSourcePos:c.bool,escapeHtml:c.bool,skipHtml:c.bool,allowNode:c.func,allowedTypes:c.arrayOf(c.oneOf(v)),disallowedTypes:c.arrayOf(c.oneOf(v)),transformLinkUri:c.oneOfType([c.func,c.bool]),linkTarget:c.oneOfType([c.func,c.string]),transformImageUri:c.func,astPlugins:c.arrayOf(c.func),unwrapDisallowed:c.bool,renderers:c.object,plugins:c.array,parserOptions:c.object},y.types=v,y.renderers=g,y.uriTransformer=d,t.exports=y},1611:function(t,e,n){(function(t){function n(t,e){for(var n=0,r=t.length-1;r>=0;r--){var i=t[r];"."===i?t.splice(r,1):".."===i?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n--;n)t.unshift("..");return t}function r(t,e){if(t.filter)return t.filter(e);for(var n=[],r=0;r<t.length;r++)e(t[r],r,t)&&n.push(t[r]);return n}e.resolve=function(){for(var e="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var a=o>=0?arguments[o]:t.cwd();if("string"!=typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(e=a+"/"+e,i="/"===a.charAt(0))}return(i?"/":"")+(e=n(r(e.split("/"),(function(t){return!!t})),!i).join("/"))||"."},e.normalize=function(t){var o=e.isAbsolute(t),a="/"===i(t,-1);return(t=n(r(t.split("/"),(function(t){return!!t})),!o).join("/"))||o||(t="."),t&&a&&(t+="/"),(o?"/":"")+t},e.isAbsolute=function(t){return"/"===t.charAt(0)},e.join=function(){var t=Array.prototype.slice.call(arguments,0);return e.normalize(r(t,(function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t})).join("/"))},e.relative=function(t,n){function r(t){for(var e=0;e<t.length&&""===t[e];e++);for(var n=t.length-1;n>=0&&""===t[n];n--);return e>n?[]:t.slice(e,n-e+1)}t=e.resolve(t).substr(1),n=e.resolve(n).substr(1);for(var i=r(t.split("/")),o=r(n.split("/")),a=Math.min(i.length,o.length),c=a,s=0;s<a;s++)if(i[s]!==o[s]){c=s;break}var u=[];for(s=c;s<i.length;s++)u.push("..");return(u=u.concat(o.slice(c))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(t){if("string"!=typeof t&&(t+=""),0===t.length)return".";for(var e=t.charCodeAt(0),n=47===e,r=-1,i=!0,o=t.length-1;o>=1;--o)if(47===(e=t.charCodeAt(o))){if(!i){r=o;break}}else i=!1;return-1===r?n?"/":".":n&&1===r?"/":t.slice(0,r)},e.basename=function(t,e){var n=function(t){"string"!=typeof t&&(t+="");var e,n=0,r=-1,i=!0;for(e=t.length-1;e>=0;--e)if(47===t.charCodeAt(e)){if(!i){n=e+1;break}}else-1===r&&(i=!1,r=e+1);return-1===r?"":t.slice(n,r)}(t);return e&&n.substr(-1*e.length)===e&&(n=n.substr(0,n.length-e.length)),n},e.extname=function(t){"string"!=typeof t&&(t+="");for(var e=-1,n=0,r=-1,i=!0,o=0,a=t.length-1;a>=0;--a){var c=t.charCodeAt(a);if(47!==c)-1===r&&(i=!1,r=a+1),46===c?-1===e?e=a:1!==o&&(o=1):-1!==e&&(o=-1);else if(!i){n=a+1;break}}return-1===e||-1===r||0===o||1===o&&e===r-1&&e===n+1?"":t.slice(e,r)};var i="b"==="ab".substr(-1)?function(t,e,n){return t.substr(e,n)}:function(t,e,n){return e<0&&(e=t.length+e),t.substr(e,n)}}).call(this,n(476))},1612:function(t,e,n){"use strict";t.exports=function(t){var e="string"==typeof t?t.charCodeAt(0):t;return e>=97&&e<=122||e>=65&&e<=90}},1613:function(t,e,n){"use strict";t.exports={position:!0,gfm:!0,commonmark:!1,footnotes:!1,pedantic:!1,blocks:n(2088)}},1614:function(t,e,n){"use strict";t.exports=function(t){var e,n=0,i=0,o=t.charAt(n),a={};for(;o in r;)e=r[o],i+=e,e>1&&(i=Math.floor(i/e)*e),a[i]=n,o=t.charAt(++n);return{indent:i,stops:a}};var r={" ":1,"\t":4}},1615:function(t,e,n){"use strict";var r="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\u0000-\\u0020]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",i="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";e.openCloseTag=new RegExp("^(?:"+r+"|"+i+")"),e.tag=new RegExp("^(?:"+r+"|"+i+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Za-z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)")},1616:function(t,e,n){"use strict";t.exports=function(t,e){return t.indexOf("<",e)}},1617:function(t,e,n){"use strict";t.exports=function(t,e){var n=t.indexOf("[",e),r=t.indexOf("![",e);if(-1===r)return n;return n<r?n:r}},2061:function(t,e,n){"use strict";var r=n(2062),i=n(2063),o=n(2064),a=n(2069),c=n(2071),s=n(2072);t.exports=function t(){var e=[];var n=a();var y={};var A=!1;var k=-1;b.data=function(t,e){if(c(t))return 2===arguments.length?(g("data",A),y[t]=e,b):l.call(y,t)&&y[t]||null;if(t)return g("data",A),y=t,b;return y};b.freeze=x;b.attachers=e;b.use=function(t){var n;if(g("use",A),null==t);else if("function"==typeof t)c.apply(null,arguments);else{if("object"!=typeof t)throw new Error("Expected usable value, not `"+t+"`");"length"in t?a(t):i(t)}n&&(y.settings=r(y.settings||{},n));return b;function i(t){a(t.plugins),t.settings&&(n=r(n||{},t.settings))}function o(t){if("function"==typeof t)c(t);else{if("object"!=typeof t)throw new Error("Expected usable value, not `"+t+"`");"length"in t?c.apply(null,t):i(t)}}function a(t){var e,n;if(null==t);else{if(!("object"==typeof t&&"length"in t))throw new Error("Expected a list of plugins, not `"+t+"`");for(e=t.length,n=-1;++n<e;)o(t[n])}}function c(t,n){var i=function(t){var n,r=e.length,i=-1;for(;++i<r;)if((n=e[i])[0]===t)return n}(t);i?(s(i[1])&&s(n)&&(n=r(i[1],n)),i[1]=n):e.push(u.call(arguments))}};b.parse=function(t){var e,n=o(t);if(x(),p("parse",e=b.Parser),h(e))return new e(String(n),n).parse();return e(String(n),n)};b.stringify=function(t,e){var n,r=o(e);if(x(),d("stringify",n=b.Compiler),m(t),h(n))return new n(t,r).compile();return n(t,r)};b.run=w;b.runSync=function(t,e){var n,r=!1;return w(t,e,(function(t,e){r=!0,i(t),n=e})),v("runSync","run",r),n};b.process=O;b.processSync=function(t){var e,n=!1;return x(),p("processSync",b.Parser),d("processSync",b.Compiler),O(e=o(t),(function(t){n=!0,i(t)})),v("processSync","process",n),e};return b;function b(){for(var n=t(),i=e.length,o=-1;++o<i;)n.use.apply(null,e[o]);return n.data(r(!0,{},y)),n}function x(){var t,r,i,o;if(A)return b;for(;++k<e.length;)r=(t=e[k])[0],null,!1!==(i=t[1])&&(!0===i&&(t[1]=void 0),"function"==typeof(o=r.apply(b,t.slice(1)))&&n.use(o));return A=!0,k=1/0,b}function w(t,e,r){if(m(t),x(),r||"function"!=typeof e||(r=e,e=null),!r)return new Promise(i);function i(i,a){n.run(t,o(e),(function(e,n,o){n=n||t,e?a(e):i?i(n):r(null,n,o)}))}i(null,r)}function O(t,e){if(x(),p("process",b.Parser),d("process",b.Compiler),!e)return new Promise(n);function n(n,r){var i=o(t);f.run(b,{file:i},(function(t){t?r(t):n?n(i):e(null,i)}))}n(null,e)}}().freeze();var u=[].slice,l={}.hasOwnProperty,f=a().use((function(t,e){e.tree=t.parse(e.file)})).use((function(t,e,n){t.run(e.tree,e.file,(function(t,r,i){t?n(t):(e.tree=r,e.file=i,n())}))})).use((function(t,e){e.file.contents=t.stringify(e.tree,e.file)}));function h(t){return"function"==typeof t&&function(t){var e;for(e in t)return!0;return!1}(t.prototype)}function p(t,e){if("function"!=typeof e)throw new Error("Cannot `"+t+"` without `Parser`")}function d(t,e){if("function"!=typeof e)throw new Error("Cannot `"+t+"` without `Compiler`")}function g(t,e){if(e)throw new Error(["Cannot invoke `"+t+"` on a frozen processor.\nCreate a new ","processor first, by invoking it: use `processor()` instead of ","`processor`."].join(""))}function m(t){if(!t||!c(t.type))throw new Error("Expected node, got `"+t+"`")}function v(t,e,n){if(!n)throw new Error("`"+t+"` finished async. Use `"+e+"` instead")}},2062:function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty,i=Object.prototype.toString,o=Object.defineProperty,a=Object.getOwnPropertyDescriptor,c=function(t){return"function"==typeof Array.isArray?Array.isArray(t):"[object Array]"===i.call(t)},s=function(t){if(!t||"[object Object]"!==i.call(t))return!1;var e,n=r.call(t,"constructor"),o=t.constructor&&t.constructor.prototype&&r.call(t.constructor.prototype,"isPrototypeOf");if(t.constructor&&!n&&!o)return!1;for(e in t);return void 0===e||r.call(t,e)},u=function(t,e){o&&"__proto__"===e.name?o(t,e.name,{enumerable:!0,configurable:!0,value:e.newValue,writable:!0}):t[e.name]=e.newValue},l=function(t,e){if("__proto__"===e){if(!r.call(t,e))return;if(a)return a(t,e).value}return t[e]};t.exports=function t(){var e,n,r,i,o,a,f=arguments[0],h=1,p=arguments.length,d=!1;for("boolean"==typeof f&&(d=f,f=arguments[1]||{},h=2),(null==f||"object"!=typeof f&&"function"!=typeof f)&&(f={});h<p;++h)if(null!=(e=arguments[h]))for(n in e)r=l(f,n),f!==(i=l(e,n))&&(d&&i&&(s(i)||(o=c(i)))?(o?(o=!1,a=r&&c(r)?r:[]):a=r&&s(r)?r:{},u(f,{name:n,newValue:t(d,a,i)})):void 0!==i&&u(f,{name:n,newValue:i}));return f}},2063:function(t,e,n){"use strict";t.exports=function(t){if(t)throw t}},2064:function(t,e,n){"use strict";var r=n(2065),i=n(2067);t.exports=i;var o=i.prototype;function a(t,e,n){var i=this.path,o=new r(t,e,n);return i&&(o.name=i+":"+o.name,o.file=i),o.fatal=!1,this.messages.push(o),o}o.message=a,o.info=function(){var t=this.message.apply(this,arguments);return t.fatal=null,t},o.fail=function(){var t=this.message.apply(this,arguments);throw t.fatal=!0,t},o.warn=a},2065:function(t,e,n){"use strict";var r=n(2066);function i(){}t.exports=a,i.prototype=Error.prototype,a.prototype=new i;var o=a.prototype;function a(t,e,n){var i,o,a;"string"==typeof e&&(n=e,e=null),i=function(t){var e,n=[null,null];"string"==typeof t&&(-1===(e=t.indexOf(":"))?n[1]=t:(n[0]=t.slice(0,e),n[1]=t.slice(e+1)));return n}(n),o=r(e)||"1:1",a={start:{line:null,column:null},end:{line:null,column:null}},e&&e.position&&(e=e.position),e&&(e.start?(a=e,e=e.start):a.start=e),t.stack&&(this.stack=t.stack,t=t.message),this.message=t,this.name=o,this.reason=t,this.line=e?e.line:null,this.column=e?e.column:null,this.location=a,this.source=i[0],this.ruleId=i[1]}o.file="",o.name="",o.reason="",o.message="",o.stack="",o.fatal=null,o.column=null,o.line=null},2066:function(t,e,n){"use strict";var r={}.hasOwnProperty;function i(t){return t&&"object"==typeof t||(t={}),a(t.line)+":"+a(t.column)}function o(t){return t&&"object"==typeof t||(t={}),i(t.start)+"-"+i(t.end)}function a(t){return t&&"number"==typeof t?t:1}t.exports=function(t){if(!t||"object"!=typeof t)return null;if(r.call(t,"position")||r.call(t,"type"))return o(t.position);if(r.call(t,"start")||r.call(t,"end"))return o(t);if(r.call(t,"line")||r.call(t,"column"))return i(t);return null}},2067:function(t,e,n){"use strict";(function(e){var r=n(1611),i=n(2068),o=n(488);t.exports=u;var a={}.hasOwnProperty,c=u.prototype;c.toString=function(t){var e=this.contents||"";return o(e)?e.toString(t):String(e)};var s=["history","path","basename","stem","extname","dirname"];function u(t){var n,r,i;if(t){if("string"==typeof t||o(t))t={contents:t};else if("message"in t&&"messages"in t)return t}else t={};if(!(this instanceof u))return new u(t);for(this.data={},this.messages=[],this.history=[],this.cwd=e.cwd(),r=-1,i=s.length;++r<i;)n=s[r],a.call(t,n)&&(this[n]=t[n]);for(n in t)-1===s.indexOf(n)&&(this[n]=t[n])}function l(t,e){if(-1!==t.indexOf(r.sep))throw new Error("`"+e+"` cannot be a path: did not expect `"+r.sep+"`")}function f(t,e){if(!t)throw new Error("`"+e+"` cannot be empty")}function h(t,e){if(!t)throw new Error("Setting `"+e+"` requires `path` to be set too")}Object.defineProperty(c,"path",{get:function(){return this.history[this.history.length-1]},set:function(t){f(t,"path"),t!==this.path&&this.history.push(t)}}),Object.defineProperty(c,"dirname",{get:function(){return"string"==typeof this.path?r.dirname(this.path):void 0},set:function(t){h(this.path,"dirname"),this.path=r.join(t||"",this.basename)}}),Object.defineProperty(c,"basename",{get:function(){return"string"==typeof this.path?r.basename(this.path):void 0},set:function(t){f(t,"basename"),l(t,"basename"),this.path=r.join(this.dirname||"",t)}}),Object.defineProperty(c,"extname",{get:function(){return"string"==typeof this.path?r.extname(this.path):void 0},set:function(t){var e=t||"";if(l(e,"extname"),h(this.path,"extname"),e){if("."!==e.charAt(0))throw new Error("`extname` must start with `.`");if(-1!==e.indexOf(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=i(this.path,e)}}),Object.defineProperty(c,"stem",{get:function(){return"string"==typeof this.path?r.basename(this.path,this.extname):void 0},set:function(t){f(t,"stem"),l(t,"stem"),this.path=r.join(this.dirname||"",t+(this.extname||""))}})}).call(this,n(476))},2068:function(t,e,n){"use strict";var r=n(1611);t.exports=function(t,e){if("string"!=typeof t)return t;if(0===t.length)return t;var n=r.basename(t,r.extname(t))+e;return r.join(r.dirname(t),n)}},2069:function(t,e,n){"use strict";var r=n(2070);t.exports=o,o.wrap=r;var i=[].slice;function o(){var t=[],e={run:function(){var e=-1,n=i.call(arguments,0,-1),o=arguments[arguments.length-1];if("function"!=typeof o)throw new Error("Expected function as last argument, not "+o);(function a(c){var s=t[++e],u=i.call(arguments,0).slice(1),l=n.length,f=-1;if(c)o(c);else{for(;++f<l;)null!==u[f]&&void 0!==u[f]||(u[f]=n[f]);n=u,s?r(s,a).apply(null,n):o.apply(null,[null].concat(n))}}).apply(null,[null].concat(n))},use:function(n){if("function"!=typeof n)throw new Error("Expected `fn` to be a function, not "+n);return t.push(n),e}};return e}},2070:function(t,e,n){"use strict";var r=[].slice;t.exports=function(t,e){var n;return function(){var e,a=r.call(arguments,0),c=t.length>a.length;c&&a.push(i);try{e=t.apply(null,a)}catch(t){if(c&&n)throw t;return i(t)}c||(e&&"function"==typeof e.then?e.then(o,i):e instanceof Error?i(e):o(e))};function i(){n||(n=!0,e.apply(null,arguments))}function o(t){i(null,t)}}},2071:function(t,e){var n=Object.prototype.toString;t.exports=function(t){return"[object String]"===n.call(t)}},2072:function(t,e,n){"use strict";var r=Object.prototype.toString;t.exports=function(t){var e;return"[object Object]"===r.call(t)&&(null===(e=Object.getPrototypeOf(t))||e===Object.getPrototypeOf({}))}},2073:function(t,e,n){"use strict";var r=n(2074),i=n(1065),o=n(2075);function a(t){var e=r(o);e.prototype.options=i(e.prototype.options,this.data("settings"),t),this.Parser=e}t.exports=a,a.Parser=o},2074:function(t,e,n){"use strict";var r=n(1065),i=n(1046);t.exports=function(t){var e,n,o;for(n in i(c,t),i(a,c),e=c.prototype)(o=e[n])&&"object"==typeof o&&(e[n]="concat"in o?o.concat():r(o));return c;function a(e){return t.apply(this,e)}function c(){return this instanceof c?t.apply(this,arguments):new a(arguments)}}},2075:function(t,e,n){"use strict";var r=n(1065),i=n(2076),o=n(2077),a=n(2078),c=n(2079),s=n(2085);function u(t,e){this.file=e,this.offset={},this.options=r(this.options),this.setOptions({}),this.inList=!1,this.inBlock=!1,this.inLink=!1,this.atStart=!0,this.toOffset=o(e).toOffset,this.unescape=a(this,"escape"),this.decode=c(this)}t.exports=u;var l=u.prototype;function f(t){var e,n=[];for(e in t)n.push(e);return n}l.setOptions=n(2086),l.parse=n(2089),l.options=n(1613),l.exitStart=i("atStart",!0),l.enterList=i("inList",!1),l.enterLink=i("inLink",!1),l.enterBlock=i("inBlock",!1),l.interruptParagraph=[["thematicBreak"],["atxHeading"],["fencedCode"],["blockquote"],["html"],["setextHeading",{commonmark:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],l.interruptList=[["atxHeading",{pedantic:!1}],["fencedCode",{pedantic:!1}],["thematicBreak",{pedantic:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],l.interruptBlockquote=[["indentedCode",{commonmark:!0}],["fencedCode",{commonmark:!0}],["atxHeading",{commonmark:!0}],["setextHeading",{commonmark:!0}],["thematicBreak",{commonmark:!0}],["html",{commonmark:!0}],["list",{commonmark:!0}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],l.blockTokenizers={newline:n(2093),indentedCode:n(2094),fencedCode:n(2095),blockquote:n(2096),atxHeading:n(2097),thematicBreak:n(2098),list:n(2099),setextHeading:n(2101),html:n(2102),footnote:n(2103),definition:n(2105),table:n(2106),paragraph:n(2107)},l.inlineTokenizers={escape:n(2108),autoLink:n(2110),url:n(2111),html:n(2113),link:n(2114),reference:n(2115),strong:n(2116),emphasis:n(2118),deletion:n(2121),code:n(2123),break:n(2125),text:n(2127)},l.blockMethods=f(l.blockTokenizers),l.inlineMethods=f(l.inlineTokenizers),l.tokenizeBlock=s("block"),l.tokenizeInline=s("inline"),l.tokenizeFactory=s},2076:function(t,e,n){"use strict";t.exports=function(t,e,n){return function(){var r=n||this,i=r[t];return r[t]=!e,function(){r[t]=i}}}},2077:function(t,e,n){"use strict";function r(t){return function(e){var n=-1,r=t.length;if(e<0)return{};for(;++n<r;)if(t[n]>e)return{line:n+1,column:e-(t[n-1]||0)+1,offset:e};return{}}}function i(t){return function(e){var n=e&&e.line,r=e&&e.column;if(!isNaN(n)&&!isNaN(r)&&n-1 in t)return(t[n-2]||0)+r-1||0;return-1}}t.exports=function(t){var e=function(t){var e=[],n=t.indexOf("\n");for(;-1!==n;)e.push(n+1),n=t.indexOf("\n",n+1);return e.push(t.length+1),e}(String(t));return{toPosition:r(e),toOffset:i(e)}}},2078:function(t,e,n){"use strict";t.exports=function(t,e){return function(n){var r,i=0,o=n.indexOf("\\"),a=t[e],c=[];for(;-1!==o;)c.push(n.slice(i,o)),i=o+1,(r=n.charAt(i))&&-1!==a.indexOf(r)||c.push("\\"),o=n.indexOf("\\",i);return c.push(n.slice(i)),c.join("")}}},2079:function(t,e,n){"use strict";var r=n(1065),i=n(1213);t.exports=function(t){return o.raw=function(t,o,a){return i(t,r(a,{position:e(o),warning:n}))},o;function e(e){for(var n=t.offset,r=e.line,i=[];++r&&r in n;)i.push((n[r]||0)+1);return{start:e,indent:i}}function n(e,n,r){3!==r&&t.file.message(e,n)}function o(r,o,a){i(r,{position:e(o),warning:n,text:a,reference:a,textContext:t,referenceContext:t})}}},2080:function(t){t.exports={AElig:"Æ",AMP:"&",Aacute:"Á",Acirc:"Â",Agrave:"À",Aring:"Å",Atilde:"Ã",Auml:"Ä",COPY:"©",Ccedil:"Ç",ETH:"Ð",Eacute:"É",Ecirc:"Ê",Egrave:"È",Euml:"Ë",GT:">",Iacute:"Í",Icirc:"Î",Igrave:"Ì",Iuml:"Ï",LT:"<",Ntilde:"Ñ",Oacute:"Ó",Ocirc:"Ô",Ograve:"Ò",Oslash:"Ø",Otilde:"Õ",Ouml:"Ö",QUOT:'"',REG:"®",THORN:"Þ",Uacute:"Ú",Ucirc:"Û",Ugrave:"Ù",Uuml:"Ü",Yacute:"Ý",aacute:"á",acirc:"â",acute:"´",aelig:"æ",agrave:"à",amp:"&",aring:"å",atilde:"ã",auml:"ä",brvbar:"¦",ccedil:"ç",cedil:"¸",cent:"¢",copy:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",ecirc:"ê",egrave:"è",eth:"ð",euml:"ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",iacute:"í",icirc:"î",iexcl:"¡",igrave:"ì",iquest:"¿",iuml:"ï",laquo:"«",lt:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",oacute:"ó",ocirc:"ô",ograve:"ò",ordf:"ª",ordm:"º",oslash:"ø",otilde:"õ",ouml:"ö",para:"¶",plusmn:"±",pound:"£",quot:'"',raquo:"»",reg:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",times:"×",uacute:"ú",ucirc:"û",ugrave:"ù",uml:"¨",uuml:"ü",yacute:"ý",yen:"¥",yuml:"ÿ"}},2081:function(t){t.exports={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"}},2082:function(t,e,n){"use strict";t.exports=function(t){var e="string"==typeof t?t.charCodeAt(0):t;return e>=97&&e<=102||e>=65&&e<=70||e>=48&&e<=57}},2083:function(t,e,n){"use strict";var r=n(1612),i=n(1153);t.exports=function(t){return r(t)||i(t)}},2084:function(t,e,n){"use strict";var r,i=59;t.exports=function(t){var e,n="&"+t+";";if((r=r||document.createElement("i")).innerHTML=n,(e=r.textContent).charCodeAt(e.length-1)===i&&"semi"!==t)return!1;return e!==n&&e}},2085:function(t,e,n){"use strict";t.exports=function(t){return function(e,n){var o,a,c,s,u,l,f=this,h=f.offset,p=[],d=f[t+"Methods"],g=f[t+"Tokenizers"],m=n.line,v=n.column;if(!e)return p;b.now=A,b.file=f.file,y("");for(;e;){for(o=-1,a=d.length,u=!1;++o<a&&(s=d[o],!(c=g[s])||c.onlyAtStart&&!f.atStart||c.notInList&&f.inList||c.notInBlock&&f.inBlock||c.notInLink&&f.inLink||(l=e.length,c.apply(f,[b,e]),!(u=l!==e.length))););u||f.file.fail(new Error("Infinite loop"),b.now())}return f.eof=A(),p;function y(t){for(var e=-1,n=t.indexOf("\n");-1!==n;)m++,e=n,n=t.indexOf("\n",n+1);-1===e?v+=t.length:v=t.length-e,m in h&&(-1!==e?v+=h[m]:v<=h[m]&&(v=h[m]+1))}function A(){var t={line:m,column:v};return t.offset=f.toOffset(t),t}function k(t){this.start=t,this.end=A()}function b(t){var n,o=function(){var t=[],e=m+1;return function(){for(var n=m+1;e<n;)t.push((h[e]||0)+1),e++;return t}}(),a=(n=A(),function(t,e){var r=t.position,i=r?r.start:n,o=[],a=r&&r.end.line,c=n.line;if(t.position=new k(i),r&&e&&r.indent){if(o=r.indent,a<c){for(;++a<c;)o.push((h[a]||0)+1);o.push(n.column)}e=o.concat(e)}return t.position.indent=e||[],t}),c=A();return function(t){e.substring(0,t.length)!==t&&f.file.fail(new Error("Incorrectly eaten value: please report this warning on http://git.io/vg5Ft"),A())}(t),s.reset=u,u.test=l,s.test=l,e=e.substring(t.length),y(t),o=o(),s;function s(t,e){return a(function(t,e){var n=e?e.children:p,o=n[n.length-1];return o&&t.type===o.type&&t.type in r&&i(o)&&i(t)&&(t=r[t.type].call(f,o,t)),t!==o&&n.push(t),f.atStart&&0!==p.length&&f.exitStart(),t}(a(t),e),o)}function u(){var n=s.apply(null,arguments);return m=c.line,v=c.column,e=t+e,n}function l(){var n=a({});return m=c.line,v=c.column,e=t+e,n.position}}}};var r={text:function(t,e){return t.value+=e.value,t},blockquote:function(t,e){if(this.options.commonmark)return e;return t.children=t.children.concat(e.children),t}};function i(t){var e,n;return"text"!==t.type||!t.position||(e=t.position.start,n=t.position.end,e.line!==n.line||n.column-e.column===t.value.length)}},2086:function(t,e,n){"use strict";var r=n(1065),i=n(2087),o=n(1613);t.exports=function(t){var e,n,a=this.options;if(null==t)t={};else{if("object"!=typeof t)throw new Error("Invalid value `"+t+"` for setting `options`");t=r(t)}for(e in o){if(null==(n=t[e])&&(n=a[e]),"blocks"!==e&&"boolean"!=typeof n||"blocks"===e&&"object"!=typeof n)throw new Error("Invalid value `"+n+"` for setting `options."+e+"`");t[e]=n}return this.options=t,this.escape=i(t),this}},2087:function(t,e,n){"use strict";t.exports=a;var r=["\\","`","*","{","}","[","]","(",")","#","+","-",".","!","_",">"],i=r.concat(["~","|"]),o=i.concat(["\n",'"',"$","%","&","'",",","/",":",";","<","=","?","@","^"]);function a(t){var e=t||{};return e.commonmark?o:e.gfm?i:r}a.default=r,a.gfm=i,a.commonmark=o},2088:function(t){t.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","pre","section","source","title","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]},2089:function(t,e,n){"use strict";var r=n(1065),i=n(2090);t.exports=function(){var t,e=String(this.file),n={line:1,column:1,offset:0},c=r(n);65279===(e=e.replace(a,o)).charCodeAt(0)&&(e=e.slice(1),c.column++,c.offset++);t={type:"root",children:this.tokenizeBlock(e,c),position:{start:n,end:this.eof||r(n)}},this.options.position||i(t,!0);return t};var o="\n",a=/\r\n|\r/g},2090:function(t,e,n){"use strict";var r=n(1154);function i(t){delete t.position}function o(t){t.position=void 0}t.exports=function(t,e){return r(t,e?i:o),t}},2091:function(t,e,n){"use strict";t.exports=c;var r=n(2092),i=!0,o="skip",a=!1;function c(t,e,n,i){var c;function u(t,r,l){var f,h=[];return(e&&!c(t,r,l[l.length-1]||null)||(h=s(n(t,l)))[0]!==a)&&t.children&&h[0]!==o&&(f=s(function(t,e){var n,r=i?-1:1,o=(i?t.length:-1)+r;for(;o>-1&&o<t.length;){if((n=u(t[o],o,e))[0]===a)return n;o="number"==typeof n[1]?n[1]:o+r}}(t.children,l.concat(t))))[0]===a?f:h}"function"==typeof e&&"function"!=typeof n&&(i=n,n=e,e=null),c=r(e),u(t,null,[])}function s(t){return null!==t&&"object"==typeof t&&"length"in t?t:"number"==typeof t?[i,t]:[t]}c.CONTINUE=i,c.SKIP=o,c.EXIT=a},2092:function(t,e,n){"use strict";function r(t){if("string"==typeof t)return function(t){return function(e){return Boolean(e&&e.type===t)}}(t);if(null==t)return a;if("object"==typeof t)return("length"in t?o:i)(t);if("function"==typeof t)return t;throw new Error("Expected function, string, or object as test")}function i(t){return function(e){var n;for(n in t)if(e[n]!==t[n])return!1;return!0}}function o(t){var e=function(t){for(var e=[],n=t.length,i=-1;++i<n;)e[i]=r(t[i]);return e}(t),n=e.length;return function(){var t=-1;for(;++t<n;)if(e[t].apply(this,arguments))return!0;return!1}}function a(){return!0}t.exports=r},2093:function(t,e,n){"use strict";var r=n(1051);t.exports=function(t,e,n){var i,o,a,c,s=e.charAt(0);if("\n"!==s)return;if(n)return!0;c=1,i=e.length,o=s,a="";for(;c<i&&(s=e.charAt(c),r(s));)a+=s,"\n"===s&&(o+=a,a=""),c++;t(o)}},2094:function(t,e,n){"use strict";var r=n(1124),i=n(1214);t.exports=function(t,e,n){var r,u,l,f=-1,h=e.length,p="",d="",g="",m="";for(;++f<h;)if(r=e.charAt(f),l)if(l=!1,p+=g,d+=m,g="",m="",r===o)g=r,m=r;else for(p+=r,d+=r;++f<h;){if(!(r=e.charAt(f))||r===o){m=r,g=r;break}p+=r,d+=r}else if(r===c&&e.charAt(f+1)===r&&e.charAt(f+2)===r&&e.charAt(f+3)===r)g+=s,f+=3,l=!0;else if(r===a)g+=r,l=!0;else{for(u="";r===a||r===c;)u+=r,r=e.charAt(++f);if(r!==o)break;g+=u+r,m+=r}if(d)return!!n||t(p)({type:"code",lang:null,value:i(d)})};var o="\n",a="\t",c=" ",s=r(c,4)},2095:function(t,e,n){"use strict";var r=n(1214);t.exports=function(t,e,n){var f,h,p,d,g,m,v,y,A,k,b,x=this.options,w=e.length+1,O=0,C="";if(!x.gfm)return;for(;O<w&&((p=e.charAt(O))===a||p===o);)C+=p,O++;if(k=O,(p=e.charAt(O))!==c&&p!==s)return;O++,h=p,f=1,C+=p;for(;O<w&&(p=e.charAt(O))===h;)C+=p,f++,O++;if(f<u)return;for(;O<w&&((p=e.charAt(O))===a||p===o);)C+=p,O++;d="",g="";for(;O<w&&(p=e.charAt(O))!==i&&p!==c&&p!==s;)p===a||p===o?g+=p:(d+=g+p,g=""),O++;if((p=e.charAt(O))&&p!==i)return;if(n)return!0;(b=t.now()).column+=C.length,b.offset+=C.length,C+=d,d=this.decode.raw(this.unescape(d),b),g&&(C+=g);g="",y="",A="",m="",v="";for(;O<w;)if(p=e.charAt(O),m+=y,v+=A,y="",A="",p===i){for(m?(y+=p,A+=p):C+=p,g="",O++;O<w&&(p=e.charAt(O))===a;)g+=p,O++;if(y+=g,A+=g.slice(k),!(g.length>=l)){for(g="";O<w&&(p=e.charAt(O))===h;)g+=p,O++;if(y+=g,A+=g,!(g.length<f)){for(g="";O<w&&((p=e.charAt(O))===a||p===o);)y+=p,A+=p,O++;if(!p||p===i)break}}}else m+=p,A+=p,O++;return t(C+=m+y)({type:"code",lang:d||null,value:r(v)})};var i="\n",o="\t",a=" ",c="~",s="`",u=3,l=4},2096:function(t,e,n){"use strict";var r=n(1099),i=n(1215);t.exports=function(t,e,n){var u,l,f,h,p,d,g,m,v,y=this.offset,A=this.blockTokenizers,k=this.interruptBlockquote,b=t.now(),x=b.line,w=e.length,O=[],C=[],j=[],E=0;for(;E<w&&((l=e.charAt(E))===c||l===a);)E++;if(e.charAt(E)!==s)return;if(n)return!0;E=0;for(;E<w;){for(h=e.indexOf(o,E),g=E,m=!1,-1===h&&(h=w);E<w&&((l=e.charAt(E))===c||l===a);)E++;if(e.charAt(E)===s?(E++,m=!0,e.charAt(E)===c&&E++):E=g,p=e.slice(E,h),!m&&!r(p)){E=g;break}if(!m&&(f=e.slice(E),i(k,A,this,[t,f,!0])))break;d=g===E?p:e.slice(g,h),j.push(E-g),O.push(d),C.push(p),E=h+1}E=-1,w=j.length,u=t(O.join(o));for(;++E<w;)y[x]=(y[x]||0)+j[E],x++;return v=this.enterBlock(),C=this.tokenizeBlock(C.join(o),b),v(),u({type:"blockquote",children:C})};var o="\n",a="\t",c=" ",s=">"},2097:function(t,e,n){"use strict";t.exports=function(t,e,n){var s,u,l,f=this.options,h=e.length+1,p=-1,d=t.now(),g="",m="";for(;++p<h;){if((s=e.charAt(p))!==o&&s!==i){p--;break}g+=s}l=0;for(;++p<=h;){if((s=e.charAt(p))!==a){p--;break}g+=s,l++}if(l>c)return;if(!l||!f.pedantic&&e.charAt(p+1)===a)return;h=e.length+1,u="";for(;++p<h;){if((s=e.charAt(p))!==o&&s!==i){p--;break}u+=s}if(!f.pedantic&&0===u.length&&s&&s!==r)return;if(n)return!0;g+=u,u="",m="";for(;++p<h&&(s=e.charAt(p))&&s!==r;)if(s===o||s===i||s===a){for(;s===o||s===i;)u+=s,s=e.charAt(++p);for(;s===a;)u+=s,s=e.charAt(++p);for(;s===o||s===i;)u+=s,s=e.charAt(++p);p--}else m+=u+s,u="";return d.column+=g.length,d.offset+=g.length,t(g+=m+u)({type:"heading",depth:l,children:this.tokenizeInline(m,d)})};var r="\n",i="\t",o=" ",a="#",c=6},2098:function(t,e,n){"use strict";t.exports=function(t,e,n){var l,f,h,p,d=-1,g=e.length+1,m="";for(;++d<g&&((l=e.charAt(d))===i||l===o);)m+=l;if(l!==a&&l!==s&&l!==c)return;f=l,m+=l,h=1,p="";for(;++d<g;)if((l=e.charAt(d))===f)h++,m+=p+f,p="";else{if(l!==o)return h>=u&&(!l||l===r)?(m+=p,!!n||t(m)({type:"thematicBreak"})):void 0;p+=l}};var r="\n",i="\t",o=" ",a="*",c="_",s="-",u=3},2099:function(t,e,n){"use strict";var r=n(1099),i=n(1124),o=n(1153),a=n(1614),c=n(2100),s=n(1215);t.exports=function(t,e,n){var i,a,c,g,v,y,A,k,b,j,E,T,I,P,S,z,L,H,_,N,B,R,U,M,q=this.options.commonmark,$=this.options.pedantic,D=this.blockTokenizers,Z=this.interruptList,F=0,V=e.length,K=null,X=0;for(;F<V;){if((g=e.charAt(F))===d)X+=m-X%m;else{if(g!==h)break;X++}F++}if(X>=m)return;if(g=e.charAt(F),i=q?O:w,!0===x[g])v=g,c=!1;else{for(c=!0,a="";F<V&&(g=e.charAt(F),o(g));)a+=g,F++;if(g=e.charAt(F),!a||!0!==i[g])return;K=parseInt(a,10),v=g}if((g=e.charAt(++F))!==h&&g!==d)return;if(n)return!0;F=0,P=[],S=[],z=[];for(;F<V;){for(y=e.indexOf(p,F),A=F,k=!1,M=!1,-1===y&&(y=V),U=F+m,X=0;F<V;){if((g=e.charAt(F))===d)X+=m-X%m;else{if(g!==h)break;X++}F++}if(X>=m&&(M=!0),L&&X>=L.indent&&(M=!0),g=e.charAt(F),b=null,!M){if(!0===x[g])b=g,F++,X++;else{for(a="";F<V&&(g=e.charAt(F),o(g));)a+=g,F++;g=e.charAt(F),F++,a&&!0===i[g]&&(b=g,X+=a.length+1)}if(b)if((g=e.charAt(F))===d)X+=m-X%m,F++;else if(g===h){for(U=F+m;F<U&&e.charAt(F)===h;)F++,X++;F===U&&e.charAt(F)===h&&(F-=m-1,X-=m-1)}else g!==p&&""!==g&&(b=null)}if(b){if(!$&&v!==b)break;k=!0}else q||M||e.charAt(A)!==h?q&&L&&(M=X>=L.indent||X>m):M=!0,k=!1,F=A;if(E=e.slice(A,y),j=A===F?E:e.slice(F,y),(b===u||b===l||b===f)&&D.thematicBreak.call(this,t,E,!0))break;if(T=I,I=!r(j).length,M&&L)L.value=L.value.concat(z,E),S=S.concat(z,E),z=[];else if(k)0!==z.length&&(L.value.push(""),L.trail=z.concat()),L={value:[E],indent:X,trail:[]},P.push(L),S=S.concat(z,E),z=[];else if(I){if(T)break;z.push(E)}else{if(T)break;if(s(Z,D,this,[t,E,!0]))break;L.value=L.value.concat(z,E),S=S.concat(z,E),z=[]}F=y+1}B=t(S.join(p)).reset({type:"list",ordered:c,start:K,loose:null,children:[]}),H=this.enterList(),_=this.enterBlock(),N=!1,F=-1,V=P.length;for(;++F<V;)L=P[F].value.join(p),R=t.now(),(L=t(L)(C(this,L,R),B)).loose&&(N=!0),L=P[F].trail.join(p),F!==V-1&&(L+=p),t(L);return H(),_(),B.loose=N,B};var u="*",l="_",f="-",h=" ",p="\n",d="\t",g="x",m=4,v=/\n\n(?!\s*$)/,y=/^\[([ \t]|x|X)][ \t]/,A=/^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/,k=/^([ \t]*)([*+-]|\d+[.)])([ \t]+)/,b=/^( {1,4}|\t)?/gm,x={};x[u]=!0,x["+"]=!0,x[f]=!0;var w={".":!0},O={};function C(t,e,n){var r,i,o=t.offset,a=null;return e=(t.options.pedantic?j:E).apply(null,arguments),t.options.gfm&&(r=e.match(y))&&(i=r[0].length,a=r[1].toLowerCase()===g,o[n.line]+=i,e=e.slice(i)),{type:"listItem",loose:v.test(e)||e.charAt(e.length-1)===p,checked:a,children:t.tokenizeBlock(e,n)}}function j(t,e,n){var r=t.offset,i=n.line;return e=e.replace(k,o),i=n.line,e.replace(b,o);function o(t){return r[i]=(r[i]||0)+t.length,i++,""}}function E(t,e,n){var r,o,s,u,l,f,d,g=t.offset,m=n.line;for(u=(e=e.replace(A,(function(t,e,n,a,c){o=e+n+a,s=c,Number(n)<10&&o.length%2==1&&(n=h+n);return(r=e+i(h,n.length)+a)+s}))).split(p),(l=c(e,a(r).indent).split(p))[0]=s,g[m]=(g[m]||0)+o.length,m++,f=0,d=u.length;++f<d;)g[m]=(g[m]||0)+u[f].length-l[f].length,m++;return l.join(p)}O["."]=!0,O[")"]=!0},2100:function(t,e,n){"use strict";var r=n(1099),i=n(1124),o=n(1614);t.exports=function(t,e){var n,u,l,f,h=t.split(c),p=h.length+1,d=1/0,g=[];h.unshift(i(a,e)+"!");for(;p--;)if(u=o(h[p]),g[p]=u.stops,0!==r(h[p]).length){if(!u.indent){d=1/0;break}u.indent>0&&u.indent<d&&(d=u.indent)}if(d!==1/0)for(p=h.length;p--;){for(l=g[p],n=d;n&&!(n in l);)n--;f=0!==r(h[p]).length&&d&&n!==d?s:"",h[p]=f+h[p].slice(n in l?l[n]+1:0)}return h.shift(),h.join(c)};var a=" ",c="\n",s="\t"},2101:function(t,e,n){"use strict";t.exports=function(t,e,n){var s,u,l,f,h,p=t.now(),d=e.length,g=-1,m="";for(;++g<d;){if((l=e.charAt(g))!==o||g>=a){g--;break}m+=l}s="",u="";for(;++g<d;){if((l=e.charAt(g))===r){g--;break}l===o||l===i?u+=l:(s+=u+l,u="")}if(p.column+=m.length,p.offset+=m.length,m+=s+u,l=e.charAt(++g),f=e.charAt(++g),l!==r||!c[f])return;m+=l,u=f,h=c[f];for(;++g<d;){if((l=e.charAt(g))!==f){if(l!==r)return;g--;break}u+=l}if(n)return!0;return t(m+u)({type:"heading",depth:h,children:this.tokenizeInline(s,p)})};var r="\n",i="\t",o=" ",a=3,c={};c["="]=1,c["-"]=2},2102:function(t,e,n){"use strict";var r=n(1615).openCloseTag;t.exports=function(t,e,n){var s,u,l,f,h,p,d,g=this.options.blocks,m=e.length,v=0,y=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Za-z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+g.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(r.source+"\\s*$"),/^$/,!1]];for(;v<m&&((f=e.charAt(v))===i||f===o);)v++;if(e.charAt(v)!==c)return;s=-1===(s=e.indexOf(a,v+1))?m:s,u=e.slice(v,s),l=-1,h=y.length;for(;++l<h;)if(y[l][0].test(u)){p=y[l];break}if(!p)return;if(n)return p[2];if(v=s,!p[1].test(u))for(;v<m;){if(s=-1===(s=e.indexOf(a,v+1))?m:s,u=e.slice(v+1,s),p[1].test(u)){u&&(v=s);break}v=s}return d=e.slice(0,v),t(d)({type:"html",value:d})};var i="\t",o=" ",a="\n",c="<"},2103:function(t,e,n){"use strict";var r=n(1051),i=n(1216);t.exports=d,d.notInList=!0,d.notInBlock=!0;var o="\\",a="\n",c="\t",s=" ",u="[",l="]",f="^",h=":",p=/^( {4}|\t)?/gm;function d(t,e,n){var d,g,m,v,y,A,k,b,x,w,O,C,j=this.offset;if(this.options.footnotes){for(d=0,g=e.length,m="",v=t.now(),y=v.line;d<g&&(x=e.charAt(d),r(x));)m+=x,d++;if(e.charAt(d)===u&&e.charAt(d+1)===f){for(d=(m+=u+f).length,k="";d<g&&(x=e.charAt(d))!==l;)x===o&&(k+=x,d++,x=e.charAt(d)),k+=x,d++;if(k&&e.charAt(d)===l&&e.charAt(d+1)===h){if(n)return!0;for(w=i(k),d=(m+=k+l+h).length;d<g&&((x=e.charAt(d))===c||x===s);)m+=x,d++;for(v.column+=m.length,v.offset+=m.length,k="",A="",b="";d<g;){if((x=e.charAt(d))===a){for(b=x,d++;d<g&&(x=e.charAt(d))===a;)b+=x,d++;for(k+=b,b="";d<g&&(x=e.charAt(d))===s;)b+=x,d++;if(0===b.length)break;k+=b}k&&(A+=k,k=""),A+=x,d++}return m+=A,A=A.replace(p,(function(t){return j[y]=(j[y]||0)+t.length,y++,""})),O=t(m),C=this.enterBlock(),A=this.tokenizeBlock(A,v),C(),O({type:"footnoteDefinition",identifier:w,children:A})}}}}},2104:function(t,e,n){"use strict";t.exports=function(t){return String(t).replace(/\s+/g," ")}},2105:function(t,e,n){"use strict";var r=n(1051),i=n(1216);t.exports=y,y.notInList=!0,y.notInBlock=!0;var o='"',a="'",c="\\",s="\n",u="\t",l=" ",f="[",h="]",p="(",d=")",g=":",m="<",v=">";function y(t,e,n){for(var r,v,y,b,x,w,O,C,j=this.options.commonmark,E=0,T=e.length,I="";E<T&&((b=e.charAt(E))===l||b===u);)I+=b,E++;if((b=e.charAt(E))===f){for(E++,I+=b,y="";E<T&&(b=e.charAt(E))!==h;)b===c&&(y+=b,E++,b=e.charAt(E)),y+=b,E++;if(y&&e.charAt(E)===h&&e.charAt(E+1)===g){for(w=y,E=(I+=y+h+g).length,y="";E<T&&((b=e.charAt(E))===u||b===l||b===s);)I+=b,E++;if(y="",r=I,(b=e.charAt(E))===m){for(E++;E<T&&A(b=e.charAt(E));)y+=b,E++;if((b=e.charAt(E))===A.delimiter)I+=m+y+b,E++;else{if(j)return;E-=y.length+1,y=""}}if(!y){for(;E<T&&k(b=e.charAt(E));)y+=b,E++;I+=y}if(y){for(O=y,y="";E<T&&((b=e.charAt(E))===u||b===l||b===s);)y+=b,E++;if(x=null,(b=e.charAt(E))===o?x=o:b===a?x=a:b===p&&(x=d),x){if(!y)return;for(E=(I+=y+b).length,y="";E<T&&(b=e.charAt(E))!==x;){if(b===s){if(E++,(b=e.charAt(E))===s||b===x)return;y+=s}y+=b,E++}if((b=e.charAt(E))!==x)return;v=I,I+=y+b,E++,C=y,y=""}else y="",E=I.length;for(;E<T&&((b=e.charAt(E))===u||b===l);)I+=b,E++;return(b=e.charAt(E))&&b!==s?void 0:!!n||(r=t(r).test().end,O=this.decode.raw(this.unescape(O),r,{nonTerminated:!1}),C&&(v=t(v).test().end,C=this.decode.raw(this.unescape(C),v)),t(I)({type:"definition",identifier:i(w),title:C||null,url:O}))}}}}function A(t){return t!==v&&t!==f&&t!==h}function k(t){return t!==f&&t!==h&&!r(t)}A.delimiter=v},2106:function(t,e,n){"use strict";var r=n(1051);t.exports=function(t,e,n){var y,A,k,b,x,w,O,C,j,E,T,I,P,S,z,L,H,_,N,B,R,U,M,q;if(!this.options.gfm)return;y=0,_=0,w=e.length+1,O=[];for(;y<w;){if(U=e.indexOf(l,y),M=e.indexOf(c,y+1),-1===U&&(U=e.length),-1===M||M>U){if(_<p)return;break}O.push(e.slice(y,U)),_++,y=U+1}b=O.join(l),A=O.splice(1,1)[0]||[],y=0,w=A.length,_--,k=!1,T=[];for(;y<w;){if((j=A.charAt(y))===c){if(E=null,!1===k){if(!1===q)return}else T.push(k),k=!1;q=!1}else if(j===a)E=!0,k=k||v;else if(j===s)k=k===d?g:E&&k===v?m:d;else if(!r(j))return;y++}!1!==k&&T.push(k);if(T.length<h)return;if(n)return!0;H=-1,B=[],R=t(b).reset({type:"table",align:T,children:B});for(;++H<_;){for(N=O[H],x={type:"tableRow",children:[]},H&&t(l),t(N).reset(x,R),w=N.length+1,y=0,C="",I="",P=!0,S=null,z=null;y<w;)if((j=N.charAt(y))!==f&&j!==u){if(""===j||j===c)if(P)t(j);else{if(j&&z){C+=j,y++;continue}!I&&!j||P||(b=I,C.length>1&&(j?(b+=C.slice(0,C.length-1),C=C.charAt(C.length-1)):(b+=C,C="")),L=t.now(),t(b)({type:"tableCell",children:this.tokenizeInline(I,L)},x)),t(C+j),C="",I=""}else if(C&&(I+=C,C=""),I+=j,j===i&&y!==w-2&&(I+=N.charAt(y+1),y++),j===o){for(S=1;N.charAt(y+1)===j;)I+=j,y++,S++;z?S>=z&&(z=0):z=S}P=!1,y++}else I?C+=j:t(j),y++;H||t(l+A)}return R};var i="\\",o="`",a="-",c="|",s=":",u=" ",l="\n",f="\t",h=1,p=2,d="left",g="center",m="right",v=null},2107:function(t,e,n){"use strict";var r=n(1099),i=n(1153),o=n(1214),a=n(1215);t.exports=function(t,e,n){var f,h,p,d,g,m=this.options,v=m.commonmark,y=m.gfm,A=this.blockTokenizers,k=this.interruptParagraph,b=e.indexOf(c),x=e.length;for(;b<x;){if(-1===b){b=x;break}if(e.charAt(b+1)===c)break;if(v){for(d=0,f=b+1;f<x;){if((p=e.charAt(f))===s){d=l;break}if(p!==u)break;d++,f++}if(d>=l){b=e.indexOf(c,b+1);continue}}if(h=e.slice(b+1),a(k,A,this,[t,h,!0]))break;if(A.list.call(this,t,h,!0)&&(this.inList||v||y&&!i(r.left(h).charAt(0))))break;if(f=b,-1!==(b=e.indexOf(c,b+1))&&""===r(e.slice(f,b))){b=f;break}}if(h=e.slice(0,b),""===r(h))return t(h),null;if(n)return!0;return g=t.now(),h=o(h),t(h)({type:"paragraph",children:this.tokenizeInline(h,g)})};var c="\n",s="\t",u=" ",l=4},2108:function(t,e,n){"use strict";var r=n(2109);function i(t,e,n){var r,i;if("\\"===e.charAt(0)&&(r=e.charAt(1),-1!==this.escape.indexOf(r)))return!!n||(i="\n"===r?{type:"break"}:{type:"text",value:r},t("\\"+r)(i))}t.exports=i,i.locator=r},2109:function(t,e,n){"use strict";t.exports=function(t,e){return t.indexOf("\\",e)}},2110:function(t,e,n){"use strict";var r=n(1051),i=n(1213),o=n(1616);t.exports=h,h.locator=o,h.notInLink=!0;var a="<",c=">",s="@",u="/",l="mailto:",f=l.length;function h(t,e,n){var o,h,p,d,g,m,v,y,A,k,b;if(e.charAt(0)===a){for(this,o="",h=e.length,p=0,d="",m=!1,v="",p++,o=a;p<h&&(g=e.charAt(p),!(r(g)||g===c||g===s||":"===g&&e.charAt(p+1)===u));)d+=g,p++;if(d){if(v+=d,d="",v+=g=e.charAt(p),p++,g===s)m=!0;else{if(":"!==g||e.charAt(p+1)!==u)return;v+=u,p++}for(;p<h&&(g=e.charAt(p),!r(g)&&g!==c);)d+=g,p++;if(g=e.charAt(p),d&&g===c)return!!n||(A=v+=d,o+=v+g,(y=t.now()).column++,y.offset++,m&&(v.slice(0,f).toLowerCase()===l?(A=A.substr(f),y.column+=f,y.offset+=f):v=l+v),k=this.inlineTokenizers,this.inlineTokenizers={text:k.text},b=this.enterLink(),A=this.tokenizeInline(A,y),this.inlineTokenizers=k,b(),t(o)({type:"link",title:null,url:i(v,{nonTerminated:!1}),children:A}))}}}},2111:function(t,e,n){"use strict";var r=n(1213),i=n(1051),o=n(2112);t.exports=g,g.locator=o,g.notInLink=!0;var a="[",c="]",s="(",u=")",l="<",f="@",h="mailto:",p=["http://","https://",h],d=p.length;function g(t,e,n){var o,g,m,v,y,A,k,b,x,w,O,C;if(this.options.gfm){for(o="",v=-1,b=d;++v<b;)if(A=p[v],(k=e.slice(0,A.length)).toLowerCase()===A){o=k;break}if(o){for(v=o.length,b=e.length,x="",w=0;v<b&&(m=e.charAt(v),!i(m)&&m!==l)&&("."!==m&&","!==m&&":"!==m&&";"!==m&&'"'!==m&&"'"!==m&&")"!==m&&"]"!==m||(O=e.charAt(v+1))&&!i(O))&&(m!==s&&m!==a||w++,m!==u&&m!==c||!(--w<0));)x+=m,v++;if(x){if(g=o+=x,A===h){if(-1===(y=x.indexOf(f))||y===b-1)return;g=g.substr(h.length)}return!!n||(C=this.enterLink(),g=this.tokenizeInline(g,t.now()),C(),t(o)({type:"link",title:null,url:r(o,{nonTerminated:!1}),children:g}))}}}}},2112:function(t,e,n){"use strict";t.exports=function(t,e){var n,i=r.length,o=-1,a=-1;if(!this.options.gfm)return-1;for(;++o<i;)-1!==(n=t.indexOf(r[o],e))&&(n<a||-1===a)&&(a=n);return a};var r=["https://","http://","mailto:"]},2113:function(t,e,n){"use strict";var r=n(1612),i=n(1616),o=n(1615).tag;t.exports=s,s.locator=i;var a=/^<a /i,c=/^<\/a>/i;function s(t,e,n){var i,s,u=e.length;if(!("<"!==e.charAt(0)||u<3)&&(i=e.charAt(1),(r(i)||"?"===i||"!"===i||"/"===i)&&(s=e.match(o))))return!!n||(s=s[0],!this.inLink&&a.test(s)?this.inLink=!0:this.inLink&&c.test(s)&&(this.inLink=!1),t(s)({type:"html",value:s}))}},2114:function(t,e,n){"use strict";var r=n(1051),i=n(1617);t.exports=m,m.locator=i;var o={}.hasOwnProperty,a="\\",c="[",s="]",u="(",l=")",f="<",h=">",p="`",d={'"':'"',"'":"'"},g={};function m(t,e,n){var i,m,v,y,A,k,b,x,w,O,C,j,E,T,I,P,S,z,L,H="",_=0,N=e.charAt(0),B=this.options.pedantic,R=this.options.commonmark,U=this.options.gfm;if("!"===N&&(w=!0,H=N,N=e.charAt(++_)),N===c&&(w||!this.inLink)){for(H+=N,I="",_++,j=e.length,T=0,(S=t.now()).column+=_,S.offset+=_;_<j;){if(k=N=e.charAt(_),N===p){for(m=1;e.charAt(_+1)===p;)k+=N,_++,m++;v?m>=v&&(v=0):v=m}else if(N===a)_++,k+=e.charAt(_);else if(v&&!U||N!==c){if((!v||U)&&N===s){if(!T){if(!B)for(;_<j&&(N=e.charAt(_+1),r(N));)k+=N,_++;if(e.charAt(_+1)!==u)return;k+=u,i=!0,_++;break}T--}}else T++;I+=k,k="",_++}if(i){for(O=I,H+=I+k,_++;_<j&&(N=e.charAt(_),r(N));)H+=N,_++;if(N=e.charAt(_),x=R?g:d,I="",y=H,N===f){for(_++,y+=f;_<j&&(N=e.charAt(_))!==h;){if(R&&"\n"===N)return;I+=N,_++}if(e.charAt(_)!==h)return;H+=f+I+h,P=I,_++}else{for(N=null,k="";_<j&&(N=e.charAt(_),!k||!o.call(x,N));){if(r(N)){if(!B)break;k+=N}else{if(N===u)T++;else if(N===l){if(0===T)break;T--}I+=k,k="",N===a&&(I+=a,N=e.charAt(++_)),I+=N}_++}P=I,_=(H+=I).length}for(I="";_<j&&(N=e.charAt(_),r(N));)I+=N,_++;if(N=e.charAt(_),H+=I,I&&o.call(x,N))if(_++,H+=N,I="",C=x[N],A=H,R){for(;_<j&&(N=e.charAt(_))!==C;)N===a&&(I+=a,N=e.charAt(++_)),_++,I+=N;if((N=e.charAt(_))!==C)return;for(E=I,H+=I+N,_++;_<j&&(N=e.charAt(_),r(N));)H+=N,_++}else for(k="";_<j;){if((N=e.charAt(_))===C)b&&(I+=C+k,k=""),b=!0;else if(b){if(N===l){H+=I+C+k,E=I;break}r(N)?k+=N:(I+=C+k+N,k="",b=!1)}else I+=N;_++}if(e.charAt(_)===l)return!!n||(H+=l,P=this.decode.raw(this.unescape(P),t(y).test().end,{nonTerminated:!1}),E&&(A=t(A).test().end,E=this.decode.raw(this.unescape(E),A)),L={type:w?"image":"link",title:E||null,url:P},w?L.alt=this.decode.raw(this.unescape(O),S)||null:(z=this.enterLink(),L.children=this.tokenizeInline(O,S),z()),t(H)(L))}}}g['"']='"',g["'"]="'",g[u]=l},2115:function(t,e,n){"use strict";var r=n(1051),i=n(1617),o=n(1216);t.exports=m,m.locator=i;var a="link",c="image",s="footnote",u="shortcut",l="collapsed",f="full",h="^",p="\\",d="[",g="]";function m(t,e,n){var i,m,v,y,A,k,b,x,w=e.charAt(0),O=0,C=e.length,j="",E="",T=a,I=u;if("!"===w&&(T=c,E=w,w=e.charAt(++O)),w===d){if(O++,E+=w,k="",this.options.footnotes&&e.charAt(O)===h){if(T===c)return;E+=h,O++,T=s}for(x=0;O<C;){if((w=e.charAt(O))===d)b=!0,x++;else if(w===g){if(!x)break;x--}w===p&&(k+=p,w=e.charAt(++O)),k+=w,O++}if(j=k,i=k,(w=e.charAt(O))===g){for(O++,j+=w,k="";O<C&&(w=e.charAt(O),r(w));)k+=w,O++;if(w=e.charAt(O),T!==s&&w===d){for(m="",k+=w,O++;O<C&&(w=e.charAt(O))!==d&&w!==g;)w===p&&(m+=p,w=e.charAt(++O)),m+=w,O++;(w=e.charAt(O))===g?(I=m?f:l,k+=m+w,O++):m="",j+=k,k=""}else{if(!i)return;m=i}if(I===f||!b)return j=E+j,T===a&&this.inLink?null:!!n||(T===s&&-1!==i.indexOf(" ")?t(j)({type:"footnote",children:this.tokenizeInline(i,t.now())}):((v=t.now()).column+=E.length,v.offset+=E.length,y={type:T+"Reference",identifier:o(m=I===f?m:i)},T!==a&&T!==c||(y.referenceType=I),T===a?(A=this.enterLink(),y.children=this.tokenizeInline(i,v),A()):T===c&&(y.alt=this.decode.raw(this.unescape(i),v)||null),t(j)(y)))}}}},2116:function(t,e,n){"use strict";var r=n(1099),i=n(1051),o=n(2117);t.exports=s,s.locator=o;var a="*",c="_";function s(t,e,n){var o,s,u,l,f,h,p,d=0,g=e.charAt(d);if(!(g!==a&&g!==c||e.charAt(++d)!==g||(s=this.options.pedantic,f=(u=g)+u,h=e.length,d++,l="",g="",s&&i(e.charAt(d)))))for(;d<h;){if(p=g,!((g=e.charAt(d))!==u||e.charAt(d+1)!==u||s&&i(p))&&(g=e.charAt(d+2))!==u){if(!r(l))return;return!!n||((o=t.now()).column+=2,o.offset+=2,t(f+l+f)({type:"strong",children:this.tokenizeInline(l,o)}))}s||"\\"!==g||(l+=g,g=e.charAt(++d)),l+=g,d++}}},2117:function(t,e,n){"use strict";t.exports=function(t,e){var n=t.indexOf("**",e),r=t.indexOf("__",e);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},2118:function(t,e,n){"use strict";var r=n(1099),i=n(2119),o=n(1051),a=n(2120);t.exports=u,u.locator=a;var c="*",s="_";function u(t,e,n){var a,u,l,f,h,p,d,g=0,m=e.charAt(g);if(!(m!==c&&m!==s||(u=this.options.pedantic,h=m,l=m,p=e.length,g++,f="",m="",u&&o(e.charAt(g)))))for(;g<p;){if(d=m,!((m=e.charAt(g))!==l||u&&o(d))){if((m=e.charAt(++g))!==l){if(!r(f)||d===l)return;if(!u&&l===s&&i(m)){f+=l;continue}return!!n||((a=t.now()).column++,a.offset++,t(h+f+l)({type:"emphasis",children:this.tokenizeInline(f,a)}))}f+=l}u||"\\"!==m||(f+=m,m=e.charAt(++g)),f+=m,g++}}},2119:function(t,e,n){"use strict";t.exports=function(t){return i.test("number"==typeof t?r(t):t.charAt(0))};var r=String.fromCharCode,i=/\w/},2120:function(t,e,n){"use strict";t.exports=function(t,e){var n=t.indexOf("*",e),r=t.indexOf("_",e);if(-1===r)return n;if(-1===n)return r;return r<n?r:n}},2121:function(t,e,n){"use strict";var r=n(1051),i=n(2122);t.exports=c,c.locator=i;var o="~",a="~~";function c(t,e,n){var i,c,s,u="",l="",f="",h="";if(this.options.gfm&&e.charAt(0)===o&&e.charAt(1)===o&&!r(e.charAt(2)))for(i=1,c=e.length,(s=t.now()).column+=2,s.offset+=2;++i<c;){if(!((u=e.charAt(i))!==o||l!==o||f&&r(f)))return!!n||t(a+h+a)({type:"delete",children:this.tokenizeInline(h,s)});h+=l,f=l,l=u}}},2122:function(t,e,n){"use strict";t.exports=function(t,e){return t.indexOf("~~",e)}},2123:function(t,e,n){"use strict";var r=n(1051),i=n(2124);t.exports=a,a.locator=i;var o="`";function a(t,e,n){for(var i,a,c,s,u,l,f,h,p=e.length,d=0,g="",m="";d<p&&e.charAt(d)===o;)g+=o,d++;if(g){for(u=g,s=d,g="",h=e.charAt(d),c=0;d<p;){if(l=h,h=e.charAt(d+1),l===o?(c++,m+=l):(c=0,g+=l),c&&h!==o){if(c===s){u+=g+m,f=!0;break}g+=m,m=""}d++}if(!f){if(s%2!=0)return;g=""}if(n)return!0;for(i="",a="",p=g.length,d=-1;++d<p;)l=g.charAt(d),r(l)?a+=l:(a&&(i&&(i+=a),a=""),i+=l);return t(u)({type:"inlineCode",value:i})}}},2124:function(t,e,n){"use strict";t.exports=function(t,e){return t.indexOf("`",e)}},2125:function(t,e,n){"use strict";var r=n(2126);t.exports=o,o.locator=r;var i=2;function o(t,e,n){for(var r,o=e.length,a=-1,c="";++a<o;){if("\n"===(r=e.charAt(a))){if(a<i)return;return!!n||t(c+=r)({type:"break"})}if(" "!==r)return;c+=r}}},2126:function(t,e,n){"use strict";t.exports=function(t,e){var n=t.indexOf("\n",e);for(;n>e&&" "===t.charAt(n-1);)n--;return n}},2127:function(t,e,n){"use strict";t.exports=function(t,e,n){var r,i,o,a,c,s,u,l,f,h;if(n)return!0;r=this.inlineMethods,a=r.length,i=this.inlineTokenizers,o=-1,f=e.length;for(;++o<a;)"text"!==(l=r[o])&&i[l]&&((u=i[l].locator)||t.file.fail("Missing locator: `"+l+"`"),-1!==(s=u.call(this,e,1))&&s<f&&(f=s));c=e.slice(0,f),h=t.now(),this.decode(c,h,(function(e,n,r){t(r||e)({type:"text",value:e})}))}},2128:function(t,e,n){var r=n(2129);t.exports=function(){return function(t){return r(t,"list",(function(t,e){var n,r,i=0;for(n=0,r=e.length;n<r;n++)"list"===e[n].type&&(i+=1);for(n=0,r=t.children.length;n<r;n++){var o=t.children[n];o.index=n,o.ordered=t.ordered}t.depth=i})),t}}},2129:function(t,e,n){"use strict";t.exports=function(t,e,n){var r=[];"function"==typeof e&&(n=e,e=null);function i(t){var o;return e&&t.type!==e||(o=n(t,r.concat())),t.children&&!1!==o?function(t,e){var n,o=t.length,a=-1;r.push(e);for(;++a<o;)if((n=t[a])&&!1===i(n))return!1;return r.pop(),!0}(t.children,t):o}i(t)}},2130:function(t,e,n){"use strict";var r=n(1154),i="virtualHtml",o=/^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i,a=/^<(\/?)([a-z]+)\s*>$/;t.exports=function(t){var e,n;return r(t,"html",(function(t,r,c){n!==c&&(e=[],n=c);var s=function(t){var e=t.value.match(o);return!!e&&e[1]}(t);if(s)return c.children.splice(r,1,{type:i,tag:s,position:t.position}),!0;var u=function(t,e){var n=t.value.match(a);return!!n&&{tag:n[2],opening:!n[1],node:t}}(t);if(!u)return!0;var l=function(t,e){var n=t.length;for(;n--;)if(t[n].tag===e)return t.splice(n,1)[0];return!1}(e,u.tag);return l?c.children.splice(r,0,function(t,e,n){var r=n.children.indexOf(t.node),o=n.children.indexOf(e.node),a=n.children.splice(r,o-r+1).slice(1,-1);return{type:i,children:a,tag:t.tag,position:{start:t.node.position.start,end:e.node.position.end,indent:[]}}}(u,l,c)):u.opening||e.push(u),!0}),!0),t}},2131:function(t,e,n){"use strict";var r=n(1154);function i(t,e,n,r){if("remove"===r)n.children.splice(e,1);else if("unwrap"===r){var i=[e,1];t.children&&(i=i.concat(t.children)),Array.prototype.splice.apply(n.children,i)}}e.ofType=function(t,e){return function(e){return t.forEach((function(t){return r(e,t,n,!0)})),e};function n(t,n,r){r&&i(t,n,r,e)}},e.ifNotMatch=function(t,e){return function(t){return r(t,n,!0),t};function n(n,r,o){o&&!t(n,r,o)&&i(n,r,o,e)}}},2132:function(t,e,n){"use strict";var r=n(0),i=n(1065),o=n(323),a={start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function c(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,l=e.renderers[t.type];void 0===t.position&&(t.position=n.node&&n.node.position||a);var f=t.position.start,h=[t.type,f.line,f.column,u].join("-");if(!o.isValidElementType(l))throw new Error("Renderer for type `".concat(t.type,"` not defined or is not renderable"));var p=function(t,e,n,o,a,u){var l={key:e},f="string"==typeof o;n.sourcePos&&t.position&&(l["data-sourcepos"]=[(h=t.position).start.line,":",h.start.column,"-",h.end.line,":",h.end.column].map(String).join(""));var h;n.rawSourcePos&&!f&&(l.sourcePosition=t.position);n.includeNodeIndex&&a.node&&a.node.children&&!f&&(l.index=a.node.children.indexOf(t),l.parentChildCount=a.node.children.length);var p=null!==t.identifier&&void 0!==t.identifier?n.definitions[t.identifier]||{}:null;switch(t.type){case"root":s(l,{className:n.className});break;case"text":l.nodeKey=e,l.children=t.value;break;case"heading":l.level=t.depth;break;case"list":l.start=t.start,l.ordered=t.ordered,l.tight=!t.loose,l.depth=t.depth;break;case"listItem":l.checked=t.checked,l.tight=!t.loose,l.ordered=t.ordered,l.index=t.index,l.children=function(t,e){if(t.loose)return t.children;if(e.node&&t.index>0&&e.node.children[t.index-1].loose)return t.children;return function(t){return t.children.reduce((function(t,e){return t.concat("paragraph"===e.type?e.children||[]:[e])}),[])}(t)}(t,a).map((function(e,r){return c(e,n,{node:t,props:l},r)}));break;case"definition":s(l,{identifier:t.identifier,title:t.title,url:t.url});break;case"code":s(l,{language:t.lang&&t.lang.split(/\s/,1)[0]});break;case"inlineCode":l.children=t.value,l.inline=!0;break;case"link":s(l,{title:t.title||void 0,target:"function"==typeof n.linkTarget?n.linkTarget(t.url,t.children,t.title):n.linkTarget,href:n.transformLinkUri?n.transformLinkUri(t.url,t.children,t.title):t.url});break;case"image":s(l,{alt:t.alt||void 0,title:t.title||void 0,src:n.transformImageUri?n.transformImageUri(t.url,t.children,t.title,t.alt):t.url});break;case"linkReference":s(l,i(p,{href:n.transformLinkUri?n.transformLinkUri(p.href):p.href}));break;case"imageReference":s(l,{src:n.transformImageUri&&p.href?n.transformImageUri(p.href,t.children,p.title,t.alt):p.href,title:p.title||void 0,alt:t.alt||void 0});break;case"table":case"tableHead":case"tableBody":l.columnAlignment=t.align;break;case"tableRow":l.isHeader="tableHead"===a.node.type,l.columnAlignment=a.props.columnAlignment;break;case"tableCell":s(l,{isHeader:a.props.isHeader,align:a.props.columnAlignment[u]});break;case"virtualHtml":l.tag=t.tag;break;case"html":l.isBlock=t.position.start.line!==t.position.end.line,l.escapeHtml=n.escapeHtml,l.skipHtml=n.skipHtml;break;case"parsedHtml":var d;t.children&&(d=t.children.map((function(e,r){return c(e,n,{node:t,props:l},r)}))),l.escapeHtml=n.escapeHtml,l.skipHtml=n.skipHtml,l.element=function(t,e){var n=t.element;if(Array.isArray(n)){var i=r.Fragment||"div";return r.createElement(i,null,n)}if(n.props.children||e){var o=r.Children.toArray(n.props.children).concat(e);return r.cloneElement(n,null,o)}return r.cloneElement(n,null)}(t,d);break;default:s(l,i(t,{type:void 0,position:void 0,children:void 0}))}!f&&t.value&&(l.value=t.value);return l}(t,h,e,l,n,u);return r.createElement(l,p,p.children||t.children&&t.children.map((function(n,r){return c(n,e,{node:t,props:p},r)}))||void 0)}function s(t,e){for(var n in e)void 0!==e[n]&&(t[n]=e[n])}t.exports=c},2133:function(t,e,n){"use strict";var r=n(1154);function i(t){var e=t.children;t.children=[{type:"tableHead",align:t.align,children:[e[0]],position:e[0].position}],e.length>1&&t.children.push({type:"tableBody",align:t.align,children:e.slice(1),position:{start:e[1].position.start,end:e[e.length-1].position.end}})}t.exports=function(t){return r(t,"table",i),t}},2134:function(t,e,n){"use strict";t.exports=function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(e.children||[]).reduce((function(e,n){return"definition"===n.type&&(e[n.identifier]={href:n.url,title:n.title}),t(n,e)}),n)}},2135:function(t,e,n){"use strict";var r=["http","https","mailto","tel"];t.exports=function(t){var e=(t||"").trim(),n=e.charAt(0);if("#"===n||"/"===n)return e;var i=e.indexOf(":");if(-1===i)return e;for(var o=r.length,a=-1;++a<o;){var c=r[a];if(i===c.length&&e.slice(0,c.length).toLowerCase()===c)return e}return-1!==(a=e.indexOf("?"))&&i>a?e:-1!==(a=e.indexOf("#"))&&i>a?e:"javascript:void(0)"}},2136:function(t,e,n){"use strict";var r=n(1065),i=n(0),o=parseInt((i.version||"16").slice(0,2),10)>=16,a=i.createElement;function c(t,e){return a(t,s(e),e.children)}function s(t){return t["data-sourcepos"]?{"data-sourcepos":t["data-sourcepos"]}:{}}t.exports={break:"br",paragraph:"p",emphasis:"em",strong:"strong",thematicBreak:"hr",blockquote:"blockquote",delete:"del",link:"a",image:"img",linkReference:"a",imageReference:"img",table:c.bind(null,"table"),tableHead:c.bind(null,"thead"),tableBody:c.bind(null,"tbody"),tableRow:c.bind(null,"tr"),tableCell:function(t){var e=t.align?{textAlign:t.align}:void 0,n=s(t);return a(t.isHeader?"th":"td",e?r({style:e},n):n,t.children)},root:function(t){var e=!t.className,n=e&&i.Fragment||"div";return a(n,e?null:t,t.children)},text:function(t){return o?t.children:a("span",null,t.children)},list:function(t){var e=s(t);null!==t.start&&1!==t.start&&void 0!==t.start&&(e.start=t.start.toString());return a(t.ordered?"ol":"ul",e,t.children)},listItem:function(t){var e=null;if(null!==t.checked&&void 0!==t.checked){var n=t.checked;e=a("input",{type:"checkbox",checked:n,readOnly:!0})}return a("li",s(t),e,t.children)},definition:function(){return null},heading:function(t){return a("h".concat(t.level),s(t),t.children)},inlineCode:function(t){return a("code",s(t),t.children)},code:function(t){var e=t.language&&"language-".concat(t.language),n=a("code",e?{className:e}:null,t.value);return a("pre",s(t),n)},html:function(t){if(t.skipHtml)return null;var e=t.isBlock?"div":"span";if(t.escapeHtml){var n=i.Fragment||e;return a(n,null,t.value)}var r={dangerouslySetInnerHTML:{__html:t.value}};return a(e,r)},virtualHtml:function(t){return a(t.tag,s(t),t.children)},parsedHtml:function(t){return t["data-sourcepos"]?i.cloneElement(t.element,{"data-sourcepos":t["data-sourcepos"]}):t.element}}},2137:function(t,e,n){"use strict";e.HtmlParser="undefined"==typeof Symbol?"__RMD_HTML_PARSER__":Symbol("__RMD_HTML_PARSER__")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,