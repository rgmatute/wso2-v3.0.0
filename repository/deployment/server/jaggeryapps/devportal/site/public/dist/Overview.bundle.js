(window.webpackJsonp=window.webpackJsonp||[]).push([[5,7],{1123:function(e,t){e.exports=function(e,t,a,n){var s=new Blob(void 0!==n?[n,e]:[e],{type:a||"application/octet-stream"});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(s,t);else{var i=window.URL.createObjectURL(s),o=document.createElement("a");o.style.display="none",o.href=i,o.setAttribute("download",t),void 0===o.download&&o.setAttribute("target","_blank"),document.body.appendChild(o),o.click(),document.body.removeChild(o),window.URL.revokeObjectURL(i)}}},1212:function(e,t,a){"use strict";var n=a(0),s=a.n(n),i=a(3),o=a.n(i),r=a(6),l=a(314),c=a(1033),m=a(1028),d=a(1610),p=a.n(d),u=a(1136),g=a.n(u),h=a(21),E=a(1045),b=a(177);a(179);function f(e){const{classes:t,doc:a,apiId:i,fullScreen:o,intl:r}=e,{api:d}=Object(n.useContext)(E.a),[u,f]=Object(n.useState)(""),v=new b.a;Object(n.useEffect)(()=>{"MARKDOWN"!==a.sourceType&&"INLINE"!==a.sourceType||w()},[e.doc]);const w=()=>{v.getInlineContentOfDocument(i,a.documentId).then(e=>{let t=e.text;Object.keys(d).map(e=>{let a=new RegExp("___"+e+"___","g");t=t.replace(a,d[e])}),f(t)}).catch(e=>{0})};return s.a.createElement(s.a.Fragment,null,!o&&s.a.createElement("div",{className:t.docBadge},a.type),a.summary&&s.a.createElement(l.a,{variant:"body1",className:t.docSummary},a.summary),"MARKDOWN"===a.sourceType&&s.a.createElement(p.a,{source:u}),"INLINE"===a.sourceType&&s.a.createElement(g.a,{html:u}),"URL"===a.sourceType&&s.a.createElement("a",{className:t.displayURL,href:a.sourceUrl,target:"_blank"},a.sourceUrl,s.a.createElement(c.a,{className:t.displayURLLink},"open_in_new")),"FILE"===a.sourceType&&s.a.createElement(m.a,{variant:"contained",color:"default",className:t.button,onClick:()=>{v.getFileForDocument(i,a.documentId).then(e=>{((e,t)=>{let a="";const n=e.headers["content-disposition"];if(n&&-1!==n.indexOf("attachment")){const e=/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(n);null!=e&&e[1]&&(a=e[1].replace(/['"]/g,""))}const s=e.headers["content-type"],i=new Blob([e.data],{type:s});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(i,a);else{const e=window.URL||window.webkitURL,t=e.createObjectURL(i);if(a){const e=document.createElement("a");void 0===e.download?window.location=t:(e.href=t,e.download=a,document.body.appendChild(e),e.click())}else window.location=t;setTimeout(()=>{e.revokeObjectURL(t)},100)}})(e,document)}).catch(e=>{0})}},s.a.createElement(h.a,{id:"Apis.Details.Documents.View.btn.download",defaultMessage:"Download"}),s.a.createElement(c.a,null,"arrow_downward")))}f.propTypes={classes:o.a.shape({}).isRequired,doc:o.a.shape({}).isRequired,apiId:o.a.shape({}).isRequired,intl:o.a.shape({formatMessage:o.a.func}).isRequired,fullScreen:o.a.shape({}).isRequired},t.a=Object(h.e)(Object(r.a)(e=>({root:{paddingTop:e.spacing(2),paddingBottom:e.spacing(2)},docTitle:{fontWeight:100,fontSize:50,color:e.palette.grey[500]},docBadge:{padding:e.spacing(1),background:e.palette.primary.main,position:"absolute",top:0,marginTop:-22,color:e.palette.getContrastText(e.palette.primary.main)},button:{padding:e.spacing(2),marginTop:e.spacing(2)},displayURL:{padding:e.spacing(2),marginTop:e.spacing(2),background:e.palette.grey[200],color:e.palette.getContrastText(e.palette.grey[200]),display:"flex"},displayURLLink:{paddingLeft:e.spacing(2)},docSummary:{marginTop:e.spacing(2)}}))(f))},1618:function(e,t,a){"use strict";a.r(t);var n=a(0),s=a.n(n),i=a(1028),o=a(1248),r=a(1249),l=a(1251),c=a(1033),m=a(1224),d=a(1023),p=a(1123),u=a.n(p),g=a(1027),h=a(314),E=a(3),b=a.n(E),f=a(6),v=a(21),w=a(1059),y=a(24),k=a(23),x=a(177);function S(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}class C extends s.a.Component{constructor(e){super(e),S(this,"handleClick",(e,t)=>{const a=this.api_uuid,n=t;this.getSdkForApi(a,n)}),S(this,"handleChange",e=>{let t=this.state.sdkLanguages;t=t.filter(t=>-1!==t.toLowerCase().search(e.target.value.toLowerCase())),this.setState({items:t})}),S(this,"addDefaultSrc",e=>{e.target.src=k.app.context+"/site/public/images/sdks/default.svg"}),this.state={sdkLanguages:null,items:null};const{match:t,apiId:a}=this.props;this.api_uuid=t?t.params.apiUuid:a,this.filter_threshold=5,this.getSdkForApi=this.getSdkForApi.bind(this),this.handleClick=this.handleClick.bind(this),this.handleChange=this.handleChange.bind(this),this.addDefaultSrc=this.addDefaultSrc.bind(this)}componentDidMount(){const e=new x.a;if(null!=y.a.getUser()){e.getSdkLanguages().then(e=>{0!==e.obj.length?(this.setState({sdkLanguages:e.obj}),this.setState({items:e.obj})):this.setState({sdkLanguages:!1})}).catch(e=>{404===e.status&&this.setState({notFound:!0})})}}getSdkForApi(e,t){(new x.a).getSdk(e,t).then(e=>{const t=e.headers["content-disposition"].match(/filename="(.+)"/)[1],a=e.data;u()(a,t)}).catch(e=>{const t=e.status;404===t?this.setState({notFound:!0}):400===t?this.setState({badRequest:!0}):500===t&&this.setState({serverError:!0})})}render(){const e=this.state.items,{onlyIcons:t,intl:a,classes:n,theme:p}=this.props,{custom:{apiDetailPages:{onlyShowSdks:u}}}=p,E=e&&e.length>0&&u&&u.length>0?e.filter(e=>u.includes(e.toLowerCase())):e;return t?E&&s.a.createElement(s.a.Fragment,null,E.map((e,t)=>t<3&&s.a.createElement(d.a,{item:!0,xs:4},s.a.createElement("a",{onClick:t=>this.handleClick(t,e),style:{cursor:"pointer"}},s.a.createElement("img",{alt:e,src:k.app.context+"/site/public/images/sdks/"+new String(e)+".svg",style:{width:80,height:80,margin:10}}))))):s.a.createElement(s.a.Fragment,null,s.a.createElement(h.a,{variant:"h4",className:n.titleSub},s.a.createElement(v.a,{id:"Apis.Details.Sdk.title",defaultMessage:"Software Development Kits (SDKs)"})),E?s.a.createElement(d.a,{container:!0,className:"tab-grid",spacing:0},s.a.createElement(d.a,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},this.state.sdkLanguages.length>=this.filter_threshold&&s.a.createElement(d.a,{item:!0,style:{textAlign:"left",margin:"14px"}},s.a.createElement(g.a,{id:"search",label:a.formatMessage({defaultMessage:"Search SDK",id:"Apis.Details.Sdk.search.sdk"}),type:"text",margin:"normal",name:"searchSdk",onChange:this.handleChange})),s.a.createElement(d.a,{container:!0,justify:"flex-start",spacing:Number(24)},E.map((e,t)=>s.a.createElement(d.a,{key:t,item:!0},s.a.createElement("div",{style:{width:"auto",textAlign:"center",margin:"10px"}},s.a.createElement(o.a,null,s.a.createElement("div",null,e.toString().toUpperCase()),s.a.createElement(m.a,null),s.a.createElement(l.a,{title:e.toString().toUpperCase(),src:"/devportal/site/public/images/sdks/"+new String(e)+".svg"},s.a.createElement("img",{alt:e,onError:this.addDefaultSrc,src:`/devportal/site/public/images/sdks/${e}.svg`,style:{width:"100px",height:"100px",margin:"30px"}})),s.a.createElement(r.a,null,s.a.createElement(d.a,{container:!0,justify:"center"},s.a.createElement(i.a,{color:"secondary",onClick:t=>this.handleClick(t,e)},s.a.createElement(c.a,null,"arrow_downward"),"Download")))))))))):s.a.createElement("div",{className:n.genericMessageWrapper},s.a.createElement(w.a,{type:"info",className:n.dialogContainer},s.a.createElement(h.a,{variant:"h5",component:"h3"},s.a.createElement(v.a,{id:"Apis.Details.Sdk.no.sdks",defaultMessage:"No SDKs"})),s.a.createElement(h.a,{component:"p"},s.a.createElement(v.a,{id:"Apis.Details.Sdk.no.sdks.content",defaultMessage:"No SDKs available for this API"})))))}}C.propTypes={classes:b.a.instanceOf(Object).isRequired},t.default=Object(v.e)(Object(f.a)(e=>({genericMessageWrapper:{margin:e.spacing(2)},titleSub:{marginLeft:e.spacing(2),paddingTop:e.spacing(2),paddingBottom:e.spacing(2)}}),{withTheme:!0})(C))},2146:function(e,t,a){"use strict";a.r(t);var n=a(0),s=a.n(n),i=a(3),o=a.n(i),r=a(180),l=a.n(r),c=a(314),m=a(1023),d=a(6),p=a(1629),u=a(1260),g=a(1261),h=a(73),E=a(1224),b=a(451),f=a(1259),v=a(1028),w=a(179),y=a(21),k=a(177),x=a(24),S=a(1212),C=a(1050),D=a(23),O=a(1045),A=a(1234),N=a(1628),T=a(101);function R(e){const{theme:t,method:a}=e;let n=t.custom.resourceChipColors?t.custom.resourceChipColors[a]:null,i="#000000";return n?i=t.palette.getContrastText(t.custom.resourceChipColors[a]):(console.log("Check the theme settings. The resourceChipColors is not populated properly"),n="#cccccc"),s.a.createElement(N.a,{label:a.toUpperCase(),style:{backgroundColor:n,color:i,height:20,margin:"5px"}})}R.propTypes={classes:o.a.object.isRequired};const j=Object(A.a)(R);class I extends s.a.Component{constructor(e){super(e),this.state={paths:null,swagger:{}},this.api=new k.a}componentDidMount(){const{api:e}=this.props;let t=null;(t=(new k.a).getSwaggerByAPIId(e.id)).then(e=>{void 0!==e.obj.paths&&this.setState({paths:e.obj.paths})}).catch(e=>{const t=e.status;if(404===t)this.setState({notFound:!0});else if(401===t){this.setState({isAuthorize:!1});const e=qs.stringify({reference:this.props.location.pathname});this.props.history.push({pathname:"/login",search:e})}})}render(){const{paths:e}=this.state;if(this.state.notFound)return s.a.createElement("div",null,"resource not found...");if(!e)return s.a.createElement("div",null,"loading...");const{classes:t}=this.props;return s.a.createElement("div",{className:t.root},s.a.createElement("div",{className:t.contentWrapper},Object.keys(e).map(a=>{const n=e[a];return s.a.createElement("div",{className:t.root},s.a.createElement(c.a,{className:t.heading,variant:"body1"},a),Object.keys(n).map(e=>T.a.HTTP_METHODS.includes(e)?s.a.createElement(j,{method:e}):null))})))}}I.contextType=O.a,I.propTypes={classes:o.a.object.isRequired,intl:o.a.shape({formatMessage:o.a.func}).isRequired};var M=Object(y.e)(Object(d.a)(e=>({root:{display:"flex",flexDirection:"row",alignItems:"center",marginBottom:10},heading:{marginRight:20,color:e.palette.getContrastText(e.custom.infoBar.sliderBackground)}}))(I)),L=a(1235),B=a(1240),P=a(1241);function z(e){const{theme:t,method:a}=e;let n=t.custom.operationChipColor?t.custom.operationChipColor[a]:null,i="#000000";return n?i=t.palette.getContrastText(t.custom.operationChipColor[a]):(console.log("Check the theme settings. The resourceChipColors is not populated properlly"),n="#cccccc"),s.a.createElement(N.a,{label:a,style:{backgroundColor:n,color:i,height:20}})}z.propTypes={theme:o.a.object.isRequired,method:o.a.object.isRequired};const U=Object(A.a)(z);class F extends s.a.Component{constructor(e){super(e),this.state={operations:null},this.api=new k.a}componentDidMount(){const{api:e}=this.props;this.setState({operations:e.operations})}render(){const{operations:e}=this.state;if(!e)return s.a.createElement("div",null,s.a.createElement(y.a,{id:"Apis.Details.Operations.notFound",defaultMessage:"Operations Not found"}));const{classes:t}=this.props;return s.a.createElement(L.a,null,e&&0!==e.length&&e.map(e=>s.a.createElement(P.a,{style:{borderStyle:"hidden"}},s.a.createElement(B.a,null,s.a.createElement(c.a,{className:t.heading,component:"p",variant:"body1"},e.target)),s.a.createElement(B.a,null,s.a.createElement(U,{method:e.verb.toLowerCase()})))))}}F.propTypes={classes:o.a.object.isRequired,intl:o.a.shape({formatMessage:o.a.func}).isRequired};var q=Object(y.e)(Object(d.a)({root:{display:"flex",flexDirection:"row",alignItems:"center",marginBottom:10},heading:{marginRight:20}})(F)),_=a(2140),W=a(1618);function H(e){const[t,a]=Object(n.useState)([]);Object(n.useEffect)(()=>{const t=new k.a,{apiId:n,setDocsCount:s}=e;t.getDocumentsByAPIId(n).then(e=>{e.obj.list.length>0&&(a(e.obj.list),s(e.obj.count))}).catch(e=>{404===e.status&&Alert.error("Error occured")})},[]);const{classes:i,apiId:o}=e;return 0===t.length?s.a.createElement(m.a,{item:!0,xs:12},s.a.createElement("div",{className:i.emptyBox},s.a.createElement(c.a,{variant:"body2"},s.a.createElement(y.a,{id:"Apis.Details.Overview.documents.no.content",defaultMessage:"No Documents Available"})))):s.a.createElement(s.a.Fragment,null,s.a.createElement(m.a,{item:!0,xs:12},s.a.createElement("div",{className:i.subscriptionTop},s.a.createElement("div",{className:i.boxBadge},t.length),s.a.createElement(h.a,{to:"/apis/"+o+"/documents",className:i.linkStyle},s.a.createElement(y.a,{id:"Apis.Details.Overview.documents.count.sufix",defaultMessage:"Documents"})))),s.a.createElement(m.a,{item:!0,xs:12},s.a.createElement(c.a,{variant:"subtitle2"},s.a.createElement(y.a,{id:"Apis.Details.Overview.documents.last.updated",defaultMessage:"Last Updated"})),t.length>0&&s.a.createElement("div",{className:i.subscriptionBox},s.a.createElement(h.a,{to:"/apis/"+o+"/documents",className:i.linkStyle},t[0].name))))}H.propTypes={classes:o.a.object.isRequired,theme:o.a.object.isRequired};var K=Object(d.a)(e=>({root:{padding:3*e.spacing.unit,maxWidth:e.custom.contentAreaWidth},iconClass:{marginRight:10,color:e.palette.secondary.main},boxBadge:{background:e.palette.grey.A400,color:e.palette.getContrastText(e.palette.grey.A400),fontSize:e.typography.h5.fontSize,padding:e.spacing.unit,width:30,height:30,marginRight:20,textAlign:"center"},subscriptionBox:{paddingLeft:2*e.spacing.unit},linkStyle:{color:e.palette.getContrastText(e.palette.background.default),fontSize:e.typography.fontSize},subscriptionTop:{display:"flex",flexDirection:"row",alignItems:"center"},resourceWrapper:{height:192,overflow:"auto"},actionPanel:{justifyContent:"flex-start"},linkToTest:{textDecoration:"none"},emptyBox:{background:"#ffffff55",color:"#444",border:"solid 1px #fff",padding:e.spacing(2),marginTop:50}}),{withTheme:!0})(H);const G=Object(d.a)({root:{borderBottom:"1px solid rgba(0,0,0,.125)",marginBottom:-1,minHeight:56,"&$expanded":{minHeight:56}},content:{"&$expanded":{margin:"12px 0"},alignItems:"center"},expanded:{}})(e=>s.a.createElement(g.a,e));function $(e){const{classes:t,theme:a}=e,{custom:{apiDetailPages:{showCredentials:i,showComments:o,showTryout:r,showDocuments:d,showSdks:g}}}=a,{api:D,applicationsAvailable:A,subscribedApplications:N}=Object(n.useContext)(O.a),[T,R]=Object(n.useState)(0),[j,I]=Object(n.useState)(0),[L,B]=Object(n.useState)(null);Object(n.useEffect)(()=>{(new k.a).getDocumentsByAPIId(D.id).then(e=>{const t=e.body.list.filter(e=>"_overview"===e.otherTypeName);t.length>0&&B(t[0])}).catch(e=>{404===e.status&&w.a.error("Error occured")})},[]);if(L)return s.a.createElement(s.a.Fragment,null,s.a.createElement(b.a,{className:t.paper},s.a.createElement(S.a,{doc:L,apiId:D.id,fullScreen:!0})));const P=a.custom.overview.titleIconColor,z=a.custom.overview.titleIconSize,U=x.a.getUser();return s.a.createElement(m.a,{container:!0,className:t.root,spacing:2},!D.advertiseInfo.advertised&&i&&s.a.createElement(m.a,{item:!0,xs:12,lg:6},s.a.createElement(p.a,{defaultExpanded:!0},s.a.createElement(G,null,s.a.createElement(C.a,{strokeColor:P,className:t.iconClass,width:z,height:z,icon:"credentials"}),s.a.createElement(c.a,{className:t.heading,variant:"h6"},s.a.createElement(y.a,{id:"Apis.Details.Overview.api.credentials",defaultMessage:"API Credentials"}))),D.lifeCycleStatus&&"prototyped"===D.lifeCycleStatus.toLowerCase()?s.a.createElement(u.a,{classes:{root:t.noCredentialsRoot}},s.a.createElement(m.a,{container:!0,className:t.root,spacing:2},s.a.createElement(m.a,{item:!0,xs:12,className:t.marginTop},s.a.createElement("div",{className:t.emptyBox},s.a.createElement(c.a,{variant:"body2"},s.a.createElement(y.a,{id:"Apis.Details.Overview.no.subscription.message",defaultMessage:"Subscriptions Are Not Allowed"})))))):s.a.createElement(u.a,{classes:{root:t.expansionRoot}},s.a.createElement(m.a,{container:!0,className:t.root,spacing:2},s.a.createElement(m.a,{item:!0,xs:12},s.a.createElement(c.a,{variant:"subtitle2"},s.a.createElement(y.a,{id:"Apis.Details.Overview.subscribe.to.application",defaultMessage:"Generate Credentials"})),s.a.createElement(c.a,{variant:"body2"},s.a.createElement(y.a,{id:"Apis.Details.Overview.credential.wizard.info",defaultMessage:"Use the Key Generation Wizard. Create a new application -> Subscribe ->  Generate keys and Access Token to invoke this API."}))),U&&s.a.createElement(m.a,{item:!0},s.a.createElement(h.a,{to:{pathname:"/apis/"+D.id+"/credentials/wizard"},style:D.isSubscriptionAvailable?null:{pointerEvents:"none"}},s.a.createElement(v.a,{variant:"contained",color:"primary",size:"large",disabled:!D.isSubscriptionAvailable},s.a.createElement(y.a,{id:"Apis.Details.Overview.credential.wizard.title",defaultMessage:"Key Generation Wizard"})))),A&&A.length>0&&s.a.createElement(m.a,{item:!0},s.a.createElement(s.a.Fragment,null,s.a.createElement(h.a,{to:"/apis/"+D.id+"/credentials",style:D.isSubscriptionAvailable?null:{pointerEvents:"none"}},s.a.createElement(v.a,{variant:"contained",color:"primary",size:"large",disabled:!D.isSubscriptionAvailable},s.a.createElement(y.a,{id:"Apis.Details.Overview.subscribe.to.application.btn",defaultMessage:"Subscribe to an Application"}))))),s.a.createElement(m.a,{item:!0,xs:12},s.a.createElement(c.a,{variant:"subtitle2"},s.a.createElement(y.a,{id:"Apis.Details.Overview.view.credentials",defaultMessage:"View Credentials"})),s.a.createElement(h.a,{to:"/apis/"+D.id+"/credentials",className:t.linkStyle},s.a.createElement(c.a,{variant:"body2"},N.length," ",s.a.createElement(y.a,{id:"Apis.Details.Overview.subscriptions",defaultMessage:"Subscriptions >>"})))))))),"WS"!==D.type&&r&&s.a.createElement(m.a,{item:!0,xs:12,lg:6},s.a.createElement(p.a,{defaultExpanded:!0},s.a.createElement(G,null,s.a.createElement(C.a,{strokeColor:P,className:t.iconClass,width:z,height:z,icon:"credentials"}),s.a.createElement(c.a,{className:t.heading,variant:"h6"},(e=>{switch(e){case"GRAPHQL":return s.a.createElement(y.a,{id:"Apis.Details.Overview.operations.title",defaultMessage:"Operations"});default:return s.a.createElement(y.a,{id:"Apis.Details.Overview.resources.title",defaultMessage:"Resources"})}})(D.type))),s.a.createElement(u.a,{className:t.resourceWrapper},((e,t)=>{switch(e){case"GRAPHQL":return s.a.createElement(q,{api:t});case"WS":return"";default:return s.a.createElement(M,{api:t})}})(D.type,D)),!D.advertiseInfo.advertised&&s.a.createElement(s.a.Fragment,null,s.a.createElement(E.a,null),s.a.createElement(f.a,{className:t.actionPanel},s.a.createElement(h.a,{to:"/apis/"+D.id+"/test",className:t.linkToTest},s.a.createElement(v.a,{size:"small",color:"primary"},s.a.createElement(y.a,{id:"Apis.Details.Overview.resources.show.more",defaultMessage:"Test >>"}))))))),!D.advertiseInfo.advertised&&s.a.createElement(s.a.Fragment,null,o&&s.a.createElement(m.a,{item:!0,xs:12,lg:6},s.a.createElement(p.a,{defaultExpanded:!0},s.a.createElement(G,null,s.a.createElement(C.a,{strokeColor:P,className:t.iconClass,width:z,height:z,icon:"comments"}),s.a.createElement(c.a,{className:t.heading,variant:"h6"},s.a.createElement(y.a,{id:"Apis.Details.Overview.comments.title",defaultMessage:"Comments"})),s.a.createElement(c.a,{className:t.subheading}," "+(T>3?3:T)+" of "+T)),s.a.createElement(u.a,{classes:{root:l()({[t.noCommentRoot]:0===T},{[t.commentRoot]:0!==T})}},s.a.createElement(m.a,{container:!0,className:t.root,spacing:2},D&&s.a.createElement(m.a,{item:!0,xs:12},s.a.createElement(_.default,{apiId:D.id,showLatest:!0,isOverview:!0,setCount:R})),0===T&&s.a.createElement(m.a,{item:!0,xs:12},s.a.createElement("div",{className:t.emptyBox},s.a.createElement(c.a,{variant:"body2"},s.a.createElement(y.a,{id:"Apis.Details.Overview.comments.no.content",defaultMessage:"No Comments Yet"})))))),s.a.createElement(E.a,null),s.a.createElement(f.a,{className:t.actionPanel},s.a.createElement(h.a,{to:"/apis/"+D.id+"/comments",className:t.button},s.a.createElement(v.a,{size:"small",color:"primary"},s.a.createElement(y.a,{id:"Apis.Details.Overview.comments.show.more",defaultMessage:"Show More >>"})))))),"WS"!==D.type&&g&&s.a.createElement(m.a,{item:!0,xs:6},s.a.createElement(p.a,{defaultExpanded:!0},s.a.createElement(G,null,s.a.createElement(C.a,{strokeColor:P,className:t.iconClass,width:z,height:z,icon:"sdk"}),s.a.createElement(c.a,{className:t.heading,variant:"h6"},s.a.createElement(y.a,{id:"Apis.Details.Overview.sdk.generation.title",defaultMessage:"SDK Generation"}))),s.a.createElement(u.a,{className:t.resourceWrapper},s.a.createElement(m.a,{container:!0,className:t.root,spacing:2},D&&s.a.createElement(W.default,{apiId:D.id,onlyIcons:!0}),s.a.createElement(m.a,{item:!0,xs:12},s.a.createElement(c.a,null,s.a.createElement(y.a,{id:"Apis.Details.Overview.sdk.generation.description",defaultMessage:"If you want to create a software application\n                                                     to consume the subscribed APIs, you can generate client side\n                                                      SDK for a supported language/framework and use it as a start\n                                                       point to write the software application."}))))),s.a.createElement(E.a,null),s.a.createElement(f.a,{className:t.actionPanel},s.a.createElement(h.a,{to:"/apis/"+D.id+"/sdk",className:t.linkToTest},s.a.createElement(v.a,{size:"small",color:"primary"},s.a.createElement(y.a,{id:"Apis.Details.Overview.sdk.generation.show.more",defaultMessage:"Show More >>"}))))))),d&&s.a.createElement(m.a,{item:!0,xs:12,lg:6},s.a.createElement(p.a,{defaultExpanded:!0},s.a.createElement(G,null,s.a.createElement(C.a,{strokeColor:P,className:t.iconClass,width:z,height:z,icon:"docs"}),s.a.createElement(c.a,{className:t.heading,variant:"h6"},s.a.createElement(y.a,{id:"Apis.Details.Overview.documents.title",defaultMessage:"Documents"}))),s.a.createElement(u.a,{classes:{root:l()({[t.noDocumentRoot]:0===j})}},s.a.createElement(m.a,{container:!0,className:t.root,spacing:2},s.a.createElement(K,{apiId:D.id,setDocsCount:I}))),s.a.createElement(E.a,null),s.a.createElement(f.a,{className:t.actionPanel},s.a.createElement(h.a,{to:"/apis/"+D.id+"/documents",className:t.button},s.a.createElement(v.a,{size:"small",color:"primary"},s.a.createElement(y.a,{id:"Apis.Details.Overview.comments.show.more",defaultMessage:"Show More >>"})))))))}G.muiName="ExpansionPanelSummary",$.propTypes={classes:o.a.instanceOf(Object).isRequired,theme:o.a.instanceOf(Object).isRequired};t.default=Object(d.a)(e=>({root:{padding:3*e.spacing.unit,color:e.palette.getContrastText(e.palette.background.paper),margin:-1*e.spacing(0,2)},iconClass:{marginRight:10},boxBadge:{background:e.palette.grey.A400,fontSize:e.typography.h5.fontSize,padding:e.spacing.unit,width:30,height:30,marginRight:20,textAlign:"center"},subscriptionBox:{paddingLeft:2*e.spacing.unit},linkStyle:{color:e.palette.getContrastText(e.palette.background.default),fontSize:e.typography.fontSize},subscriptionTop:{display:"flex",flexDirection:"row",alignItems:"center"},resourceWrapper:{height:192,overflow:"auto"},actionPanel:{justifyContent:"flex-start"},linkToTest:{textDecoration:"none"},button:{textDecoration:"none"},verticalSpace:{marginLeft:60*e.spacing.unit},subheading:{marginLeft:2*e.spacing.unit},marginTop:{marginTop:e.spacing(8)},subsToApp:{marginTop:e.spacing(2)},expansionRoot:{minHeight:238},noCommentRoot:{backgroundImage:`url(${D.app.context+e.custom.overviewPage.commentsBackground})`,height:"100%",backgroundPosition:"center",backgroundRepeat:"no-repeat",backgroundSize:"cover",minHeight:192},commentRoot:{height:"100%",minHeight:192},noDocumentRoot:{backgroundImage:`url(${D.app.context+e.custom.overviewPage.documentsBackground})`,height:"100%",backgroundPosition:"center",backgroundRepeat:"no-repeat",backgroundSize:"cover",minHeight:192},noCredentialsRoot:{backgroundImage:`url(${D.app.context+e.custom.overviewPage.credentialsBackground})`,height:"100%",backgroundPosition:"center",backgroundRepeat:"no-repeat",backgroundSize:"cover",minHeight:236},emptyBox:{background:"#ffffff55",color:e.palette.getContrastText(e.palette.background.paper),border:"solid 1px #fff",padding:e.spacing(2)},paper:{margin:e.spacing(2),padding:e.spacing(2)},heading:{color:e.palette.getContrastText(e.palette.background.paper)}}),{withTheme:!0})($)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,