(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1123:function(e,t){e.exports=function(e,t,a,s){var n=new Blob(void 0!==s?[s,e]:[e],{type:a||"application/octet-stream"});if(void 0!==window.navigator.msSaveBlob)window.navigator.msSaveBlob(n,t);else{var i=window.URL.createObjectURL(n),l=document.createElement("a");l.style.display="none",l.href=i,l.setAttribute("download",t),void 0===l.download&&l.setAttribute("target","_blank"),document.body.appendChild(l),l.click(),document.body.removeChild(l),window.URL.revokeObjectURL(i)}}},1618:function(e,t,a){"use strict";a.r(t);var s=a(0),n=a.n(s),i=a(1028),l=a(1248),r=a(1249),o=a(1251),c=a(1033),d=a(1224),h=a(1023),m=a(1123),g=a.n(m),p=a(1027),u=a(314),S=a(3),b=a.n(S),k=a(6),w=a(21),f=a(1059),E=a(24),v=a(23),C=a(177);function y(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}class x extends n.a.Component{constructor(e){super(e),y(this,"handleClick",(e,t)=>{const a=this.api_uuid,s=t;this.getSdkForApi(a,s)}),y(this,"handleChange",e=>{let t=this.state.sdkLanguages;t=t.filter(t=>-1!==t.toLowerCase().search(e.target.value.toLowerCase())),this.setState({items:t})}),y(this,"addDefaultSrc",e=>{e.target.src=v.app.context+"/site/public/images/sdks/default.svg"}),this.state={sdkLanguages:null,items:null};const{match:t,apiId:a}=this.props;this.api_uuid=t?t.params.apiUuid:a,this.filter_threshold=5,this.getSdkForApi=this.getSdkForApi.bind(this),this.handleClick=this.handleClick.bind(this),this.handleChange=this.handleChange.bind(this),this.addDefaultSrc=this.addDefaultSrc.bind(this)}componentDidMount(){const e=new C.a;if(null!=E.a.getUser()){e.getSdkLanguages().then(e=>{0!==e.obj.length?(this.setState({sdkLanguages:e.obj}),this.setState({items:e.obj})):this.setState({sdkLanguages:!1})}).catch(e=>{404===e.status&&this.setState({notFound:!0})})}}getSdkForApi(e,t){(new C.a).getSdk(e,t).then(e=>{const t=e.headers["content-disposition"].match(/filename="(.+)"/)[1],a=e.data;g()(a,t)}).catch(e=>{const t=e.status;404===t?this.setState({notFound:!0}):400===t?this.setState({badRequest:!0}):500===t&&this.setState({serverError:!0})})}render(){const e=this.state.items,{onlyIcons:t,intl:a,classes:s,theme:m}=this.props,{custom:{apiDetailPages:{onlyShowSdks:g}}}=m,S=e&&e.length>0&&g&&g.length>0?e.filter(e=>g.includes(e.toLowerCase())):e;return t?S&&n.a.createElement(n.a.Fragment,null,S.map((e,t)=>t<3&&n.a.createElement(h.a,{item:!0,xs:4},n.a.createElement("a",{onClick:t=>this.handleClick(t,e),style:{cursor:"pointer"}},n.a.createElement("img",{alt:e,src:v.app.context+"/site/public/images/sdks/"+new String(e)+".svg",style:{width:80,height:80,margin:10}}))))):n.a.createElement(n.a.Fragment,null,n.a.createElement(u.a,{variant:"h4",className:s.titleSub},n.a.createElement(w.a,{id:"Apis.Details.Sdk.title",defaultMessage:"Software Development Kits (SDKs)"})),S?n.a.createElement(h.a,{container:!0,className:"tab-grid",spacing:0},n.a.createElement(h.a,{item:!0,xs:12,sm:6,md:9,lg:9,xl:10},this.state.sdkLanguages.length>=this.filter_threshold&&n.a.createElement(h.a,{item:!0,style:{textAlign:"left",margin:"14px"}},n.a.createElement(p.a,{id:"search",label:a.formatMessage({defaultMessage:"Search SDK",id:"Apis.Details.Sdk.search.sdk"}),type:"text",margin:"normal",name:"searchSdk",onChange:this.handleChange})),n.a.createElement(h.a,{container:!0,justify:"flex-start",spacing:Number(24)},S.map((e,t)=>n.a.createElement(h.a,{key:t,item:!0},n.a.createElement("div",{style:{width:"auto",textAlign:"center",margin:"10px"}},n.a.createElement(l.a,null,n.a.createElement("div",null,e.toString().toUpperCase()),n.a.createElement(d.a,null),n.a.createElement(o.a,{title:e.toString().toUpperCase(),src:"/devportal/site/public/images/sdks/"+new String(e)+".svg"},n.a.createElement("img",{alt:e,onError:this.addDefaultSrc,src:`/devportal/site/public/images/sdks/${e}.svg`,style:{width:"100px",height:"100px",margin:"30px"}})),n.a.createElement(r.a,null,n.a.createElement(h.a,{container:!0,justify:"center"},n.a.createElement(i.a,{color:"secondary",onClick:t=>this.handleClick(t,e)},n.a.createElement(c.a,null,"arrow_downward"),"Download")))))))))):n.a.createElement("div",{className:s.genericMessageWrapper},n.a.createElement(f.a,{type:"info",className:s.dialogContainer},n.a.createElement(u.a,{variant:"h5",component:"h3"},n.a.createElement(w.a,{id:"Apis.Details.Sdk.no.sdks",defaultMessage:"No SDKs"})),n.a.createElement(u.a,{component:"p"},n.a.createElement(w.a,{id:"Apis.Details.Sdk.no.sdks.content",defaultMessage:"No SDKs available for this API"})))))}}x.propTypes={classes:b.a.instanceOf(Object).isRequired},t.default=Object(w.e)(Object(k.a)(e=>({genericMessageWrapper:{margin:e.spacing(2)},titleSub:{marginLeft:e.spacing(2),paddingTop:e.spacing(2),paddingBottom:e.spacing(2)}}),{withTheme:!0})(x))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMtZmlsZS1kb3dubG9hZC9maWxlLWRvd25sb2FkLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9zcmMvYXBwL2NvbXBvbmVudHMvQXBpcy9EZXRhaWxzL1Nkay5qc3giXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImRhdGEiLCJmaWxlbmFtZSIsIm1pbWUiLCJib20iLCJibG9iIiwiQmxvYiIsInR5cGUiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJtc1NhdmVCbG9iIiwiYmxvYlVSTCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInRlbXBMaW5rIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJkaXNwbGF5IiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsImRvd25sb2FkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2xpY2siLCJyZW1vdmVDaGlsZCIsInJldm9rZU9iamVjdFVSTCIsIlNkayIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN1cGVyIiwiZXZlbnQiLCJpdGVtIiwiYXBpSWQiLCJ0aGlzIiwiYXBpX3V1aWQiLCJsYW5ndWFnZSIsImdldFNka0ZvckFwaSIsInVwZGF0ZWRMaXN0Iiwic3RhdGUiLCJzZGtMYW5ndWFnZXMiLCJmaWx0ZXIiLCJ0b0xvd2VyQ2FzZSIsInNlYXJjaCIsInRhcmdldCIsInZhbHVlIiwic2V0U3RhdGUiLCJpdGVtcyIsImV2Iiwic3JjIiwiYXBwIiwiY29udGV4dCIsIm1hdGNoIiwicGFyYW1zIiwiYXBpVXVpZCIsImZpbHRlcl90aHJlc2hvbGQiLCJiaW5kIiwiaGFuZGxlQ2xpY2siLCJoYW5kbGVDaGFuZ2UiLCJhZGREZWZhdWx0U3JjIiwiY29tcG9uZW50RGlkTW91bnQiLCJhcGkiLCJBcGkiLCJBdXRoTWFuYWdlciIsImdldFVzZXIiLCJnZXRTZGtMYW5ndWFnZXMiLCJ0aGVuIiwicmVzcG9uc2UiLCJvYmoiLCJsZW5ndGgiLCJjYXRjaCIsImVycm9yIiwic3RhdHVzIiwibm90Rm91bmQiLCJnZXRTZGsiLCJzZGtaaXBOYW1lIiwiaGVhZGVycyIsInNka1ppcCIsIkpTRmlsZURvd25sb2FkIiwiYmFkUmVxdWVzdCIsInNlcnZlckVycm9yIiwicmVuZGVyIiwibGFuZ3VhZ2VMaXN0Iiwib25seUljb25zIiwiaW50bCIsImNsYXNzZXMiLCJ0aGVtZSIsImN1c3RvbSIsImFwaURldGFpbFBhZ2VzIiwib25seVNob3dTZGtzIiwiZmlsdGVyZWRMYW5ndWFnZUxpc3QiLCJsYW5nIiwiaW5jbHVkZXMiLCJGcmFnbWVudCIsIm1hcCIsImluZGV4IiwieHMiLCJvbkNsaWNrIiwiY3Vyc29yIiwiYWx0IiwiU3RyaW5nIiwid2lkdGgiLCJoZWlnaHQiLCJtYXJnaW4iLCJ2YXJpYW50IiwiY2xhc3NOYW1lIiwidGl0bGVTdWIiLCJpZCIsImRlZmF1bHRNZXNzYWdlIiwiY29udGFpbmVyIiwic3BhY2luZyIsInNtIiwibWQiLCJsZyIsInhsIiwidGV4dEFsaWduIiwibGFiZWwiLCJmb3JtYXRNZXNzYWdlIiwibmFtZSIsIm9uQ2hhbmdlIiwianVzdGlmeSIsIk51bWJlciIsImtleSIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJ0aXRsZSIsIm9uRXJyb3IiLCJjb2xvciIsImdlbmVyaWNNZXNzYWdlV3JhcHBlciIsImRpYWxvZ0NvbnRhaW5lciIsImNvbXBvbmVudCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImluc3RhbmNlT2YiLCJPYmplY3QiLCJpc1JlcXVpcmVkIiwiaW5qZWN0SW50bCIsIndpdGhTdHlsZXMiLCJtYXJnaW5MZWZ0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJ3aXRoVGhlbWUiXSwibWFwcGluZ3MiOiI0RUFBQUEsRUFBT0MsUUFBVSxTQUFTQyxFQUFNQyxFQUFVQyxFQUFNQyxHQUM1QyxJQUNJQyxFQUFPLElBQUlDLFVBRGdCLElBQVJGLEVBQXVCLENBQUNBLEVBQUtILEdBQVEsQ0FBQ0Es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QUFRLEdBQzFCNkIsV0FBWXJELEVBQU13QixRQUFRLEdBQzFCOEIsY0FBZXRELEVBQU13QixRQUFRLE1BcVFRLENBQUUrQixXQUFXLEdBQWhDSixDQUF3Q2hIIiwiZmlsZSI6IlNkay5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRhdGEsIGZpbGVuYW1lLCBtaW1lLCBib20pIHtcbiAgICB2YXIgYmxvYkRhdGEgPSAodHlwZW9mIGJvbSAhPT0gJ3VuZGVmaW5lZCcpID8gW2JvbSwgZGF0YV0gOiBbZGF0YV1cbiAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKGJsb2JEYXRhLCB7dHlwZTogbWltZSB8fCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ30pO1xuICAgIGlmICh0eXBlb2Ygd2luZG93Lm5hdmlnYXRvci5tc1NhdmVCbG9iICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBJRSB3b3JrYXJvdW5kIGZvciBcIkhUTUw3MDA3OiBPbmUgb3IgbW9yZSBibG9iIFVSTHMgd2VyZSBcbiAgICAgICAgLy8gcmV2b2tlZCBieSBjbG9zaW5nIHRoZSBibG9iIGZvciB3aGljaCB0aGV5IHdlcmUgY3JlYXRlZC4gXG4gICAgICAgIC8vIFRoZXNlIFVSTHMgd2lsbCBubyBsb25nZXIgcmVzb2x2ZSBhcyB0aGUgZGF0YSBiYWNraW5nIFxuICAgICAgICAvLyB0aGUgVVJMIGhhcyBiZWVuIGZyZWVkLlwiXG4gICAgICAgIHdpbmRvdy5uYXZpZ2F0b3IubXNTYXZlQmxvYihibG9iLCBmaWxlbmFtZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgYmxvYlVSTCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgICB2YXIgdGVtcExpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIHRlbXBMaW5rLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIHRlbXBMaW5rLmhyZWYgPSBibG9iVVJMO1xuICAgICAgICB0ZW1wTGluay5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZW5hbWUpOyBcbiAgICAgICAgXG4gICAgICAgIC8vIFNhZmFyaSB0aGlua3MgX2JsYW5rIGFuY2hvciBhcmUgcG9wIHVwcy4gV2Ugb25seSB3YW50IHRvIHNldCBfYmxhbmtcbiAgICAgICAgLy8gdGFyZ2V0IGlmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIEhUTUw1IGRvd25sb2FkIGF0dHJpYnV0ZS5cbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgeW91IHRvIGRvd25sb2FkIGZpbGVzIGluIGRlc2t0b3Agc2FmYXJpIGlmIHBvcCB1cCBibG9ja2luZyBcbiAgICAgICAgLy8gaXMgZW5hYmxlZC5cbiAgICAgICAgaWYgKHR5cGVvZiB0ZW1wTGluay5kb3dubG9hZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRlbXBMaW5rLnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgJ19ibGFuaycpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRlbXBMaW5rKTtcbiAgICAgICAgdGVtcExpbmsuY2xpY2soKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0ZW1wTGluayk7XG4gICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKGJsb2JVUkwpO1xuICAgIH1cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTksIFdTTzIgSW5jLiAoaHR0cDovL3d3dy53c28yLm9yZykgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBXU08yIEluYy4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsXG4gKiBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHRcbiAqIGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uJztcbmltcG9ydCBDYXJkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NhcmQnO1xuaW1wb3J0IENhcmRBY3Rpb25zIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NhcmRBY3Rpb25zJztcbmltcG9ydCBDYXJkTWVkaWEgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ2FyZE1lZGlhJztcbmltcG9ydCBJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ljb24nO1xuaW1wb3J0IERpdmlkZXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvRGl2aWRlcic7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcbmltcG9ydCBKU0ZpbGVEb3dubG9hZCBmcm9tICdqcy1maWxlLWRvd25sb2FkJztcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGV4dEZpZWxkJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHdpdGhTdHlsZXMsIHdpdGhUaGVtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5pbXBvcnQgeyBGb3JtYXR0ZWRNZXNzYWdlLCBpbmplY3RJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgSW5saW5lTWVzc2FnZSBmcm9tICdBcHBDb21wb25lbnRzL1NoYXJlZC9JbmxpbmVNZXNzYWdlJztcbmltcG9ydCBBdXRoTWFuYWdlciBmcm9tICdBcHBEYXRhL0F1dGhNYW5hZ2VyJztcbmltcG9ydCB7IGFwcCB9IGZyb20gJ1NldHRpbmdzJztcbmltcG9ydCBBcGkgZnJvbSAnLi4vLi4vLi4vZGF0YS9hcGknO1xuXG5jb25zdCBzdHlsZXMgPSB0aGVtZSA9PiAoe1xuICAgIGdlbmVyaWNNZXNzYWdlV3JhcHBlcjoge1xuICAgICAgICBtYXJnaW46IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgfSxcbiAgICB0aXRsZVN1Yjoge1xuICAgICAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgIH0sXG59KTtcblxuLyoqXG4gKlxuICpcbiAqIEBjbGFzcyBTZGtcbiAqIEBleHRlbmRzIHtSZWFjdC5Db21wb25lbnR9XG4gKi9cbmNsYXNzIFNkayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2RrTGFuZ3VhZ2VzOiBudWxsLFxuICAgICAgICAgICAgaXRlbXM6IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHsgbWF0Y2gsIGFwaUlkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICB0aGlzLmFwaV91dWlkID0gbWF0Y2ggPyBtYXRjaC5wYXJhbXMuYXBpVXVpZCA6IGFwaUlkO1xuICAgICAgICB0aGlzLmZpbHRlcl90aHJlc2hvbGQgPSA1O1xuICAgICAgICB0aGlzLmdldFNka0ZvckFwaSA9IHRoaXMuZ2V0U2RrRm9yQXBpLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLmhhbmRsZUNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hZGREZWZhdWx0U3JjID0gdGhpcy5hZGREZWZhdWx0U3JjLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBTZGtcbiAgICAgKi9cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgY29uc3QgYXBpID0gbmV3IEFwaSgpO1xuICAgICAgICBjb25zdCB1c2VyID0gQXV0aE1hbmFnZXIuZ2V0VXNlcigpO1xuICAgICAgICBpZiAodXNlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9taXNlZF9sYW5ndWFnZXMgPSBhcGkuZ2V0U2RrTGFuZ3VhZ2VzKCk7XG5cbiAgICAgICAgICAgIHByb21pc2VkX2xhbmd1YWdlc1xuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2JqLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNka0xhbmd1YWdlczogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNka0xhbmd1YWdlczogcmVzcG9uc2Uub2JqIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXRlbXM6IHJlc3BvbnNlLm9iaiB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0dXMgPSBlcnJvci5zdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG5vdEZvdW5kOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIHRoZSBSRVNUIEFQSSB0byBnZW5lcmF0ZSB0aGUgU0RLXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IGFwaUlkXG4gICAgICogQHBhcmFtIHsqfSBsYW5ndWFnZVxuICAgICAqIEBtZW1iZXJvZiBTZGtcbiAgICAgKi9cbiAgICBnZXRTZGtGb3JBcGkoYXBpSWQsIGxhbmd1YWdlKSB7XG4gICAgICAgIGNvbnN0IGFwaSA9IG5ldyBBcGkoKTtcbiAgICAgICAgY29uc3QgcHJvbWlzZWRfc2RrID0gYXBpLmdldFNkayhhcGlJZCwgbGFuZ3VhZ2UpO1xuXG4gICAgICAgIHByb21pc2VkX3Nka1xuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2RrWmlwTmFtZSA9IHJlc3BvbnNlLmhlYWRlcnNbJ2NvbnRlbnQtZGlzcG9zaXRpb24nXS5tYXRjaCgvZmlsZW5hbWU9XCIoLispXCIvKVsxXTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZGtaaXAgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgIC8vIFByb21wdCB0byBkb3dubG9hZCB6aXAgZmlsZSBmb3IgdGhlIFNES1xuICAgICAgICAgICAgICAgIEpTRmlsZURvd25sb2FkKHNka1ppcCwgc2RrWmlwTmFtZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gZXJyb3Iuc3RhdHVzO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbm90Rm91bmQ6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgYmFkUmVxdWVzdDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZXJ2ZXJFcnJvcjogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIGNsaWNrIGV2ZW50IG9mIHRoZSBkb3dubG9hZCBidXR0b25cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBTZGtcbiAgICAgKi9cbiAgICBoYW5kbGVDbGljayA9IChldmVudCwgaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCBhcGlJZCA9IHRoaXMuYXBpX3V1aWQ7XG4gICAgICAgIGNvbnN0IGxhbmd1YWdlID0gaXRlbTtcbiAgICAgICAgdGhpcy5nZXRTZGtGb3JBcGkoYXBpSWQsIGxhbmd1YWdlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBjaGFuZ2UgZXZlbnQgb2YgdGhlIFNlYXJjaCBpbnB1dCBmaWVsZFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIFNka1xuICAgICAqL1xuICAgIGhhbmRsZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgICBsZXQgdXBkYXRlZExpc3QgPSB0aGlzLnN0YXRlLnNka0xhbmd1YWdlcztcbiAgICAgICAgdXBkYXRlZExpc3QgPSB1cGRhdGVkTGlzdC5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnRvTG93ZXJDYXNlKCkuc2VhcmNoKGV2ZW50LnRhcmdldC52YWx1ZS50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXRlbXM6IHVwZGF0ZWRMaXN0IH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgc2RrIGltYWdlIG5vdCBmb3VuZCBpc3N1ZS4gUG9pbnQgdG8gYSBkZWZhdWx0IGltYWdlXG4gICAgICovXG4gICAgYWRkRGVmYXVsdFNyYyA9IChldikgPT4ge1xuICAgICAgICBldi50YXJnZXQuc3JjID0gYXBwLmNvbnRleHQgKyAnL3NpdGUvcHVibGljL2ltYWdlcy9zZGtzL2RlZmF1bHQuc3ZnJztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKlxuICAgICAqIEByZXR1cm5zXG4gICAgICogQG1lbWJlcm9mIFNka1xuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgbGFuZ3VhZ2VMaXN0ID0gdGhpcy5zdGF0ZS5pdGVtcztcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgb25seUljb25zLCBpbnRsLCBjbGFzc2VzLCB0aGVtZSxcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGN1c3RvbToge1xuICAgICAgICAgICAgICAgIGFwaURldGFpbFBhZ2VzOiB7IG9ubHlTaG93U2RrcyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSA9IHRoZW1lO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZExhbmd1YWdlTGlzdCA9XG4gICAgICAgIGxhbmd1YWdlTGlzdCAmJiBsYW5ndWFnZUxpc3QubGVuZ3RoID4gMCAmJiBvbmx5U2hvd1Nka3MgJiYgb25seVNob3dTZGtzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IGxhbmd1YWdlTGlzdC5maWx0ZXIobGFuZyA9PiBvbmx5U2hvd1Nka3MuaW5jbHVkZXMobGFuZy50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgICAgICAgICA6IGxhbmd1YWdlTGlzdDtcbiAgICAgICAgaWYgKG9ubHlJY29ucykge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZExhbmd1YWdlTGlzdCAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtmaWx0ZXJlZExhbmd1YWdlTGlzdC5tYXAoKGxhbmd1YWdlLCBpbmRleCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA8IDMgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBpdGVtIHhzPXs0fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXZlbnQgPT4gdGhpcy5oYW5kbGVDbGljayhldmVudCwgbGFuZ3VhZ2UpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGN1cnNvcjogJ3BvaW50ZXInIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9e2xhbmd1YWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmNvbnRleHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcvc2l0ZS9wdWJsaWMvaW1hZ2VzL3Nka3MvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFN0cmluZyhsYW5ndWFnZSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuc3ZnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogODAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDgwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9J2g0JyBjbGFzc05hbWU9e2NsYXNzZXMudGl0bGVTdWJ9PlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD0nQXBpcy5EZXRhaWxzLlNkay50aXRsZScgZGVmYXVsdE1lc3NhZ2U9J1NvZnR3YXJlIERldmVsb3BtZW50IEtpdHMgKFNES3MpJyAvPlxuICAgICAgICAgICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgICAgICAgICAgICB7ZmlsdGVyZWRMYW5ndWFnZUxpc3QgPyAoXG4gICAgICAgICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBjbGFzc05hbWU9J3RhYi1ncmlkJyBzcGFjaW5nPXswfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfSBzbT17Nn0gbWQ9ezl9IGxnPXs5fSB4bD17MTB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNka0xhbmd1YWdlcy5sZW5ndGggPj0gdGhpcy5maWx0ZXJfdGhyZXNob2xkICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdyaWQgaXRlbSBzdHlsZT17eyB0ZXh0QWxpZ246ICdsZWZ0JywgbWFyZ2luOiAnMTRweCcgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dEZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9J3NlYXJjaCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTZWFyY2ggU0RLJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdBcGlzLkRldGFpbHMuU2RrLnNlYXJjaC5zZGsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9J3RleHQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luPSdub3JtYWwnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0nc2VhcmNoU2RrJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxHcmlkIGNvbnRhaW5lciBqdXN0aWZ5PSdmbGV4LXN0YXJ0JyBzcGFjaW5nPXtOdW1iZXIoMjQpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2ZpbHRlcmVkTGFuZ3VhZ2VMaXN0Lm1hcCgobGFuZ3VhZ2UsIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBrZXk9e2luZGV4fSBpdGVtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6ICdhdXRvJywgdGV4dEFsaWduOiAnY2VudGVyJywgbWFyZ2luOiAnMTBweCcgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj57bGFuZ3VhZ2UudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERpdmlkZXIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkTWVkaWFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17bGFuZ3VhZ2UudG9TdHJpbmcoKS50b1VwcGVyQ2FzZSgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcvZGV2cG9ydGFsL3NpdGUvcHVibGljL2ltYWdlcy9zZGtzLycgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU3RyaW5nKGxhbmd1YWdlKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuc3ZnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD17bGFuZ3VhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3I9e3RoaXMuYWRkRGVmYXVsdFNyY31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXtgL2RldnBvcnRhbC9zaXRlL3B1YmxpYy9pbWFnZXMvc2Rrcy8ke2xhbmd1YWdlfS5zdmdgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMHB4JywgaGVpZ2h0OiAnMTAwcHgnLCBtYXJnaW46ICczMHB4JyB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0NhcmRNZWRpYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkQWN0aW9ucz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R3JpZCBjb250YWluZXIganVzdGlmeT0nY2VudGVyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9J3NlY29uZGFyeSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2V2ZW50ID0+IHRoaXMuaGFuZGxlQ2xpY2soZXZlbnQsIGxhbmd1YWdlKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb24+YXJyb3dfZG93bndhcmQ8L0ljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J0Rvd25sb2FkJ31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkQWN0aW9ucz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgICAgIDwvR3JpZD5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5nZW5lcmljTWVzc2FnZVdyYXBwZXJ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPElubGluZU1lc3NhZ2UgdHlwZT0naW5mbycgY2xhc3NOYW1lPXtjbGFzc2VzLmRpYWxvZ0NvbnRhaW5lcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0naDUnIGNvbXBvbmVudD0naDMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD0nQXBpcy5EZXRhaWxzLlNkay5uby5zZGtzJyBkZWZhdWx0TWVzc2FnZT0nTm8gU0RLcycgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFR5cG9ncmFwaHkgY29tcG9uZW50PSdwJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSdBcGlzLkRldGFpbHMuU2RrLm5vLnNka3MuY29udGVudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlPSdObyBTREtzIGF2YWlsYWJsZSBmb3IgdGhpcyBBUEknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9JbmxpbmVNZXNzYWdlPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblNkay5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NlczogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KS5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgaW5qZWN0SW50bCh3aXRoU3R5bGVzKHN0eWxlcywgeyB3aXRoVGhlbWU6IHRydWUgfSkoU2RrKSk7XG4iXSwic291cmNlUm9vdCI6IiJ9