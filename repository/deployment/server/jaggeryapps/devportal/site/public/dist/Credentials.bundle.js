(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{2149:function(e,a,t){"use strict";t.r(a);var i=t(0),s=t.n(i),n=t(3),r=t.n(n),l=t(6),c=t(314),p=t(73),o=t(1028),d=t(1141),u=t(1299),g=t(177),m=t(179),b=t(451),h=t(1023),f=t(1059),E=t(21),y=t(1068),C=t(24),S=t(1271),A=t(1069),w=t(1045),D=t(180),v=t.n(D),R=t(1050),I=t(1625);const O=e=>{const{classes:a,loadInfo:t,handleSubscriptionDelete:i,theme:n,selectedAppId:r,updateSubscriptionData:l,selectedKeyType:c,app:o,index:d,applicationOwner:u}=e;return s.a.createElement(s.a.Fragment,null,s.a.createElement("tr",{style:{backgroundColor:d%2?"":"#ffffff"}},s.a.createElement("td",{className:a.td},o.label),s.a.createElement("td",{className:a.td},o.policy),s.a.createElement("td",{className:a.td},o.status),s.a.createElement("td",{className:a.td},s.a.createElement("div",{className:a.actionColumn},s.a.createElement(p.a,{className:a.button,to:"/applications/"+o.value},s.a.createElement("span",null,s.a.createElement(E.a,{id:"Apis.Details.Credentials.SubscriptionTableRow.manage.app",defaultMessage:"MANAGE APP"})),s.a.createElement(R.a,{width:16,height:16,strokeColor:n.palette.primary.main,icon:"applications"})),s.a.createElement(A.a,{resourcePath:A.c.SINGLE_SUBSCRIPTION,resourceMethod:A.b.DELETE},s.a.createElement("a",{className:a.button,onClick:()=>i(o.subscriptionId,l),onKeyDown:()=>i(o.subscriptionId,l)},s.a.createElement("span",null,s.a.createElement(E.a,{id:"Apis.Details.Credentials.SubscriptionTableRow.unsubscribe",defaultMessage:"UNSUBSCRIBE"})),s.a.createElement(R.a,{width:16,height:16,strokeColor:n.palette.primary.main,icon:"subscriptions"}))),s.a.createElement("a",{className:v()(a.button,{[a.activeLink]:r&&"PRODUCTION"===c&&o.value===r}),onClick:()=>t("PRODUCTION",o.value),onKeyDown:()=>t("PRODUCTION",o.value)},s.a.createElement("span",null,s.a.createElement(E.a,{id:"Apis.Details.Credentials.SubscriptionTableRow.prod.keys",defaultMessage:"PROD KEYS"})),s.a.createElement(R.a,{width:16,height:16,strokeColor:n.palette.primary.main,icon:"productionkeys"})),s.a.createElement("a",{className:v()(a.button,{[a.activeLink]:r&&"SANDBOX"===c&&o.value===r}),onClick:()=>t("SANDBOX",o.value),onKeyDown:()=>t("SANDBOX",o.value)},s.a.createElement("span",null,s.a.createElement(E.a,{id:"Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys",defaultMessage:"SANDBOX KEYS"})),s.a.createElement(R.a,{width:16,height:16,strokeColor:n.palette.primary.main,icon:"productionkeys"}))))),o.value===r&&("PRODUCTION"===c||"SANDBOX"===c)&&s.a.createElement("tr",null,s.a.createElement("td",{colSpan:"4"},s.a.createElement("div",{className:a.selectedWrapper},s.a.createElement(I.a,{keyType:c,selectedApp:{appId:o.value,label:o.label,owner:u},updateSubscriptionData:l})))))};O.propTypes={classes:r.a.shape({td:r.a.shape({}),actionColumn:r.a.shape({}),button:r.a.shape({}),activeLink:r.a.shape({}),selectedWrapper:r.a.shape({})}).isRequired,theme:r.a.shape({}).isRequired,handleSubscriptionDelete:r.a.func.isRequired,loadInfo:r.a.func.isRequired,selectedAppId:r.a.string.isRequired,updateSubscriptionData:r.a.func.isRequired,selectedKeyType:r.a.string.isRequired,applicationOwner:r.a.string.isRequired,app:r.a.shape({label:r.a.string,policy:r.a.string,status:r.a.string,value:r.a.string,subscriptionId:r.a.string}).isRequired,index:r.a.number.isRequired};var T=Object(l.a)(e=>({button:{padding:e.spacing.unit,color:e.palette.getContrastText(e.palette.background.default),display:"flex",alignItems:"center",fontSize:"11px",cursor:"pointer","& span":{paddingLeft:6,display:"inline-block"}},actionColumn:{display:"flex",textAlign:"right",direction:"rtl"},td:{color:e.palette.getContrastText(e.palette.background.default),borderBottom:"solid 1px "+e.palette.grey.A200,fontSize:"11px",paddingLeft:e.spacing.unit,height:35},selectedWrapper:{background:e.palette.grey[100],borderLeft:"solid 2px "+e.palette.primary.main}}),{withTheme:!0})(O);function x(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,i)}return t}function N(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}class M extends s.a.Component{constructor(...e){super(...e),N(this,"state",{expanded:!0,selectedAppId:!1,selectedKeyType:!1,subscriptionRequest:{applicationId:"",apiId:"",throttlingPolicy:""},throttlingPolicyList:[],applicationOwner:""}),N(this,"updateData",()=>{const{api:e,applicationsAvailable:a}=this.context,{subscriptionRequest:t}=this.state,i=function(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?x(t,!0).forEach((function(a){N(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):x(t).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}({},t,{apiId:e.id}),s=e.tiers;s&&s[0]&&(i.throttlingPolicy=s[0].tierName),a&&a[0]&&(i.applicationId=a[0].value),this.setState({subscriptionRequest:i,throttlingPolicyList:s})}),N(this,"handleExpandClick",()=>{this.setState(e=>({expanded:!e.expanded}))}),N(this,"handleSubscribe",()=>{const{updateSubscriptionData:e,apiType:a}=this.context,{subscriptionRequest:t}=this.state,{intl:i}=this.props;(new g.a).subscribe(t.apiId,t.applicationId,t.throttlingPolicy,a).then(a=>{"ON_HOLD"===a.body.status?m.a.info(i.formatMessage({defaultMessage:"Your subscription request has been submitted and is now awaiting approval.",id:"subscription.pending"})):(console.log("Subscription created successfully with ID : "+a.body.subscriptionId),m.a.info(i.formatMessage({defaultMessage:"Subscribed successfully",id:"Apis.Details.Credentials.Credentials.subscribed.successfully"}))),e&&e(this.updateData)}).catch(e=>{console.log("Error while creating the subscription."),console.error(e)})}),N(this,"goToWizard",()=>{const{history:e}=this.props;e.push("credentials/wizard")}),N(this,"loadInfo",(e,a)=>{this.setState({selectedKeyType:e,selectedAppId:a}),y.a.get(a).then(e=>{this.setState({applicationOwner:e.owner})})}),N(this,"updateSubscriptionRequest",e=>{this.setState({subscriptionRequest:e})}),N(this,"handleSubscriptionDelete",(e,a)=>{const{intl:t}=this.props;(new d.a).deleteSubscription(e).then(e=>{if(200!==e.status)return console.log(e),void m.a.info(t.formatMessage({defaultMessage:"Something went wrong while deleting the Subscription!",id:"Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription"}));m.a.info(t.formatMessage({defaultMessage:"Subscription deleted successfully!",id:"Apis.Details.Credentials.Credentials.subscription.deleted.successfully"})),a&&a()})})}componentDidMount(){const{api:e,updateSubscriptionData:a}=this.context;e?this.updateData():a(this.updateData)}render(){const{classes:e,intl:a}=this.props,{api:t,updateSubscriptionData:i,applicationsAvailable:n,subscribedApplications:r}=this.context,{selectedKeyType:l,selectedAppId:d,subscriptionRequest:g,throttlingPolicyList:m,applicationOwner:y}=this.state,w=C.a.getUser();return s.a.createElement(h.a,{container:!0},s.a.createElement(h.a,{item:!0,md:12,lg:11},s.a.createElement(h.a,{container:!0,spacing:5},s.a.createElement(h.a,{item:!0,md:12},s.a.createElement(c.a,{onClick:this.handleExpandClick,variant:"h4",className:e.titleSub},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.api.credentials",defaultMessage:"API Credentials"})),s.a.createElement(b.a,{elevation:0,className:e.paper},s.a.createElement(c.a,{variant:"body2",className:e.descWrapper},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.",defaultMessage:"API Credentials are grouped in to applications. An application \n                                        is primarily used to decouple the consumer from the APIs. It allows you to \n                                        generate and use a single key for multiple APIs and subscribe multiple times to \n                                        a single API with different SLA levels."})),(()=>{return t.lifeCycleStatus&&"prototyped"===t.lifeCycleStatus.toLowerCase()?s.a.createElement(s.a.Fragment,null,s.a.createElement(f.a,{type:"info",className:e.dialogContainer},s.a.createElement(c.a,{component:"p"},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.you.do.not.need.credentials.to.access.prototyped.api",defaultMessage:"You do not need credentials to access Prototyped APIs"})))):0===n.length&&0===r.length?s.a.createElement(u.a,{classes:e,handleClick:this.goToWizard,heading:w?a.formatMessage({defaultMessage:"Generate Credentials",id:"Apis.Details.Credentials.Credentials.generate.credentials"}):a.formatMessage({defaultMessage:"Sign In to Generate Credentials",id:"Apis.Details.Credentials.Credentials.generate.credentials"}),caption:a.formatMessage({defaultMessage:"You need to generate credentials to access this API",id:"Apis.Details.Credentials.Credentials.you.need.to.generate.credentials.to.access.this.api"}),buttonText:a.formatMessage({defaultMessage:"GENERATE",id:"Apis.Details.Credentials.Credentials.generate"})}):s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{className:e.generateCredentialWrapper},s.a.createElement(A.a,{resourcePath:A.c.SUBSCRIPTIONS,resourceMethod:A.b.POST},s.a.createElement(c.a,{variant:"h5"},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.api.credentials.generate",defaultMessage:"Generate Credentials"})),s.a.createElement("div",{className:e.credentialBoxWrapper},s.a.createElement("div",{className:e.credentialBox},s.a.createElement(c.a,{variant:"body2"},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.api.credentials.with.wizard.message",defaultMessage:"Use the Key Generation Wizard. Create a new application -> Subscribe -> Generate keys and Access Token to invoke this API."})),s.a.createElement(p.a,{to:`/apis/${t.id}/credentials/wizard`,style:t.isSubscriptionAvailable?null:{pointerEvents:"none"}},s.a.createElement(o.a,{variant:"contained",color:"primary",className:e.buttonElm,disabled:!t.isSubscriptionAvailable},s.a.createElement(E.a,{id:"Apis.Details.Credentials.SubscibeButtonPanel.subscribe.wizard.with.new.app",defaultMessage:"Subscribe with a new application"})))),n.length>0&&s.a.createElement("div",{className:e.credentialBox},s.a.createElement(c.a,{variant:"body2"},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.api.credentials.with.subscribe.message",defaultMessage:"Subscribe to an application and generate credentials"})),s.a.createElement(S.a,{applicationsAvailable:n,subscriptionRequest:g,throttlingPolicyList:m,updateSubscriptionRequest:this.updateSubscriptionRequest,renderSmall:!0}),s.a.createElement(o.a,{variant:"contained",color:"primary",className:e.buttonElm,onClick:()=>this.handleSubscribe(),disabled:!t.isSubscriptionAvailable},s.a.createElement(E.a,{id:"Apis.Details.Credentials.SubscibeButtonPanel.subscribe.btn",defaultMessage:"Subscribe"})))))),r&&r.length>0&&s.a.createElement(s.a.Fragment,null,s.a.createElement(c.a,{variant:"h5"},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.api.credentials.subscribed.apps.title",defaultMessage:"View Credentials"})),s.a.createElement(c.a,{variant:"body2"},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.api.credentials.subscribed.apps.description",defaultMessage:"( Subscribed Applications )"})),s.a.createElement("table",{className:e.tableMain},s.a.createElement("tr",null,s.a.createElement("th",{className:e.th},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.api.credentials.subscribed.apps.name",defaultMessage:"Application Name"})),s.a.createElement("th",{className:e.th},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.api.credentials.subscribed.apps.tier",defaultMessage:"Throttling Tier"})),s.a.createElement("th",{className:e.th},s.a.createElement(E.a,{id:"Apis.Details.Credentials.Credentials.api.credentials.subscribed.apps.status",defaultMessage:"Application Status"})),s.a.createElement("th",{className:e.th})),r.map((e,a)=>s.a.createElement(T,{loadInfo:this.loadInfo,handleSubscriptionDelete:this.handleSubscriptionDelete,selectedAppId:d,updateSubscriptionData:i,selectedKeyType:l,app:e,index:a,applicationOwner:y})))))})())))))}}N(M,"contextType",w.a),M.propTypes={classes:r.a.shape({contentWrapper:r.a.string,titleSub:r.a.string,tableMain:r.a.string,th:r.a.string,paper:r.a.string,descWrapper:r.a.string,generateCredentialWrapper:r.a.string,credentialBoxWrapper:r.a.string,credentialBox:r.a.string,buttonElm:r.a.string,dialogContainer:r.a.string}).isRequired,history:r.a.shape({location:r.a.shape({state:r.a.shape({openWizard:r.a.bool.isRequired}).isRequired,pathname:r.a.string.isRequired}).isRequired,replace:r.a.func.isRequired,push:r.a.func.isRequired}).isRequired,location:r.a.shape({state:r.a.shape({openWizard:r.a.bool.isRequired}).isRequired,pathname:r.a.string.isRequired}).isRequired,intl:r.a.func.isRequired};a.default=Object(E.e)(Object(l.a)(e=>({contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:e.spacing(3),paddingTop:e.spacing(3)},titleSub:{marginLeft:e.spacing(2),paddingTop:e.spacing(2),paddingBottom:e.spacing(2)},generateCredentialWrapper:{marginLeft:0,paddingTop:e.spacing(2),paddingBottom:e.spacing(2)},tableMain:{width:"100%",borderCollapse:"collapse",marginTop:e.spacing(3),marginLeft:e.spacing(2),marginRight:e.spacing(1)},th:{color:e.palette.getContrastText(e.palette.background.default),borderBottom:"solid 1px "+e.palette.grey.A200,borderTop:"solid 1px "+e.palette.grey.A200,textAlign:"left",fontSize:"11px",paddingLeft:e.spacing(1),paddingTop:e.spacing(1),paddingBottom:e.spacing(1)},expansion:{background:"transparent",boxShadow:"none"},summary:{alignItems:"center"},subscribeRoot:{paddingLeft:e.spacing(2)},activeLink:{background:e.palette.grey.A100},appBar:{background:e.palette.background.paper,color:e.palette.getContrastText(e.palette.background.paper)},toolbar:{marginLeft:e.spacing(2)},subscribeTitle:{flex:1},paper:{marginLeft:e.spacing(2),padding:e.spacing(2)},descWrapper:{marginBottom:e.spacing(2)},credentialBoxWrapper:{paddingLeft:e.spacing(2)},credentialBox:{padding:e.spacing(1),border:"solid 1px #ccc",borderRadius:5,marginBottom:e.spacing(2),marginTop:e.spacing(2)}}),{withTheme:!0})(M))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,