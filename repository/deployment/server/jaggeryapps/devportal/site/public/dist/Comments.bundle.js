(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{2138:function(e,t,n){"use strict";var a=n(53);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var s=a(n(141)),i=a(n(116)),o=a(n(0)),l=(a(n(3)),a(n(5))),m=a(n(1172)),r=(a(n(2139)),[0,1,2,3,4,5,6,7,8,9,10]),c=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];function d(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=parseFloat(e);return"".concat(n/t).concat(String(e).replace(String(n),"")||"px")}var p=function(e){return(0,i.default)({root:{},container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return r.forEach((function(a){var s=e.spacing(a);0!==s&&(n["spacing-".concat(t,"-").concat(a)]={margin:"-".concat(d(s,2)),width:"calc(100% + ".concat(d(s),")"),"& > $item":{padding:d(s,2)}})})),n}(e,"xs"),{},e.breakpoints.keys.reduce((function(t,n){return function(e,t,n){var a={};c.forEach((function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var s="".concat(Math.round(e/12*1e8)/1e6,"%");a[t]={flexBasis:s,flexGrow:0,maxWidth:s}}else a[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else a[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}})),"xs"===n?(0,i.default)(e,a):e[t.breakpoints.up(n)]=a}(t,e,n),t}),{}))};t.styles=p;var h=o.default.forwardRef((function(e,t){var n=e.alignContent,a=void 0===n?"stretch":n,m=e.alignItems,r=void 0===m?"stretch":m,c=e.classes,d=e.className,p=e.component,h=void 0===p?"div":p,g=e.container,u=void 0!==g&&g,C=e.direction,f=void 0===C?"row":C,x=e.item,b=void 0!==x&&x,w=e.justify,E=void 0===w?"flex-start":w,y=e.lg,v=void 0!==y&&y,k=e.md,T=void 0!==k&&k,S=e.sm,D=void 0!==S&&S,I=e.spacing,O=void 0===I?0:I,R=e.wrap,A=void 0===R?"wrap":R,M=e.xl,W=void 0!==M&&M,L=e.xs,q=void 0!==L&&L,N=e.zeroMinWidth,U=void 0!==N&&N,j=(0,s.default)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),B=(0,l.default)(c.root,d,u&&[c.container,0!==O&&c["spacing-xs-".concat(String(O))]],b&&c.item,U&&c.zeroMinWidth,"row"!==f&&c["direction-xs-".concat(String(f))],"wrap"!==A&&c["wrap-xs-".concat(String(A))],"stretch"!==r&&c["align-items-xs-".concat(String(r))],"stretch"!==a&&c["align-content-xs-".concat(String(a))],"flex-start"!==E&&c["justify-xs-".concat(String(E))],!1!==q&&c["grid-xs-".concat(String(q))],!1!==D&&c["grid-sm-".concat(String(D))],!1!==T&&c["grid-md-".concat(String(T))],!1!==v&&c["grid-lg-".concat(String(v))],!1!==W&&c["grid-xl-".concat(String(W))]);return o.default.createElement(h,(0,i.default)({className:B,ref:t},j))}));var g=(0,m.default)(p,{name:"MuiGrid"})(h);t.default=g},2139:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=function(e){return function(){return null}};t.default=a},2140:function(e,t,n){"use strict";n.r(t);var a=n(0),s=n.n(a),i=n(3),o=n.n(i),l=n(6),m=n(1033),r=n(451),c=n(314),d=n(2138),p=n.n(d),h=n(21),g=(n(101),n(180)),u=n.n(g),C=n(1059),f=n(1023),x=n(1224),b=n(179),w=n(1254),E=n(1258),y=n(1256),v=n(1257),k=n(1255),T=n(1028);class S extends s.a.Component{handleRequestClose(e){const{callback:t}=this.props;e===S.Action.OK?t(!0):t(!1)}render(){const{title:e,message:t,labelCancel:n,labelOk:a,open:i}=this.props;return s.a.createElement(w.a,{open:i,onClose:this.handleRequestClose},s.a.createElement(E.a,null,e||s.a.createElement(h.a,{id:"Shared.ConfirmDialog.please.confirm",defaultMessage:"Please Confirm"})),s.a.createElement(y.a,null,s.a.createElement(v.a,null,t||s.a.createElement(h.a,{id:"Shared.ConfirmDialog.please.confirm.sure",defaultMessage:"Are you sure?"}))),s.a.createElement(k.a,null,s.a.createElement(T.a,{onClick:()=>this.handleRequestClose(S.Action.CANCEL),color:"primary"},n||s.a.createElement(h.a,{id:"Shared.ConfirmDialog.cancel",defaultMessage:"Cancel"})),s.a.createElement(T.a,{onClick:()=>this.handleRequestClose(S.Action.OK),color:"primary"},a||s.a.createElement(h.a,{id:"Shared.ConfirmDialog.ok",defaultMessage:"OK"}))))}}S.propTypes={title:o.a.string.isRequired,message:o.a.string.isRequired,labelCancel:o.a.string.isRequired,labelOk:o.a.string.isRequired,callback:o.a.func.isRequired,open:o.a.bool.isRequired},S.Action={OK:"ok",CANCEL:"cancel"};var D=S,I=n(1027),O=n(177);class R extends s.a.Component{constructor(e){super(e),this.state={content:"",currentLength:0},this.inputChange=this.inputChange.bind(this),this.handleClickAddComment=this.handleClickAddComment.bind(this),this.handleClickCancel=this.handleClickCancel.bind(this)}inputChange({target:e}){this.setState({content:e.value,currentLength:e.value.length})}handleClickCancel(){this.setState({content:""})}handleClickAddComment(){const{apiId:e,allComments:t,commentsUpdate:n,intl:a}=this.props,{content:s}=this.state,i=new O.a,o={content:s.trim()};o.content.replace(/\s/g,"").length?i.addComment(e,o).then(e=>{this.setState({content:""});const a=e.body;t.push(a),n(t)}).catch(e=>{console.error(e),e.response&&e.response.body&&e.response.body.message?b.a.error(e.response.body.message):b.a.error(a.formatMessage({defaultMessage:"Something went wrong while adding the comment",id:"Apis.Details.Comments.CommentAdd.something.went.wrong"}))}):b.a.error(a.formatMessage({defaultMessage:"You cannot enter a blank comment",id:"Apis.Details.Comments.CommentAdd.error.blank.comment"})),this.setState({currentLength:0})}render(){const{classes:e,cancelButton:t,theme:n,intl:a}=this.props,{content:i,currentLength:o}=this.state;return s.a.createElement(f.a,{container:!0,spacing:3,className:e.contentWrapper},s.a.createElement(f.a,{item:!0,xs:!0,zeroMinWidth:!0},s.a.createElement("div",{className:e.commentAddWrapper},s.a.createElement(I.a,{id:"standard-multiline-flexible",autoFocus:!0,multiline:!0,className:e.textField,margin:"normal",placeholder:a.formatMessage({defaultMessage:"Write a comment",id:"Apis.Details.Comments.CommentAdd.write.comment.help"}),inputProps:{maxLength:n.custom.maxCommentLength},value:i,onChange:this.inputChange,variant:"outlined"}),s.a.createElement(c.a,{className:e.content,align:"left"},o+"/"+n.custom.maxCommentLength)),s.a.createElement(f.a,{container:!0,spacing:1},s.a.createElement(f.a,{item:!0},s.a.createElement(T.a,{variant:"contained",color:"primary",disabled:0===o,onClick:()=>this.handleClickAddComment()},s.a.createElement(h.a,{id:"Apis.Details.Comments.CommentAdd.btn.add.comment",defaultMessage:"Add Comment"}))),t&&s.a.createElement(f.a,{item:!0},s.a.createElement(T.a,{onClick:()=>this.handleClickCancel(),className:e.button},s.a.createElement(h.a,{id:"Apis.Details.Comments.CommentAdd.btn.cancel",defaultMessage:"Cancel"}))))))}}R.defaultProps={parentCommentId:null,toggleShowReply:null,commentsUpdate:null},R.propTypes={classes:o.a.instanceOf(Object).isRequired,cancelButton:o.a.bool.isRequired,apiId:o.a.string.isRequired,parentCommentId:o.a.string,toggleShowReply:o.a.func,commentsUpdate:o.a.func,allComments:o.a.instanceOf(Array).isRequired,intl:o.a.shape({formatMessage:o.a.func}).isRequired};var A=Object(h.e)(Object(l.a)(e=>({commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},content:{color:e.palette.getContrastText(e.palette.background.default)},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig,marginTop:2*e.spacing.unit},textField:{marginTop:0,marginRight:5,width:"100%"},commentAddWrapper:{display:"flex",alignItems:"top"}}),{withTheme:!0})(R)),M=n(525),W=n(1220),L=n(536);class q extends s.a.Component{constructor(e){super(e),this.state={commentText:"",category:"",currentLength:0},this.inputChange=this.inputChange.bind(this),this.handleCategoryChange=this.handleCategoryChange.bind(this),this.handleClickUpdateComment=this.handleClickUpdateComment.bind(this),this.handleClickCancel=this.handleClickCancel.bind(this),this.filterCommentToUpdate=this.filterCommentToUpdate.bind(this),this.filterCommentToUpdateReply=this.filterCommentToUpdateReply.bind(this)}componentDidMount(){const{comment:e}=this.props;this.setState({commentText:e.commentText,category:e.category,currentLength:e.commentText.length})}inputChange({target:e}){this.setState({commentText:e.value,currentLength:e.value.length})}handleClickCancel(){const{toggleShowEdit:e,commentsUpdate:t,allComments:n}=this.props;e(),t(n)}handleCategoryChange(e){this.setState({category:e.target.value})}filterCommentToUpdate(e){const{comment:t}=this.props;return e.commentId===t.commentId}filterCommentToUpdateReply(e){const{comment:t}=this.props;return e.commentId===t.parentCommentId}handleClickUpdateComment(){const{apiId:e,comment:t,allComments:n,toggleShowEdit:a,commentsUpdate:s,intl:i}=this.props,{category:o,commentText:l}=this.state,m=new O.a,r=t;r.commentText=l.trim(),r.category=o,t.commentText.replace(/\s/g,"").length?m.updateComment(e,r.commentId,r).then(e=>{const t=e.body;if(void 0===r.parentCommentId){const e=n.findIndex(this.filterCommentToUpdate);n[e].category=t.category,n[e].commentText=t.commentText}else{const e=n.findIndex(this.filterCommentToUpdateReply),a=n[e].replies.findIndex(this.filterCommentToUpdate);n[e].replies[a]=t}a(),s(n)}).catch(e=>{console.error(e),e.response?b.a.error(e.response.body.message):b.a.error(i.formatMessage({defaultMessage:"Something went wrong while adding the comment",id:"Apis.Details.Comments.CommentEdit.something.went.wrong"}))}):b.a.error(i.formatMessage({defaultMessage:"You cannot enter a blank comment",id:"Apis.Details.Comments.CommentEdit.blank.comment.error"}))}render(){const{classes:e,theme:t,intl:n}=this.props,{category:a,commentText:i,currentLength:o}=this.state;return s.a.createElement("div",null,s.a.createElement(M.a,{className:e.category},s.a.createElement(L.a,{value:a,onChange:this.handleCategoryChange},s.a.createElement(W.a,{value:"General"},s.a.createElement(h.a,{id:"Apis.Details.Comments.CommentEdit.general",defaultMessage:"General"})),s.a.createElement(W.a,{value:"Feature Request"},s.a.createElement(h.a,{id:"Apis.Details.Comments.CommentEdit.feature.request",defaultMessage:"Feature Request"})),s.a.createElement(W.a,{value:"Bug Report"},s.a.createElement(h.a,{id:"Apis.Details.Comments.CommentEdit.bug.report",defaultMessage:"Bug Report"})))),s.a.createElement(I.a,{id:"multiline-static",autoFocus:!0,multiline:!0,className:e.textField,margin:"normal",placeholder:n.formatMessage({defaultMessage:"Write a comment",id:"Apis.Details.Comments.CommentEdit.write.a.comment"}),inputProps:{maxLength:t.custom.maxCommentLength},value:i,onChange:this.inputChange}),s.a.createElement(c.a,{className:e.commentText,align:"right"},o+"/"+t.custom.maxCommentLength),s.a.createElement(f.a,{container:!0,spacing:1},s.a.createElement(f.a,{item:!0},s.a.createElement(T.a,{variant:"contained",color:"primary",onClick:()=>this.handleClickUpdateComment()},s.a.createElement(h.a,{id:"Apis.Details.Comments.CommentEdit.btn.save",defaultMessage:"Save"}))),s.a.createElement(f.a,{item:!0},s.a.createElement(T.a,{onClick:()=>this.handleClickCancel(),className:e.button},s.a.createElement(h.a,{id:"Apis.Details.Comments.CommentEdit.btn.cancel",defaultMessage:"Cancel"})))))}}q.propTypes={classes:o.a.instanceOf(Object).isRequired,apiId:o.a.string.isRequired,allComments:o.a.instanceOf(Array).isRequired,commentsUpdate:o.a.func.isRequired,toggleShowEdit:o.a.func.isRequired,comment:o.a.instanceOf(Object).isRequired,intl:o.a.shape({formatMessage:o.a.func}).isRequired};var N=Object(h.e)(Object(l.a)(e=>({textField:{marginTop:0,width:"87.5%"},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig,marginTop:2*e.spacing.unit},category:{width:"12%",marginRight:"0.5%"}}),{withTheme:!0})(q)),U=n(1100),j=n(24);class B extends s.a.Component{constructor(e){super(e),this.state={},this.showAddComment=this.showAddComment.bind(this),this.showEditComment=this.showEditComment.bind(this),this.handleClickOpen=this.handleClickOpen.bind(this)}showAddComment(e){const{editIndex:t,showAddComment:n}=this.props;-1===t&&n(e)}showEditComment(e){const{editIndex:t,showEditComment:n}=this.props;-1===t&&n(e)}handleClickOpen(e){const{editIndex:t,handleClickOpen:n}=this.props;-1===t&&n(e)}displayDate(e){const t=new Date(e);return t.toLocaleDateString(void 0,{day:"numeric",month:"short",year:"numeric"})+" "+t.toLocaleTimeString(void 0,{hour:"2-digit",minute:"2-digit"})}render(){const{classes:e,comment:t,editIndex:n,index:a,theme:i}=this.props;return s.a.createElement(f.a,{container:!0,spacing:1,className:e.verticalSpace,key:t.id},j.a.getUser()&&t.createdBy===j.a.getUser().name&&[s.a.createElement(f.a,{item:!0,key:"key-delete"},s.a.createElement(T.a,{variant:"outlined",size:"small",className:-1===n?e.link:e.disable,onClick:()=>this.handleClickOpen(t)},s.a.createElement(h.a,{id:"Apis.Details.Comments.CommentOptions.delete",defaultMessage:"Delete"}))),s.a.createElement(f.a,{item:!0,key:"key-delete-vertical-divider"},s.a.createElement(U.a,{height:15}))],s.a.createElement(f.a,{item:!0,className:e.time},s.a.createElement(c.a,{component:"a",variant:"caption"},this.displayDate(t.createdTime))))}}B.defaultProps={showAddComment:null},B.propTypes={classes:o.a.instanceOf(Object).isRequired,editIndex:o.a.number.isRequired,index:o.a.number.isRequired,comment:o.a.instanceOf(Object).isRequired,handleClickOpen:o.a.func.isRequired,showEditComment:o.a.func.isRequired,showAddComment:o.a.func};var P=Object(l.a)(e=>({link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},time:{color:e.palette.getContrastText(e.palette.background.default),marginTop:.3*e.spacing.unit},verticalSpace:{marginTop:e.spacing(1),display:"flex",alignItems:"center"},disable:{color:e.palette.grey[200]},commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default),marginTop:e.spacing.unig,width:"100%",whiteSpace:"pre-wrap",overflowWrap:"break-word"},root:{marginTop:2.5*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig}}),{withTheme:!0})(B);class z extends s.a.Component{constructor(e){super(e),this.state={openDialog:!1,editIndex:-1,deleteComment:null},this.handleClickDeleteComment=this.handleClickDeleteComment.bind(this),this.handleShowEdit=this.handleShowEdit.bind(this),this.handleClickOpen=this.handleClickOpen.bind(this),this.showEditComment=this.showEditComment.bind(this),this.handleConfirmDialog=this.handleConfirmDialog.bind(this),this.handleClose=this.handleClose.bind(this),this.filterRemainingComments=this.filterRemainingComments.bind(this),this.filterCommentToDelete=this.filterCommentToDelete.bind(this)}filterRemainingComments(e){const{deleteComment:t}=this.state;return e.commentId!==t.commentId}filterCommentToDelete(e){const{deleteComment:t}=this.state;return e.commentId===t.parentCommentId}showEditComment(e){const{editIndex:t}=this.state;-1===t&&this.setState({editIndex:e})}handleShowEdit(){this.setState({editIndex:-1})}handleClickOpen(e){const{editIndex:t}=this.state;-1===t&&this.setState({deleteComment:e,openDialog:!0})}handleClose(){this.setState({openDialog:!1})}handleConfirmDialog(e){e?this.handleClickDeleteComment():this.handleClose()}handleClickDeleteComment(){const e=new O.a,{deleteComment:t}=this.state,{apiId:n,allComments:a,commentsUpdate:s,intl:i}=this.props,o=t.commentId,l=t.parentCommentId;this.handleClose(),e.deleteComment(n,o).then(e=>{if(void 0===l){const e=a.filter(this.filterRemainingComments);s(e)}else{const e=a.findIndex(this.filterCommentToDelete),t=a[e].replies.filter(this.filterRemainingComments);a[e].replies=t,s(a)}}).catch(e=>{console.error(e),e.response?b.a.error(e.response.body.message):b.a.error(i.formatMessage({defaultMessage:"Something went wrong while deleting comment",id:"Apis.Details.Comments.CommentReply.something.went.wrong"})+" - "+o)})}render(){const{classes:e,comments:t,apiId:n,allComments:a,commentsUpdate:i,intl:o}=this.props,{editIndex:l,openDialog:r}=this.state;return[t&&t.map((t,o)=>s.a.createElement("div",{key:t.commentId+"-"+o,className:e.contentWrapper},s.a.createElement(f.a,{container:!0,spacing:1,className:e.root},s.a.createElement(f.a,{item:!0},s.a.createElement(m.a,{className:e.commentIcon},"account_box")),s.a.createElement(f.a,{item:!0,xs:!0,zeroMinWidth:!0},s.a.createElement(c.a,{noWrap:!0,className:e.commentText,variant:"body1"},t.createdBy),o!==l&&s.a.createElement(c.a,{className:e.commentText},t.commentText),l===o&&null,o===l&&s.a.createElement(N,{apiId:n,allComments:a,commentsUpdate:i,comment:t,toggleShowEdit:this.handleShowEdit}),s.a.createElement(P,{classes:e,comment:t,editIndex:l,index:o,showAddComment:this.showAddComment,handleClickOpen:this.handleClickOpen,showEditComment:this.showEditComment}))))),s.a.createElement(D,{key:"key-dialog",labelCancel:"Cancel",title:"Confirm Delete",message:o.formatMessage({defaultMessage:"Are you sure you want to delete this comment?",id:"Apis.Details.Comments.CommentReply.are.you.sure"}),labelOk:"Yes",callback:this.handleConfirmDialog,open:r})]}}z.defaultProps={api:null},z.propTypes={classes:o.a.instanceOf(Object).isRequired,apiId:o.a.string.isRequired,allComments:o.a.instanceOf(Array).isRequired,commentsUpdate:o.a.func.isRequired,comments:o.a.instanceOf(Array).isRequired,intl:o.a.shape({formatMessage:o.a.func}).isRequired};Object(h.e)(Object(l.a)(e=>({link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default),marginTop:e.spacing.unig,width:"100%",whiteSpace:"pre-wrap",overflowWrap:"break-word"},root:{marginTop:2.5*e.spacing.unit},contentWrapper:{maxWidth:e.custom.contentAreaWidth,paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig}}))(z));class F extends s.a.Component{constructor(e){super(e),this.state={openDialog:!1,replyIndex:-1,editIndex:-1,deleteComment:null},this.handleClickDeleteComment=this.handleClickDeleteComment.bind(this),this.handleShowEdit=this.handleShowEdit.bind(this),this.handleShowReply=this.handleShowReply.bind(this),this.handleClickOpen=this.handleClickOpen.bind(this),this.showAddComment=this.showAddComment.bind(this),this.showEditComment=this.showEditComment.bind(this),this.handleConfirmDialog=this.handleConfirmDialog.bind(this),this.handleClose=this.handleClose.bind(this),this.filterRemainingComments=this.filterRemainingComments.bind(this),this.filterCommentToDelete=this.filterCommentToDelete.bind(this)}filterRemainingComments(e){const{deleteComment:t}=this.state;return e.id!==t.id}filterCommentToDelete(e){const{deleteComment:t}=this.state;return e.id}showAddComment(e){const{editIndex:t}=this.state;-1===t&&this.setState({replyIndex:e})}showEditComment(e){const{editIndex:t}=this.state;-1===t&&this.setState({editIndex:e})}handleShowEdit(){this.setState({editIndex:-1})}handleShowReply(){this.setState({replyIndex:-1})}handleClickOpen(e){const{editIndex:t}=this.state;-1===t&&this.setState({deleteComment:e,openDialog:!0})}handleClose(){this.setState({openDialog:!1})}handleConfirmDialog(e){e?this.handleClickDeleteComment():this.handleClose()}handleClickDeleteComment(){const e=new O.a,{deleteComment:t}=this.state,{apiId:n,allComments:a,commentsUpdate:s,intl:i}=this.props,o=t.id;this.handleClose(),e.deleteComment(n,o).then(e=>{const t=a.filter(this.filterRemainingComments);s(t),b.a.message("Comment"+o+"has been successfully deleted")}).catch(e=>{console.error(e),e.response&&b.a.error(e.response.body.message)})}render(){const{classes:e,comments:t,apiId:n,allComments:a,commentsUpdate:i,isOverview:o}=this.props,{editIndex:l,replyIndex:d,openDialog:p}=this.state;return[s.a.createElement(r.a,{className:u()({[e.paper]:!o&&t.length>0},{[e.cleanBack]:o})},t&&t.slice(0).reverse().map((t,r)=>s.a.createElement("div",{key:t.commentId+"-"+r,className:u()({[e.contentWrapper]:!o},{[e.contentWrapperOverview]:o})},0!==r&&s.a.createElement(x.a,{className:e.divider}),s.a.createElement(f.a,{container:!0,spacing:1,className:u()({[e.root]:!o})},s.a.createElement(f.a,{item:!0},s.a.createElement(m.a,{className:e.commentIcon},"account_box")),s.a.createElement(f.a,{item:!0,xs:!0,zeroMinWidth:!0},s.a.createElement(c.a,{noWrap:!0,className:e.commentText},t.createdBy),r!==l&&s.a.createElement(c.a,{className:e.commentText},t.content),r===l&&s.a.createElement(N,{apiId:n,allComments:a,commentsUpdate:i,comment:t,toggleShowEdit:this.handleShowEdit}),s.a.createElement(P,{classes:e,comment:t,editIndex:l,index:r,showAddComment:this.showAddComment,handleClickOpen:this.handleClickOpen,showEditComment:this.showEditComment})))))),s.a.createElement(D,{key:"key-dialog",labelCancel:"Cancel",title:"Confirm Delete",message:"Are you sure you want to delete this comment?",labelOk:"Yes",callback:this.handleConfirmDialog,open:p})]}}F.propTypes={classes:o.a.instanceOf(Object).isRequired,apiId:o.a.string.isRequired,allComments:o.a.instanceOf(Array).isRequired,commentsUpdate:o.a.func.isRequired,comments:o.a.instanceOf(Array).isRequired,isOverview:o.a.bool.isRequired};var _=Object(h.e)(Object(l.a)(e=>({link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},commentIcon:{color:e.palette.getContrastText(e.palette.background.default)},commentText:{color:e.palette.getContrastText(e.palette.background.default),marginTop:.8*e.spacing.unit,width:"99%",whiteSpace:"pre-wrap",overflowWrap:"break-word"},root:{marginTop:2.5*e.spacing.unit},contentWrapper:{paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unit},contentWrapperOverview:{background:"transparent",width:"100%"},divider:{marginTop:e.spacing.unit},paper:{margin:e.spacing(3),paddingBottom:e.spacing(3)},cleanBack:{background:"transparent",width:"100%",boxShadow:"none"}}))(F)),G=n(1045);class Y extends a.Component{constructor(e){super(e),this.state={expanded:!0,allComments:[],comments:[],totalComments:0,startCommentsToDisplay:0},this.updateCommentList=this.updateCommentList.bind(this),this.handleExpandClick=this.handleExpandClick.bind(this),this.handleLoadMoreComments=this.handleLoadMoreComments.bind(this)}componentDidMount(){let{apiId:e,theme:t,match:n,intl:a,isOverview:s,setCount:i}=this.props;n&&(e=n.params.apiUuid),(new O.a).getAllComments(e).then(e=>{let n=e.body.list;s&&(i(n.length),n.length>2&&(n=n.slice(n.length-3,n.length))),this.setState({allComments:n,totalComments:n.length}),n.length<t.custom.commentsLimit?this.setState({startCommentsToDisplay:0,comments:n.slice(0,n.length)}):this.setState({startCommentsToDisplay:n.length-t.custom.commentsLimit,comments:n.slice(n.length-t.custom.commentsLimit,n.length)})}).catch(e=>{0})}handleLoadMoreComments(){const{totalComments:e,startCommentsToDisplay:t,allComments:n}=this.state,{theme:a}=this.props;t-a.custom.commentsLimit<=0?this.setState({startCommentsToDisplay:0,comments:n.slice(0,e)}):this.setState({startCommentsToDisplay:t-a.custom.commentsLimit,comments:n.slice(t-a.custom.commentsLimit,e)})}handleExpandClick(){const{expanded:e}=this.state;this.setState({expanded:!e})}updateCommentList(e){const{startCommentsToDisplay:t,totalComments:n}=this.state,{theme:a}=this.props;let s,i,o;this.setState({allComments:e}),n<a.custom.commentsLimit?(o=e.length,this.setState({startCommentsToDisplay:0,totalComments:o,comments:e})):n<=e.length?(s=t+(i=e.length-n),o=e.length,this.setState({startCommentsToDisplay:s,totalComments:o,comments:e.slice(s,o)})):(i=n-e.length,s=0===t?t:t-i,o=e.length,this.setState({startCommentsToDisplay:s,totalComments:o,comments:e.slice(s,o)}))}isCrossTenant(e,t){let n=null,a=null;const s=t.name;if(e.includes("@")){const t=e.split("@");n=t[t.length-1]}else n="carbon.super";if(s.includes("@")){const e=s.split("@");a=e[e.length-1]}else a="carbon.super";return n!==a}render(){const{classes:e,showLatest:t,isOverview:n}=this.props,{comments:a,expanded:i,allComments:o,startCommentsToDisplay:l,totalComments:d,commentsUpdate:g}=this.state;return s.a.createElement(G.a.Consumer,null,({api:i})=>s.a.createElement("div",{className:u()({[e.contentWrapper]:!n},{[e.contentWrapperOverview]:n})},!t&&s.a.createElement("div",{className:e.root},s.a.createElement(c.a,{variant:"h4",className:e.titleSub},s.a.createElement(h.a,{id:"Apis.Details.Comments.title",defaultMessage:"Comments"}))),!t&&j.a.getUser()&&!this.isCrossTenant(i.provider,j.a.getUser())&&s.a.createElement(r.a,{className:e.paper},s.a.createElement(A,{apiId:i.id,commentsUpdate:this.updateCommentList,allComments:o,parentCommentId:null,cancelButton:!0})),0===d&&null===j.a.getUser()&&!n&&s.a.createElement("div",{className:e.genericMessageWrapper},s.a.createElement(C.a,{type:"info",className:e.dialogContainer},s.a.createElement(c.a,{variant:"h5",component:"h3"},s.a.createElement(h.a,{id:"Apis.Details.Comments.no.comments",defaultMessage:"No Comments Yet"})),s.a.createElement(c.a,{component:"p"},s.a.createElement(h.a,{id:"Apis.Details.Comments.no.comments.content",defaultMessage:"No comments available for this API yet"})))),s.a.createElement(_,{comments:a,apiId:i.id,commentsUpdate:this.updateCommentList,allComments:o,isOverview:n}),0!==l&&s.a.createElement("div",{className:e.contentWrapper},s.a.createElement(p.a,{container:!0,spacing:4,className:e.root},s.a.createElement(p.a,{item:!0},s.a.createElement(c.a,{className:e.verticalSpace,variant:"body1"},s.a.createElement("a",{className:e.link+" "+e.loadMoreLink,onClick:this.handleLoadMoreComments},s.a.createElement(h.a,{id:"Apis.Details.Comments.load.previous.comments",defaultMessage:"Load Previous Comments"})))),s.a.createElement(p.a,null,s.a.createElement(m.a,{onClick:this.handleLoadMoreComments,className:e.link+" "+e.verticalSpace},"arrow_drop_down")),s.a.createElement(p.a,{item:!0},s.a.createElement(c.a,{className:e.verticalSpace,variant:"body1"},s.a.createElement(h.a,{id:"Apis.Details.Comments.showing.comments",defaultMessage:"Showing comments "}),d-l+" of "+d))))))}}var K,J,$;K=Y,J="contextType",$=G.a,J in K?Object.defineProperty(K,J,{value:$,enumerable:!0,configurable:!0,writable:!0}):K[J]=$,Y.propTypes={classes:o.a.instanceOf(Object).isRequired};t.default=Object(h.e)(Object(l.a)(e=>({root:{display:"flex",alignItems:"center",paddingTop:2*e.spacing.unit,paddingBottom:2*e.spacing.unit},paper:{marginRight:e.spacing(3),paddingBottom:e.spacing(3),paddingRight:e.spacing(2)},contentWrapper:{paddingLeft:2*e.spacing.unit,paddingTop:e.spacing.unig},contentWrapperOverview:{padding:0,width:"100%",boxShadow:"none"},titleSub:{cursor:"pointer"},link:{color:e.palette.getContrastText(e.palette.background.default),cursor:"pointer"},verticalSpace:{marginTop:.2*e.spacing.unit},loadMoreLink:{textDecoration:"underline"},genericMessageWrapper:{margin:e.spacing(2)}}),{withTheme:!0})(Y))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,