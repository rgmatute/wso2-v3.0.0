/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.22
 * Generated at: 2020-02-25 02:01:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.google.gson.Gson;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient;
import org.wso2.carbon.identity.application.authentication.endpoint.util.Constants;
import org.wso2.carbon.identity.core.util.IdentityCoreConstants;
import org.wso2.carbon.identity.core.util.IdentityUtil;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.CONFIGURATION_ERROR;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.AUTHENTICATION_MECHANISM_NOT_CONFIGURED;
import static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ENABLE_AUTHENTICATION_WITH_REST_API;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.ResourceBundle;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl;
import java.nio.charset.StandardCharsets;
import org.apache.commons.lang.StringUtils;
import org.owasp.encoder.Encode;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.provider.json.JSONProvider;
import org.apache.http.HttpStatus;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.client.SelfUserRegistrationResource;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO;
import java.net.URLEncoder;
import javax.ws.rs.core.Response;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL;
import org.apache.commons.lang.StringUtils;
import org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager;
import java.util.List;
import org.owasp.encoder.Encode;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.provider.json.JSONProvider;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.http.HttpStatus;
import org.owasp.encoder.Encode;
import org.wso2.carbon.identity.application.authentication.endpoint.client.SelfUserRegistrationResource;
import org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO;
import org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO;
import java.net.URLEncoder;
import java.net.URLDecoder;
import javax.ws.rs.core.Response;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable;
import static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL;
import org.apache.commons.codec.binary.Base64;
import java.nio.charset.Charset;
import org.wso2.carbon.base.ServerConfiguration;
import org.wso2.carbon.identity.application.authentication.endpoint.util.EndpointConfigManager;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


    private static final String FIDO_AUTHENTICATOR = "FIDOAuthenticator";
    private static final String IWA_AUTHENTICATOR = "IwaNTLMAuthenticator";
    private static final String IS_SAAS_APP = "isSaaSApp";
    private static final String BASIC_AUTHENTICATOR = "BasicAuthenticator";
    private static final String IDENTIFIER_EXECUTOR = "IdentifierExecutor";
    private static final String OPEN_ID_AUTHENTICATOR = "OpenIDAuthenticator";
    private static final String JWT_BASIC_AUTHENTICATOR = "JWTBasicAuthenticator";
    private static final String X509_CERTIFICATE_AUTHENTICATOR = "x509CertificateAuthenticator";


    private static final String JAVAX_SERVLET_FORWARD_REQUEST_URI = "javax.servlet.forward.request_uri";
    private static final String JAVAX_SERVLET_FORWARD_QUERY_STRING = "javax.servlet.forward.query_string";
    private static final String UTF_8 = "UTF-8";
    private static final String TENANT_DOMAIN = "tenant-domain";


    
        private String getRecoverAccountUrl(String identityMgtEndpointContext, String urlEncodedURL, boolean isUsernameRecovery) {
        
            return identityMgtEndpointContext + "/recoveraccountrouter.do?callback=" +
                    Encode.forHtmlAttribute(urlEncodedURL) + "&isUsernameRecovery=" + isUsernameRecovery;
        }
    
        private String getRegistrationUrl(String identityMgtEndpointContext, String urlEncodedURL) {
        
            return identityMgtEndpointContext + "/register.do?callback=" + Encode.forHtmlAttribute(urlEncodedURL);
        }
    

        private boolean isIdentifierFirstLogin(String inputType) {
            return "idf".equalsIgnoreCase(inputType);
        }
    
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(10);
    _jspx_dependants.put("/basicauth.jsp", Long.valueOf(1571964730000L));
    _jspx_dependants.put("/localize.jsp", Long.valueOf(1569960366000L));
    _jspx_dependants.put("/openid.jsp", Long.valueOf(1569960366000L));
    _jspx_dependants.put("/identifierauth.jsp", Long.valueOf(1569960366000L));
    _jspx_dependants.put("/init-url.jsp", Long.valueOf(1569960366000L));
    _jspx_dependants.put("/includes/footer.jsp", Long.valueOf(1571964730000L));
    _jspx_dependants.put("/init-loginform-action-url.jsp", Long.valueOf(1569960366000L));
    _jspx_dependants.put("/includes/title.jsp", Long.valueOf(1571964730000L));
    _jspx_dependants.put("/includes/header.jsp", Long.valueOf(1571964730000L));
    _jspx_dependants.put("/tenantauth.jsp", Long.valueOf(1569960366000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("org.apache.commons.lang.StringUtils");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isRecoveryEPAvailable");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("org.apache.http.HttpStatus");
    _jspx_imports_classes.add("org.apache.commons.codec.binary.Base64");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.ResendCodeRequestDTO");
    _jspx_imports_classes.add("org.owasp.encoder.Encode");
    _jspx_imports_classes.add("java.util.ResourceBundle");
    _jspx_imports_classes.add("java.nio.charset.Charset");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.bean.UserDTO");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.Constants");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.provider.json.JSONProvider");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthContextAPIClient");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.isSelfSignUpEPAvailable");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.client.WebClient");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EndpointConfigManager");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS_MSG");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.EncodedControl");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.AUTHENTICATION_MECHANISM_NOT_CONFIGURED");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.AuthenticationEndpointUtil");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.nio.charset.StandardCharsets");
    _jspx_imports_classes.add("org.apache.cxf.jaxrs.client.JAXRSClientFactory");
    _jspx_imports_classes.add("org.wso2.carbon.base.ServerConfiguration");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.client.SelfUserRegistrationResource");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.ENABLE_AUTHENTICATION_WITH_REST_API");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityCoreConstants");
    _jspx_imports_classes.add("javax.ws.rs.core.Response");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.CONFIGURATION_ERROR");
    _jspx_imports_classes.add("org.wso2.carbon.identity.application.authentication.endpoint.util.TenantDataManager");
    _jspx_imports_classes.add("org.wso2.carbon.identity.core.util.IdentityUtil");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.core.util.IdentityUtil.getServerURL");
    _jspx_imports_classes.add("static org.wso2.carbon.identity.application.authentication.endpoint.util.Constants.STATUS");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String BUNDLE = "org.wso2.carbon.identity.application.authentication.endpoint.i18n.Resources";
    ResourceBundle resourceBundle = ResourceBundle.getBundle(BUNDLE, request.getLocale(), new
            EncodedControl(StandardCharsets.UTF_8.toString()));

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    String identityServerEndpointContextParam = application.getInitParameter("IdentityServerEndpointContextURL");
    String samlssoURL = "../samlsso";
    String commonauthURL = "../commonauth";
    String oauth2AuthorizeURL = "../oauth2/authorize";
    String oidcLogoutURL = "../oidc/logout";
    String openidServerURL = "../openidserver";
    if (StringUtils.isNotBlank(identityServerEndpointContextParam)) {
        samlssoURL = identityServerEndpointContextParam + "/samlsso";
        commonauthURL = identityServerEndpointContextParam + "/commonauth";
        oauth2AuthorizeURL = identityServerEndpointContextParam + "/oauth2/authorize";
        oidcLogoutURL = identityServerEndpointContextParam + "/oidc/logout";
        openidServerURL = identityServerEndpointContextParam + "/oidc/logout";
    }

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("    ");

        request.getSession().invalidate();
        String queryString = request.getQueryString();
        Map<String, String> idpAuthenticatorMapping = null;
        if (request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP) != null) {
            idpAuthenticatorMapping = (Map<String, String>) request.getAttribute(Constants.IDP_AUTHENTICATOR_MAP);
        }

        String errorMessage = "authentication.failed.please.retry";
        String errorCode = "";
        if(request.getParameter(Constants.ERROR_CODE)!=null){
            errorCode = request.getParameter(Constants.ERROR_CODE) ;
        }
        String loginFailed = "false";

        if (Boolean.parseBoolean(request.getParameter(Constants.AUTH_FAILURE))) {
            loginFailed = "true";
            String error = request.getParameter(Constants.AUTH_FAILURE_MSG);
            if (error != null && !error.isEmpty()) {
                errorMessage = error;
            }
        }
    
      out.write("\n");
      out.write("    ");


        boolean hasLocalLoginOptions = false;
        boolean isBackChannelBasicAuth = false;
        List<String> localAuthenticatorNames = new ArrayList<String>();

        if (idpAuthenticatorMapping != null && idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) {
            String authList = idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME);
            if (authList != null) {
                localAuthenticatorNames = Arrays.asList(authList.split(","));
            }
        }


    
      out.write("\n");
      out.write("    ");

        boolean reCaptchaEnabled = false;
        if (request.getParameter("reCaptcha") != null && "TRUE".equalsIgnoreCase(request.getParameter("reCaptcha"))) {
            reCaptchaEnabled = true;
        }
    
      out.write("\n");
      out.write("    ");

        String inputType = request.getParameter("inputType");
        String username = null;
    
        if (isIdentifierFirstLogin(inputType)) {
            String authAPIURL = application.getInitParameter(Constants.AUTHENTICATION_REST_ENDPOINT_URL);
            if (StringUtils.isBlank(authAPIURL)) {
                authAPIURL = IdentityUtil.getServerURL("/api/identity/auth/v1.1/", true, true);
            }
            if (!authAPIURL.endsWith("/")) {
                authAPIURL += "/";
            }
            authAPIURL += "context/" + request.getParameter("sessionDataKey");
            String contextProperties = AuthContextAPIClient.getContextProperties(authAPIURL);
            Gson gson = new Gson();
            Map<String, Object> parameters = gson.fromJson(contextProperties, Map.class);
            username = (String) parameters.get("username");
        }
        
    
      out.write("\n");
      out.write("    <html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n");
      out.write("        <meta charset=\"utf-8\">\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("        <!-- title -->\n");
      out.write("        ");

            File titleFile = new File(getServletContext().getRealPath("extensions/title.jsp"));
            if (titleFile.exists()) {
        
      out.write("\n");
      out.write("                ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/title.jsp", out, false);
      out.write("\n");
      out.write("        ");
 } else { 
      out.write("\n");
      out.write("                ");
      out.write("\n");
      out.write("\n");
      out.write("<!-- localize.jsp MUST already be included in the calling script -->\n");
      out.write("\n");
      out.write("<!-- title -->\n");
      out.write("<title>WSO2 API Manager</title>\n");
      out.write("\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("        <link rel=\"icon\" href=\"images/favicon.png\" type=\"image/x-icon\"/>\n");
      out.write("        <link href=\"libs/bootstrap_3.4.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("        <link href=\"css/Roboto.css\" rel=\"stylesheet\">\n");
      out.write("        <link href=\"css/custom-common.css\" rel=\"stylesheet\">\n");
      out.write("\n");
      out.write("        <!--[if lt IE 9]>\n");
      out.write("        <script src=\"js/html5shiv.min.js\"></script>\n");
      out.write("        <script src=\"js/respond.min.js\"></script>\n");
      out.write("        <![endif]-->\n");
      out.write("\n");
      out.write("        ");

            if (reCaptchaEnabled) {
        
      out.write("\n");
      out.write("        <script src='");
      out.print(
        (Encode.forJavaScriptSource(request.getParameter("reCaptchaAPI"))));
      out.write("'></script>\n");
      out.write("        ");

            }
        
      out.write("\n");
      out.write("\n");
      out.write("         <script>\n");
      out.write("\n");
      out.write("\tfunction checkSessionKey() {\n");
      out.write("                $.ajax({\n");
      out.write("                    type: \"GET\",\n");
      out.write("                    url: \"/logincontext?sessionDataKey=\" + getParameterByName(\"sessionDataKey\") + \"&relyingParty=\" + getParameterByName(\"relyingParty\") + \"&tenantDomain=\" + getParameterByName(\"tenantDomain\"),\n");
      out.write("                    success: function (data) {\n");
      out.write("                        if (data && data.status == 'redirect' && data.redirectUrl && data.redirectUrl.length > 0) {\n");
      out.write("                            window.location.href = data.redirectUrl;\n");
      out.write("                        }\n");
      out.write("                    },\n");
      out.write("                    cache: false\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("\n");
      out.write("\tfunction getParameterByName(name, url) {\n");
      out.write("             if (!url) {\n");
      out.write("                url = window.location.href;\n");
      out.write("             }\n");
      out.write("             name = name.replace(/[\\[\\]]/g, '\\$&');\n");
      out.write("             var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n");
      out.write("             results = regex.exec(url);\n");
      out.write("             if (!results) return null;\n");
      out.write("             if (!results[2]) return \"\";\n");
      out.write("             return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n");
      out.write("         }\n");
      out.write("         </script>\n");
      out.write("    </head>\n");
      out.write("\n");
      out.write("    <body onload=\"checkSessionKey()\">\n");
      out.write("    <!-- header -->\n");
      out.write("    ");

        File headerFile = new File(getServletContext().getRealPath("extensions/header.jsp"));
        if (headerFile.exists()) {
    
      out.write("\n");
      out.write("            ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/header.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("            ");
      out.write("\n");
      out.write("\n");
      out.write("<!-- localize.jsp MUST already be included in the calling script -->\n");
      out.write("\n");
      out.write("<!-- header -->\n");
      out.write("<header class=\"header header-default\">\n");
      out.write("    <div class=\"container-fluid\"><br></div>\n");
      out.write("    <div class=\"container-fluid\">\n");
      out.write("        <div class=\"pull-left brand float-remove-xs text-center-xs\">\n");
      out.write("            <a href=\"#\">\n");
      out.write("                <img src=\"images/logo-inverse.svg\"\n");
      out.write("\t\t             alt=\"WSO2\"\n");
      out.write("                     title=\"WSO2\"\n");
      out.write("                     class=\"logo\">\n");
      out.write("                <h1><em>API Manager</em></h1>\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</header>\n");
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <!-- page content -->\n");
      out.write("    <div class=\"container-fluid body-wrapper\">\n");
      out.write("\n");
      out.write("        <div class=\"row\">\n");
      out.write("            <div class=\"col-md-12\">\n");
      out.write("\n");
      out.write("                <!-- content -->\n");
      out.write("                <div class=\"container col-xs-10 col-sm-6 col-md-6 col-lg-4 col-centered wr-content wr-login col-centered\">\n");
      out.write("                    <div>\n");
      out.write("                        <h2 class=\"wr-title uppercase blue-bg padding-double white boarder-bottom-blue margin-none\">\n");
      out.write("                            ");

                                if (isIdentifierFirstLogin(inputType)) {
                            
      out.write("\n");
      out.write("                            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "welcome") + " " + username);
      out.write("\n");
      out.write("    \n");
      out.write("                            ");

                                } else {
                            
      out.write("\n");
      out.write("                            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "login"));
      out.write("\n");
      out.write("                            ");

                                }
                            
      out.write("\n");
      out.write("                            \n");
      out.write("                        </h2>\n");
      out.write("                    </div>\n");
      out.write("                    <div class=\"boarder-all \">\n");
      out.write("                        <div class=\"clearfix\"></div>\n");
      out.write("                        <div class=\"padding-double login-form\">\n");
      out.write("                            ");

                                if (localAuthenticatorNames.size() > 0) {

                                    if (localAuthenticatorNames.size() > 0 && localAuthenticatorNames.contains(OPEN_ID_AUTHENTICATOR)) {
                                        hasLocalLoginOptions = true;
                            
      out.write("\n");
      out.write("\n");
      out.write("                            ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"libs/jquery_3.4.1/jquery-3.4.1.js\"></script>\n");
      out.write("<script>\n");
      out.write("    // Handle form submission preventing double submission.\n");
      out.write("    $(document).ready(function(){\n");
      out.write("        $.fn.preventDoubleSubmission = function() {\n");
      out.write("            $(this).on('submit',function(e){\n");
      out.write("                var $form = $(this);\n");
      out.write("                if ($form.data('submitted') === true) {\n");
      out.write("                    // Previously submitted - don't submit again.\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
      out.write("                } else {\n");
      out.write("                    // Mark it so that the next submit can be ignored.\n");
      out.write("                    $form.data('submitted', true);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            return this;\n");
      out.write("        };\n");
      out.write("        $('#loginForm').preventDoubleSubmission();\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("<form action=\"");
      out.print(commonauthURL);
      out.write("\" method=\"post\" id=\"loginForm\" class=\"form-horizontal\">\n");
      out.write("    ");

        loginFailed = request.getParameter("loginFailed");
        if (loginFailed != null) {

    
      out.write("\n");
      out.write("    <div class=\"alert alert-danger\">\n");
      out.write("         ");
      out.print(AuthenticationEndpointUtil.i18nBase64(resourceBundle,request.getParameter("errorMessage")));
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <input class=\"input-large\" type=\"text\" id=\"claimed_id\" name=\"claimed_id\" size='30'\n");
      out.write("               placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "openid"));
      out.write("\"/>\n");
      out.write("        <input type=\"hidden\" name=\"sessionDataKey\"\n");
      out.write("               value='");
      out.print(Encode.forHtmlAttribute(request.getParameter("sessionDataKey")));
      out.write("'/>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <div class=\"checkbox\">\n");
      out.write("            <label>\n");
      out.write("                <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
      out.write("\n");
      out.write("            </label>\n");
      out.write("        </div>\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <div class=\"form-actions\">\n");
      out.write("            <button\n");
      out.write("                    class=\"wr-btn grey-bg col-xs-12 col-md-12 col-lg-12 uppercase font-extra-large\"\n");
      out.write("                    type=\"submit\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "login"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"clearfix\"></div>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("                            ");

                            } else if (localAuthenticatorNames.size() > 0 && localAuthenticatorNames.contains(IDENTIFIER_EXECUTOR)) {
                                hasLocalLoginOptions = true;
                            
      out.write("\n");
      out.write("                                ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

    String loginFormActionURL;

    if (isBackChannelBasicAuth) {
        loginFormActionURL = "authenticate.do";
        if (StringUtils.isNotBlank(queryString)) {
            loginFormActionURL = loginFormActionURL + "?" + queryString;
        }
    } else {
        String type = request.getParameter("type");
        if ("samlsso".equals(type)) {
            loginFormActionURL = samlssoURL;
        } else if ("oauth2".equals(type)){
            loginFormActionURL = oauth2AuthorizeURL;
        } else {
            loginFormActionURL = commonauthURL;
        }
    }

      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    function submitIdentifier () {\n");
      out.write("        var username = document.getElementById(\"username\");\n");
      out.write("        username.value = username.value.trim();\n");
      out.write("        if(username.value){\n");
      out.write("            console.log(username.value);\n");
      out.write("            document.getElementById(\"identifierForm\").submit();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<form action=\"");
      out.print(loginFormActionURL);
      out.write("\" onSubmit=\"event.preventDefault()\" method=\"post\" id=\"identifierForm\">\n");
      out.write("    ");

        if (loginFormActionURL.equals(samlssoURL) || loginFormActionURL.equals(oauth2AuthorizeURL)) {
    
      out.write("\n");
      out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
      out.write("\n");
      out.write("    <div class=\"alert alert-danger\" id=\"error-msg\">");
      out.print( AuthenticationEndpointUtil.i18n(resourceBundle, errorMessage) );
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
}else if((Boolean.TRUE.toString()).equals(request.getParameter("authz_failure"))){
      out.write("\n");
      out.write("    <div class=\"alert alert-danger\" id=\"error-msg\">\n");
      out.write("        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "unauthorized.to.login"));
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
}
      out.write("\n");
      out.write("    \n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("    \n");
      out.write("        <label for=\"username\">");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username"));
      out.write("</label>\n");
      out.write("        <input id=\"username\" name=\"username\" type=\"text\" class=\"form-control\" tabindex=\"0\" placeholder=\"\" required>\n");
      out.write("        <input id=\"authType\" name=\"authType\" type=\"hidden\" value=\"idf\">\n");
      out.write("    </div>\n");
      out.write("    ");

        if (reCaptchaEnabled) {
    
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <div class=\"g-recaptcha\"\n");
      out.write("             data-sitekey=\"");
      out.print(Encode.forHtmlContent(request.getParameter("reCaptchaKey")));
      out.write("\">\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n");
      out.write("        <input type=\"hidden\" name=\"sessionDataKey\" value='");
      out.print(Encode.forHtmlAttribute
    (request.getParameter("sessionDataKey")));
      out.write("'/>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <div class=\"form-actions\">\n");
      out.write("            <button\n");
      out.write("                    class=\"wr-btn grey-bg col-xs-12 col-md-12 col-lg-12 uppercase font-extra-large margin-bottom-double\"\n");
      out.write("                    onclick=\"submitIdentifier()\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "next"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    ");

        String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
        String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
        Boolean isRecoveryEPAvailable;
        Boolean isSelfSignUpEPAvailable;
        
        if (StringUtils.isNotBlank(recoveryEPAvailable)) {
            isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
        } else {
            isRecoveryEPAvailable = isRecoveryEPAvailable();
        }
        
        if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
            isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
        } else {
            isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
        }
        
        if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
            String scheme = request.getScheme();
            String serverName = request.getServerName();
            int serverPort = request.getServerPort();
            String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
            String prmstr = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING);
            String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;
            String urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);
            
            String identityMgtEndpointContext =
                    application.getInitParameter("IdentityManagementEndpointContextURL");
            if (StringUtils.isBlank(identityMgtEndpointContext)) {
                identityMgtEndpointContext = getServerURL("/accountrecoveryendpoint", true, true);
            }
            
            if (isRecoveryEPAvailable) {
    
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <div class=\"form-actions\">\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password"));
      out.write("\n");
      out.write("            <a id=\"usernameRecoverLink\" href=\"");
      out.print(getRecoverAccountUrl(identityMgtEndpointContext, urlEncodedURL, true));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username"));
      out.write("\n");
      out.write("            </a>\n");
      out.write("            ?\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    ");

        }
        if (isSelfSignUpEPAvailable) {
    
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <div class=\"form-actions\">\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "no.account"));
      out.write("\n");
      out.write("            <a id=\"registerLink\" href=\"");
      out.print(getRegistrationUrl(identityMgtEndpointContext, urlEncodedURL));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "register.now"));
      out.write("\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    ");

            }
        }
    
      out.write("\n");
      out.write("    <div class=\"clearfix\"></div>\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("                            ");

                            } else if (localAuthenticatorNames.size() > 0 && localAuthenticatorNames.contains(JWT_BASIC_AUTHENTICATOR) ||
                                    localAuthenticatorNames.contains(BASIC_AUTHENTICATOR)) {
                                hasLocalLoginOptions = true;
                                boolean includeBasicAuth = true;
                                if (localAuthenticatorNames.contains(JWT_BASIC_AUTHENTICATOR)) {
                                    if (Boolean.parseBoolean(application.getInitParameter(ENABLE_AUTHENTICATION_WITH_REST_API))) {
                                        isBackChannelBasicAuth = true;
                                    } else {
                                        String redirectURL = "error.do?" + STATUS + "=" + CONFIGURATION_ERROR + "&" +
                                                STATUS_MSG + "=" + AUTHENTICATION_MECHANISM_NOT_CONFIGURED;
                                        response.sendRedirect(redirectURL);
                                    }
                                } else if (localAuthenticatorNames.contains(BASIC_AUTHENTICATOR)) {
                                    isBackChannelBasicAuth = false;
                                if (TenantDataManager.isTenantListEnabled() && Boolean.parseBoolean(request.getParameter(IS_SAAS_APP))) {
                                    includeBasicAuth = false;

      out.write("\n");
      out.write("                            ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"libs/jquery_1.11.3/jquery-1.11.3.js\"></script>\n");
      out.write("<script>\n");
      out.write("    // Handle form submission preventing double submission.\n");
      out.write("    $(document).ready(function(){\n");
      out.write("        $.fn.preventDoubleSubmission = function() {\n");
      out.write("            $(this).on('submit',function(e){\n");
      out.write("                var $form = $(this);\n");
      out.write("                if ($form.data('submitted') === true) {\n");
      out.write("                    // Previously submitted - don't submit again.\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
      out.write("                } else {\n");
      out.write("                    // Mark it so that the next submit can be ignored.\n");
      out.write("                    $form.data('submitted', true);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            return this;\n");
      out.write("        };\n");
      out.write("        $('#loginForm').preventDoubleSubmission();\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("<form action=\"");
      out.print(commonauthURL);
      out.write("\" method=\"post\" id=\"loginForm\">\n");
      out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
      out.write("\n");
      out.write("    <div class=\"alert alert-danger\" id=\"error-msg\">\n");
      out.write("        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username.or.password.invalid"));
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <select class=\"form-control\" id='tenantList' name=\"tenantList\" size='1'>\n");
      out.write("            <option value=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.tenant.dropdown.display.name"));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "select.tenant.dropdown.display.name"));
      out.write("\n");
      out.write("            </option>\n");
      out.write("            <option value=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "super.tenant"));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "super.tenant.display.name"));
      out.write("\n");
      out.write("            </option>\n");
      out.write("\n");
      out.write("            ");

                List<String> tenantDomainsList = TenantDataManager.getAllActiveTenantDomains();
                if (!tenantDomainsList.isEmpty()) {
                    for (String tenant : tenantDomainsList) {
            
      out.write("\n");
      out.write("            <option value=\"");
      out.print(Encode.forHtmlAttribute(tenant));
      out.write('"');
      out.write('>');
      out.print(Encode.forHtmlContent(tenant));
      out.write("\n");
      out.write("            </option>\n");
      out.write("            ");

                    }
                }
            
      out.write("\n");
      out.write("        </select>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <input type=\"hidden\" id='username' name='username'/>\n");
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <input id='username_tmp' name=\"username_tmp\" type=\"text\" class=\"form-control\" tabindex=\"0\"\n");
      out.write("               placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username"));
      out.write("\">\n");
      out.write("    </div>\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <input id=\"password\" name=\"password\" type=\"password\" class=\"form-control\"\n");
      out.write("               placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "password"));
      out.write("\">\n");
      out.write("    </div>\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <input type=\"hidden\" name=\"sessionDataKey\" value='");
      out.print(Encode.forHtmlAttribute
            (request.getParameter("sessionDataKey")));
      out.write("'/>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <div class=\"checkbox\">\n");
      out.write("            <label>\n");
      out.write("                <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
      out.write("\n");
      out.write("            </label>\n");
      out.write("        </div>\n");
      out.write("        <br>\n");
      out.write("\n");
      out.write("        <div class=\"form-actions\">\n");
      out.write("            <button\n");
      out.write("                    class=\"wr-btn grey-bg col-xs-12 col-md-12 col-lg-12 uppercase font-extra-large\"\n");
      out.write("                    type=\"submit\" onclick=\"appendTenantDomain();\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "login"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    ");
if(request.getParameter("relyingParty").equals("wso2.my.dashboard")) { 
      out.write("\n");
      out.write("    <a id=\"registerLink\" href=\"create-account.jsp?sessionDataKey=");
      out.print(Encode.forHtmlAttribute
            (request.getParameter("sessionDataKey")));
      out.write("\" class=\"font-large\">\n");
      out.write("        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "create.an.account"));
      out.write("\n");
      out.write("    </a>\n");
      out.write("    ");
} 
      out.write("\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("\n");
      out.write("        /**\n");
      out.write("         * Append the tenant domain to the username\n");
      out.write("         */\n");
      out.write("        function appendTenantDomain() {\n");
      out.write("            var element = document.getElementById(\"tenantList\");\n");
      out.write("            var tenantDomain = element.options[element.selectedIndex].value;\n");
      out.write("\n");
      out.write("            setSelectedTenantCookie(tenantDomain, 30);\n");
      out.write("\n");
      out.write("            if (tenantDomain != \"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"select.tenant.dropdown.display.name"));
      out.write("\") {\n");
      out.write("\n");
      out.write("                var username = document.getElementsByName(\"username_tmp\")[0].value;\n");
      out.write("                var userWithDomain = username + \"@\" + tenantDomain;\n");
      out.write("\n");
      out.write("                document.getElementsByName(\"username\")[0].value = userWithDomain;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /**\n");
      out.write("         * Write the selected tenant domain to the cookie\n");
      out.write("         */\n");
      out.write("        function setSelectedTenantCookie(cvalue, exdays) {\n");
      out.write("            var date = new Date();\n");
      out.write("            date.setTime(date.getTime() + (exdays * 24 * 60 * 60 * 1000));\n");
      out.write("            var expires = \"expires=\" + date.toUTCString();\n");
      out.write("            document.cookie = \"selectedTenantDomain=\" + cvalue + \"; \" + expires + \"; secure\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /**\n");
      out.write("         * Get the previously selected tenant domain from the cookie\n");
      out.write("         */\n");
      out.write("        function getSelectedTenantCookie() {\n");
      out.write("            var selectedTenantDomain = \"\";\n");
      out.write("            var name = \"selectedTenantDomain=\";\n");
      out.write("            var cookieItems = document.cookie.split(';');\n");
      out.write("\n");
      out.write("            for (var i = 0; i < cookieItems.length; i++) {\n");
      out.write("                var item = cookieItems[i];\n");
      out.write("                item = item.trim();\n");
      out.write("\n");
      out.write("                if (item.indexOf(name) != -1) {\n");
      out.write("                    selectedTenantDomain = item.substring(name.length, item.length);\n");
      out.write("                    break;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            return selectedTenantDomain;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /**\n");
      out.write("         * Select the tenant domain based on the previously selected tenant domain in cookie\n");
      out.write("         */\n");
      out.write("        function selectTenantFromCookie() {\n");
      out.write("            var tenant = getSelectedTenantCookie();\n");
      out.write("            var element = document.getElementById(\"tenantList\");\n");
      out.write("\n");
      out.write("            for (var i = 0; i < element.options.length; i++) {\n");
      out.write("                if (element.options[i].value == tenant) {\n");
      out.write("                    element.value = tenant;\n");
      out.write("                    break;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            //remove super tenant from dropdown based on the properties\n");
      out.write("            var superTenant = \"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"super.tenant"));
      out.write("\";\n");
      out.write("            if (superTenant == null || superTenant == \"\") {\n");
      out.write("                for (i = 0; i < element.options.length; i++) {\n");
      out.write("                    if (element.options[i].value == superTenant) {\n");
      out.write("                        element.remove(i);\n");
      out.write("                        break;\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("    <div class=\"clearfix\"></div>\n");
      out.write("</form>\n");
      out.write('\n');

                            }
                                }
                            
                            if (includeBasicAuth) {
                                        
      out.write("\n");
      out.write("                                            ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

    String loginFormActionURL;

    if (isBackChannelBasicAuth) {
        loginFormActionURL = "authenticate.do";
        if (StringUtils.isNotBlank(queryString)) {
            loginFormActionURL = loginFormActionURL + "?" + queryString;
        }
    } else {
        String type = request.getParameter("type");
        if ("samlsso".equals(type)) {
            loginFormActionURL = samlssoURL;
        } else if ("oauth2".equals(type)){
            loginFormActionURL = oauth2AuthorizeURL;
        } else {
            loginFormActionURL = commonauthURL;
        }
    }

      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("<script src=\"libs/jquery_3.4.1/jquery-3.4.1.js\"></script>\n");
      out.write("<script>\n");
      out.write("    function goBack() {\n");
      out.write("        window.history.back();\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    // Handle form submission preventing double submission.\n");
      out.write("    $(document).ready(function(){\n");
      out.write("        $.fn.preventDoubleSubmission = function() {\n");
      out.write("            $(this).on('submit',function(e){\n");
      out.write("                var $form = $(this);\n");
      out.write("                if ($form.data('submitted') === true) {\n");
      out.write("                    // Previously submitted - don't submit again.\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    console.warn(\"Prevented a possible double submit event\");\n");
      out.write("                } else {\n");
      out.write("                    e.preventDefault();\n");
      out.write("                    var userName = document.getElementById(\"username\");\n");
      out.write("                    userName.value = userName.value.trim();\n");
      out.write("                    if(userName.value){\n");
      out.write("                        $.ajax({\n");
      out.write("                            type: \"GET\",\n");
      out.write("                            url: \"/logincontext?sessionDataKey=\" + getParameterByName(\"sessionDataKey\") + \"&relyingParty=\" + getParameterByName(\"relyingParty\") + \"&tenantDomain=\" + getParameterByName(\"tenantDomain\"),\n");
      out.write("                            success: function (data) {\n");
      out.write("                                if (data && data.status == 'redirect' && data.redirectUrl && data.redirectUrl.length > 0) {\n");
      out.write("                                    window.location.href = data.redirectUrl;\n");
      out.write("                                } else {\n");
      out.write("                                    // Mark it so that the next submit can be ignored.\n");
      out.write("                                    $form.data('submitted', true);\n");
      out.write("                                    document.getElementById(\"loginForm\").submit();\n");
      out.write("                                }\n");
      out.write("                            },\n");
      out.write("                            cache: false\n");
      out.write("                        });\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            return this;\n");
      out.write("        };\n");
      out.write("        $('#loginForm').preventDoubleSubmission();\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write("\n");
      out.write('\n');

    String resendUsername = request.getParameter("resend_username");
    if (StringUtils.isNotBlank(resendUsername)) {

        ResendCodeRequestDTO selfRegistrationRequest = new ResendCodeRequestDTO();
        UserDTO userDTO = AuthenticationEndpointUtil.getUser(resendUsername);
        selfRegistrationRequest.setUser(userDTO);

        String path = config.getServletContext().getInitParameter(Constants.ACCOUNT_RECOVERY_REST_ENDPOINT_URL);
        String proxyContextPath = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants
                .PROXY_CONTEXT_PATH);
        if (proxyContextPath == null) {
            proxyContextPath = "";
        }
        String url;
        if (StringUtils.isNotBlank(EndpointConfigManager.getServerOrigin())) {
            url = EndpointConfigManager.getServerOrigin() + proxyContextPath + path;
        } else {
            url = IdentityUtil.getServerURL(path, true, false);
        }
        url = url.replace(TENANT_DOMAIN, userDTO.getTenantDomain());

        List<JSONProvider> providers = new ArrayList<JSONProvider>();
        JSONProvider jsonProvider = new JSONProvider();
        jsonProvider.setDropRootElement(true);
        jsonProvider.setIgnoreNamespaces(true);
        jsonProvider.setValidateOutput(true);
        jsonProvider.setSupportUnwrapped(true);
        providers.add(jsonProvider);

        String toEncode = EndpointConfigManager.getAppName() + ":" + String
                .valueOf(EndpointConfigManager.getAppPassword());
        byte[] encoding = Base64.encodeBase64(toEncode.getBytes());
        String authHeader = new String(encoding, Charset.defaultCharset());
        String header = "Client " + authHeader;

        SelfUserRegistrationResource selfUserRegistrationResource = JAXRSClientFactory
                .create(url, SelfUserRegistrationResource.class, providers);
        WebClient.client(selfUserRegistrationResource).header("Authorization", header);
        Response selfRegistrationResponse = selfUserRegistrationResource.regenerateCode(selfRegistrationRequest);
        if (selfRegistrationResponse != null &&  selfRegistrationResponse.getStatus() == HttpStatus.SC_CREATED) {

      out.write("\n");
      out.write("<div class=\"alert alert-info\">\n");
      out.write("    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,Constants.ACCOUNT_RESEND_SUCCESS_RESOURCE));
      out.write("\n");
      out.write("</div>\n");

} else {

      out.write("\n");
      out.write("<div class=\"alert alert-danger\">\n");
      out.write("    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,Constants.ACCOUNT_RESEND_FAIL_RESOURCE));
      out.write("\n");
      out.write("</div>\n");

        }
    }

      out.write("\n");
      out.write("\n");
      out.write("<form action=\"");
      out.print(loginFormActionURL);
      out.write("\" method=\"post\" id=\"loginForm\">\n");
      out.write("\n");
      out.write("    ");

        if (loginFormActionURL.equals(samlssoURL) || loginFormActionURL.equals(oauth2AuthorizeURL)) {
    
      out.write("\n");
      out.write("    <input id=\"tocommonauth\" name=\"tocommonauth\" type=\"hidden\" value=\"true\">\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("\n");
      out.write("    ");
 if (Boolean.parseBoolean(loginFailed)) { 
      out.write("\n");
      out.write("    <div class=\"alert alert-danger\" id=\"error-msg\">");
      out.print( AuthenticationEndpointUtil.i18n(resourceBundle, errorMessage) );
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
}else if((Boolean.TRUE.toString()).equals(request.getParameter("authz_failure"))){
      out.write("\n");
      out.write("    <div class=\"alert alert-danger\" id=\"error-msg\">\n");
      out.write("        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "unauthorized.to.login"));
      out.write("\n");
      out.write("    </div>\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    ");
 if (!isIdentifierFirstLogin(inputType)) { 
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <label for=\"username\">");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "username"));
      out.write("</label>\n");
      out.write("        <input id=\"username\" name=\"username\" type=\"text\" class=\"form-control\" tabindex=\"0\" placeholder=\"\" required\n");
      out.write("               autofocus>\n");
      out.write("    </div>\n");
      out.write("    ");
 } else {
      out.write("\n");
      out.write("        <input id=\"username\" name=\"username\" type=\"hidden\" value=\"");
      out.print(username);
      out.write("\">\n");
      out.write("    ");
 }
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <label for=\"password\">");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "password"));
      out.write("</label>\n");
      out.write("        <input id=\"password\" name=\"password\" type=\"password\" class=\"form-control\" placeholder=\"\" autocomplete=\"off\">\n");
      out.write("    </div>\n");
      out.write("    ");

        if (reCaptchaEnabled) {
    
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <div class=\"g-recaptcha\"\n");
      out.write("             data-sitekey=\"");
      out.print(Encode.forHtmlContent(request.getParameter("reCaptchaKey")));
      out.write("\">\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <div class=\"checkbox\">\n");
      out.write("            <label>\n");
      out.write("                <input type=\"checkbox\" id=\"chkRemember\" name=\"chkRemember\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "remember.me"));
      out.write("\n");
      out.write("            </label>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n");
      out.write("        <input type=\"hidden\" name=\"sessionDataKey\" value='");
      out.print(Encode.forHtmlAttribute
            (request.getParameter("sessionDataKey")));
      out.write("'/>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 padding-double\">\n");
      out.write("        <div class=\"alert alert-warning margin-bottom-3 padding-10\" role=\"alert\">\n");
      out.write("            <div>\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.cookies.short.description"));
      out.write("\n");
      out.write("                <a href=\"cookie_policy.do\" target=\"policy-pane\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.cookies"));
      out.write("\n");
      out.write("                </a>\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.for.more.details"));
      out.write("\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"alert alert-warning margin-none padding-10\" role=\"alert\">\n");
      out.write("            <div>\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.privacy.short.description"));
      out.write("\n");
      out.write("                <a href=\"privacy_policy.do\" target=\"policy-pane\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "privacy.policy.general"));
      out.write("\n");
      out.write("                </a>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("        <div class=\"form-actions\">\n");
      out.write("            <button\n");
      out.write("                    class=\"wr-btn grey-bg col-xs-12 col-md-12 col-lg-12 uppercase font-extra-large margin-bottom-double\"\n");
      out.write("                    type=\"submit\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "login"));
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("        ");

            String recoveryEPAvailable = application.getInitParameter("EnableRecoveryEndpoint");
            String enableSelfSignUpEndpoint = application.getInitParameter("EnableSelfSignUpEndpoint");
            Boolean isRecoveryEPAvailable;
            Boolean isSelfSignUpEPAvailable;

            if (StringUtils.isNotBlank(recoveryEPAvailable)) {
                isRecoveryEPAvailable = Boolean.valueOf(recoveryEPAvailable);
            } else {
                isRecoveryEPAvailable = isRecoveryEPAvailable();
            }

            if (StringUtils.isNotBlank(enableSelfSignUpEndpoint)) {
                isSelfSignUpEPAvailable = Boolean.valueOf(enableSelfSignUpEndpoint);
            } else {
                isSelfSignUpEPAvailable = isSelfSignUpEPAvailable();
            }

            if (isRecoveryEPAvailable || isSelfSignUpEPAvailable) {
                String scheme = request.getScheme();
                String serverName = request.getServerName();
                int serverPort = request.getServerPort();
                String uri = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_REQUEST_URI);
                String prmstr = (String) request.getAttribute(JAVAX_SERVLET_FORWARD_QUERY_STRING);
                String urlWithoutEncoding = scheme + "://" +serverName + ":" + serverPort + uri + "?" + prmstr;
                String urlEncodedURL = URLEncoder.encode(urlWithoutEncoding, UTF_8);

                String identityMgtEndpointContext =
                        application.getInitParameter("IdentityManagementEndpointContextURL");
                if (StringUtils.isBlank(identityMgtEndpointContext)) {
                    identityMgtEndpointContext = getServerURL("/accountrecoveryendpoint", true, true);
                }

                if (isRecoveryEPAvailable) {
        
      out.write("\n");
      out.write("        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("            <div class=\"form-actions\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password"));
      out.write("\n");
      out.write("                ");
 if (!isIdentifierFirstLogin(inputType)) { 
      out.write("\n");
      out.write("                    <a id=\"usernameRecoverLink\" href=\"");
      out.print(getRecoverAccountUrl(identityMgtEndpointContext, urlEncodedURL, true));
      out.write("\">\n");
      out.write("                        ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username"));
      out.write("\n");
      out.write("                    </a>\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.username.password.or"));
      out.write("\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("                <a id=\"passwordRecoverLink\" href=\"");
      out.print(getRecoverAccountUrl(identityMgtEndpointContext, urlEncodedURL, false));
      out.write("\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "forgot.password"));
      out.write("\n");
      out.write("                </a>\n");
      out.write("                ?\n");
      out.write("            </div>\n");
      out.write("    \n");
      out.write("            <div class=\"form-actions\">\n");
      out.write("                ");
 if (isIdentifierFirstLogin(inputType)) { 
      out.write("\n");
      out.write("                <a id=\"backLink\" onclick=\"goBack()\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "sign.in.different.account"));
      out.write("\n");
      out.write("                </a>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        ");

                }
                if (isSelfSignUpEPAvailable && !isIdentifierFirstLogin(inputType)) {
        
      out.write("\n");
      out.write("        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("            <div class=\"form-actions\">\n");
      out.write("            ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "no.account"));
      out.write("\n");
      out.write("            <a id=\"registerLink\" href=\"");
      out.print(getRegistrationUrl(identityMgtEndpointContext, urlEncodedURL));
      out.write("\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "register.now"));
      out.write("\n");
      out.write("            </a>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        ");

                }
            }
        
      out.write("\n");
      out.write("    ");
 if (Boolean.parseBoolean(loginFailed) && errorCode.equals(IdentityCoreConstants.USER_ACCOUNT_NOT_CONFIRMED_ERROR_CODE) && request.getParameter("resend_username") == null) { 
      out.write("\n");
      out.write("        <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 form-group\">\n");
      out.write("            <div class=\"form-actions\">\n");
      out.write("                ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "no.confirmation.mail"));
      out.write("\n");
      out.write("                <a id=\"registerLink\"\n");
      out.write("                   href=\"login.do?resend_username=");
      out.print(Encode.forHtml(request.getParameter("failedUsername")));
      out.write('&');
      out.print(AuthenticationEndpointUtil.cleanErrorMessages(Encode.forJava(request.getQueryString())));
      out.write("\">\n");
      out.write("                    ");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle, "resend.mail"));
      out.write("\n");
      out.write("                </a>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        ");
}
      out.write("\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"clearfix\"></div>\n");
      out.write("    ");
      out.write("\n");
      out.write("</form>\n");
      out.write("\n");
      out.write("                                        ");

                                    }
                                }
                            }
                            
      out.write("\n");
      out.write("\n");
      out.write("                            ");
if (idpAuthenticatorMapping != null &&
                                    idpAuthenticatorMapping.get(Constants.RESIDENT_IDP_RESERVED_NAME) != null) { 
      out.write("\n");
      out.write("\n");
      out.write("                            ");
} 
      out.write("\n");
      out.write("                            ");

                                if ((hasLocalLoginOptions && localAuthenticatorNames.size() > 1) || (!hasLocalLoginOptions)
                                        || (hasLocalLoginOptions && idpAuthenticatorMapping != null && idpAuthenticatorMapping.size() > 1)) {
                            
      out.write("\n");
      out.write("                            <div class=\"form-group\">\n");
      out.write("                                ");
 if (hasLocalLoginOptions) { 
      out.write("\n");
      out.write("                                <label class=\"font-large\">");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,
                                        "other.login.options"));
      out.write(":</label>\n");
      out.write("                                ");
} 
      out.write("\n");
      out.write("                            </div>\n");
      out.write("                            <div class=\"form-group\">\n");
      out.write("                                ");

                                    int iconId = 0;
                                    if (idpAuthenticatorMapping != null) {
                                    for (Map.Entry<String, String> idpEntry : idpAuthenticatorMapping.entrySet()) {
                                        iconId++;
                                        if (!idpEntry.getKey().equals(Constants.RESIDENT_IDP_RESERVED_NAME)) {
                                            String idpName = idpEntry.getKey();
                                            boolean isHubIdp = false;
                                            if (idpName.endsWith(".hub")) {
                                                isHubIdp = true;
                                                idpName = idpName.substring(0, idpName.length() - 4);
                                            }
                                
      out.write("\n");
      out.write("                                ");
 if (isHubIdp) { 
      out.write("\n");
      out.write("                                <div>\n");
      out.write("                                <a href=\"#\" data-toggle=\"popover\" data-placement=\"bottom\"\n");
      out.write("                                   title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"sign.in.with"));
      out.write("\n");
      out.write("                                    ");
      out.print(Encode.forHtmlAttribute(idpName));
      out.write("\" id=\"popover\" id=\"icon-");
      out.print(iconId);
      out.write("\">\n");
      out.write("                                    <img class=\"idp-image\" src=\"images/login-icon.png\"\n");
      out.write("                                         title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"sign.in.with"));
      out.write("\n");
      out.write("                                         ");
      out.print(Encode.forHtmlAttribute(idpName));
      out.write("\"/>\n");
      out.write("\n");
      out.write("                                    <div id=\"popover-head\" class=\"hide\">\n");
      out.write("                                        <label class=\"font-large\">");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"sign.in.with"));
      out.write("\n");
      out.write("                                            ");
      out.print(Encode.forHtmlContent(idpName));
      out.write("</label>\n");
      out.write("                                    </div>\n");
      out.write("                                    <div id=\"popover-content\" class=\"hide\">\n");
      out.write("                                        <form class=\"form-inline\">\n");
      out.write("                                            <div class=\"form-group\">\n");
      out.write("                                                <input id=\"domainName\" class=\"form-control\" type=\"text\"\n");
      out.write("                                                       placeholder=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,
                                                       "domain.name"));
      out.write("\">\n");
      out.write("                                            </div>\n");
      out.write("                                            <input type=\"button\" class=\"btn btn-primary go-btn\"\n");
      out.write("                                                   onClick=\"javascript: myFunction('");
      out.print(idpName);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(idpEntry.getValue());
      out.write("','domainName')\"\n");
      out.write("                                                   value=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"go"));
      out.write("\"/>\n");
      out.write("                                        </form>\n");
      out.write("\n");
      out.write("                                    </div>\n");
      out.write("                                </a>\n");
      out.write("                                    <label for=\"icon-");
      out.print(iconId);
      out.write('"');
      out.write('>');
      out.print(Encode.forHtmlContent(idpName));
      out.write("</label>\n");
      out.write("                                </div>\n");
      out.write("                                ");
} else { 
      out.write("\n");
      out.write("                                <div>\n");
      out.write("                                <a onclick=\"javascript: handleNoDomain('");
      out.print(Encode.forJavaScriptAttribute(Encode.
                                forUriComponent(idpName)));
      out.write("',\n");
      out.write("                                        '");
      out.print(Encode.forJavaScriptAttribute(Encode.forUriComponent(idpEntry.getValue())));
      out.write("')\"\n");
      out.write("                                   href=\"#\" id=\"icon-");
      out.print(iconId);
      out.write("\">\n");
      out.write("                                    <img class=\"idp-image\" src=\"images/login-icon.png\" data-toggle=\"tooltip\"\n");
      out.write("                                         data-placement=\"top\" title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,
                                                       "sign.in.with"));
      out.write(' ');
      out.print(Encode.forHtmlAttribute(idpName));
      out.write("\"/>\n");
      out.write("                                </a>\n");
      out.write("                                <label for=\"icon-");
      out.print(iconId);
      out.write('"');
      out.write('>');
      out.print(Encode.forHtmlContent(idpName));
      out.write("</label>\n");
      out.write("                                    </div>\n");
      out.write("                                ");
} 
      out.write("\n");
      out.write("                                ");

                                } else if (localAuthenticatorNames.size() > 0) {
                                    if (localAuthenticatorNames.contains(IWA_AUTHENTICATOR)) {
                                
      out.write("\n");
      out.write("                                <div>\n");
      out.write("                                <a onclick=\"javascript: handleNoDomain('");
      out.print(Encode.forJavaScriptAttribute(Encode.
                                forUriComponent(idpEntry.getKey())));
      out.write("',\n");
      out.write("                                        'IWAAuthenticator')\" class=\"main-link\" style=\"cursor:pointer\" id=\"icon-");
      out.print(iconId);
      out.write("\">\n");
      out.write("                                    <img class=\"idp-image\" src=\"images/login-icon.png\" data-toggle=\"tooltip\"\n");
      out.write("                                         data-placement=\"top\" title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,
                                                       "sign.in.with"));
      out.write(" IWA\"/>\n");
      out.write("                                </a>\n");
      out.write("                                <label for=\"icon-");
      out.print(iconId);
      out.write("\">IWA</label>\n");
      out.write("                                </div>\n");
      out.write("                                ");

                                    }
                                    if (localAuthenticatorNames.contains(X509_CERTIFICATE_AUTHENTICATOR)) {
                                
      out.write("\n");
      out.write("                                <div>\n");
      out.write("                                    <a onclick=\"javascript: handleNoDomain('");
      out.print(Encode.forJavaScriptAttribute(Encode.
                                forUriComponent(idpEntry.getKey())));
      out.write("',\n");
      out.write("                                            'x509CertificateAuthenticator')\" class=\"main-link\" style=\"cursor:pointer\" id=\"icon-");
      out.print(iconId);
      out.write("\">\n");
      out.write("                                        <img class=\"idp-image\" src=\"images/login-icon.png\" data-toggle=\"tooltip\"\n");
      out.write("                                             data-placement=\"top\" title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,
                                                       "sign.in.with"));
      out.write(" X509 Certificate\"/>\n");
      out.write("                                    </a>\n");
      out.write("                                    <label for=\"icon-");
      out.print(iconId);
      out.write("\">x509CertificateAuthenticator</label>\n");
      out.write("\n");
      out.write("                                </div>\n");
      out.write("                                ");

                                    }
                                    if (localAuthenticatorNames.contains(FIDO_AUTHENTICATOR)) {
                                
      out.write("\n");
      out.write("                                <div>\n");
      out.write("                                <a onclick=\"javascript: handleNoDomain('");
      out.print(Encode.forJavaScriptAttribute(Encode.
                                forUriComponent(idpEntry.getKey())));
      out.write("',\n");
      out.write("                                        'FIDOAuthenticator')\" class=\"main-link\" style=\"cursor:pointer\" id=\"icon-");
      out.print(iconId);
      out.write("\">\n");
      out.write("                                    <img class=\"idp-image\" src=\"images/login-icon.png\" data-toggle=\"tooltip\"\n");
      out.write("                                         data-placement=\"top\" title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,
                                                       "sign.in.with"));
      out.write(" FIDO\"/>\n");
      out.write("                                </a>\n");
      out.write("                                <label for=\"icon-");
      out.print(iconId);
      out.write("\">FIDO</label>\n");
      out.write("\n");
      out.write("                                </div>\n");
      out.write("                                ");

                                            }
                                    if (localAuthenticatorNames.contains("totp")) {
                                
      out.write("\n");
      out.write("                                <div>\n");
      out.write("                                <a onclick=\"javascript: handleNoDomain('");
      out.print(Encode.forJavaScriptAttribute(Encode.
                                forUriComponent(idpEntry.getKey())));
      out.write("',\n");
      out.write("                                        'totp')\" class=\"main-link\" style=\"cursor:pointer\" id=\"icon-");
      out.print(iconId);
      out.write("\">\n");
      out.write("                                    <img class=\"idp-image\" src=\"images/login-icon.png\" data-toggle=\"tooltip\"\n");
      out.write("                                         data-placement=\"top\" title=\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,
                                                       "sign.in.with"));
      out.write(" TOTP\"/>\n");
      out.write("                                </a>\n");
      out.write("                                <label for=\"icon-");
      out.print(iconId);
      out.write("\">TOTP</label>\n");
      out.write("\n");
      out.write("                                </div>\n");
      out.write("                                ");

                                            }
                                        }

                                    }
                                    }
      out.write("\n");
      out.write("\n");
      out.write("                            </div>\n");
      out.write("\n");
      out.write("\n");
      out.write("                            ");
 } 
      out.write("\n");
      out.write("                            \n");
      out.write("                            <div class=\"clearfix\"></div>\n");
      out.write("\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                    <!-- /content -->\n");
      out.write("\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("            <!-- /content/body -->\n");
      out.write("\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <!-- footer -->\n");
      out.write("    ");

        File footerFile = new File(getServletContext().getRealPath("extensions/footer.jsp"));
        if (footerFile.exists()) {
    
      out.write("\n");
      out.write("            ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "extensions/footer.jsp", out, false);
      out.write("\n");
      out.write("    ");
 } else { 
      out.write("\n");
      out.write("            ");
      out.write("\n");
      out.write("\n");
      out.write("<!-- localize.jsp MUST already be included in the calling script -->\n");
      out.write("\n");
      out.write("<!-- footer -->\n");
      out.write("<footer class=\"footer\">\n");
      out.write("    <div class=\"container-fluid\">\n");
      out.write("        <p>WSO2 API Manager | &copy;\n");
      out.write("            <script>document.write(new Date().getFullYear());</script>\n");
      out.write("            <a href=\"https://wso2.com/\"\n");
      out.write("               target=\"_blank\">\n");
      out.write("               <i class=\"icon fw fw-wso2\"></i>\n");
      out.write("               Inc\n");
      out.write("            </a>\n");
      out.write("            . All rights reserved\n");
      out.write("        </p>\n");
      out.write("    </div>\n");
      out.write("</footer>\n");
      out.write("\n");
      out.write("    ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("    <script src=\"libs/jquery_3.4.1/jquery-3.4.1.js\"></script>\n");
      out.write("    <script src=\"libs/bootstrap_3.4.1/js/bootstrap.min.js\"></script>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        $(document).ready(function () {\n");
      out.write("            $('.main-link').click(function () {\n");
      out.write("                $('.main-link').next().hide();\n");
      out.write("                $(this).next().toggle('fast');\n");
      out.write("                var w = $(document).width();\n");
      out.write("                var h = $(document).height();\n");
      out.write("                $('.overlay').css(\"width\", w + \"px\").css(\"height\", h + \"px\").show();\n");
      out.write("            });\n");
      out.write("            $('[data-toggle=\"popover\"]').popover();\n");
      out.write("            $('.overlay').click(function () {\n");
      out.write("                $(this).hide();\n");
      out.write("                $('.main-link').next().hide();\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            ");

            if(reCaptchaEnabled) {
            
      out.write("\n");
      out.write("            var error_msg = $(\"#error-msg\");\n");
      out.write("            $(\"#loginForm\").submit(function (e) {\n");
      out.write("                var resp = $(\"[name='g-recaptcha-response']\")[0].value;\n");
      out.write("                if (resp.trim() == '') {\n");
      out.write("                    error_msg.text(\"");
      out.print(AuthenticationEndpointUtil.i18n(resourceBundle,"please.select.recaptcha"));
      out.write("\");\n");
      out.write("                    error_msg.show();\n");
      out.write("                    $(\"html, body\").animate({scrollTop: error_msg.offset().top}, 'slow');\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("                return true;\n");
      out.write("            });\n");
      out.write("            ");

            }
            
      out.write("\n");
      out.write("        });\n");
      out.write("        function myFunction(key, value, name) {\n");
      out.write("            var object = document.getElementById(name);\n");
      out.write("            var domain = object.value;\n");
      out.write("\n");
      out.write("\n");
      out.write("            if (domain != \"\") {\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                        \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("&domain=\" +\n");
      out.write("                        domain;\n");
      out.write("            } else {\n");
      out.write("                document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                        \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function handleNoDomain(key, value) {\n");
      out.write("            ");

                String multiOptionURIParam = "";
                if (localAuthenticatorNames.size() > 1 || idpAuthenticatorMapping != null && idpAuthenticatorMapping.size() > 1) {
                    multiOptionURIParam = "&multiOptionURI=" + Encode.forUriComponent(request.getRequestURI() +
                        (request.getQueryString() != null ? "?" + request.getQueryString() : ""));
                }
            
      out.write("\n");
      out.write("            document.location = \"");
      out.print(commonauthURL);
      out.write("?idp=\" + key + \"&authenticator=\" + value +\n");
      out.write("                    \"&sessionDataKey=");
      out.print(Encode.forUriComponent(request.getParameter("sessionDataKey")));
      out.write("\" +\n");
      out.write("                    \"");
      out.print(multiOptionURIParam);
      out.write("\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        $('#popover').popover({\n");
      out.write("            html: true,\n");
      out.write("            title: function () {\n");
      out.write("                return $(\"#popover-head\").html();\n");
      out.write("            },\n");
      out.write("            content: function () {\n");
      out.write("                return $(\"#popover-content\").html();\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("        window.onunload = function(){};\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        function changeUsername (e) {\n");
      out.write("            document.getElementById(\"changeUserForm\").submit();\n");
      out.write("        }\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("\n");
      out.write("    </body>\n");
      out.write("    </html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
